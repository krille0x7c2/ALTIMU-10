
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00001908  0000199c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001908  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800100  00800100  0000199c  2**0
                  ALLOC
  3 .stab         0000273c  00000000  00000000  0000199c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000153b  00000000  00000000  000040d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000027  00000000  00000000  00005613  2**0
                  CONTENTS, READONLY
  6 .debug_info   000005f4  00000000  00000000  0000563a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005a2  00000000  00000000  00005c2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001d  00000000  00000000  000061d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  000061ed  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 cc 00 	jmp	0x198	; 0x198 <__ctors_end>
       4:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
       8:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
       c:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
      10:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
      14:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
      18:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
      1c:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
      20:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
      24:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
      28:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
      2c:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
      30:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
      34:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
      38:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
      3c:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
      40:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
      44:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
      48:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
      4c:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
      50:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
      54:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
      58:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
      5c:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
      60:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
      64:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
      68:	08 4a       	sbci	r16, 0xA8	; 168
      6a:	d7 3b       	cpi	r29, 0xB7	; 183
      6c:	3b ce       	rjmp	.-906    	; 0xfffffce4 <__eeprom_end+0xff7efce4>
      6e:	01 6e       	ori	r16, 0xE1	; 225
      70:	84 bc       	out	0x24, r8	; 36
      72:	bf fd       	.word	0xfdbf	; ????
      74:	c1 2f       	mov	r28, r17
      76:	3d 6c       	ori	r19, 0xCD	; 205
      78:	74 31       	cpi	r23, 0x14	; 20
      7a:	9a bd       	out	0x2a, r25	; 42
      7c:	56 83       	std	Z+6, r21	; 0x06
      7e:	3d da       	rcall	.-2950   	; 0xfffff4fa <__eeprom_end+0xff7ef4fa>
      80:	3d 00       	.word	0x003d	; ????
      82:	c7 7f       	andi	r28, 0xF7	; 247
      84:	11 be       	out	0x31, r1	; 49
      86:	d9 e4       	ldi	r29, 0x49	; 73
      88:	bb 4c       	sbci	r27, 0xCB	; 203
      8a:	3e 91       	ld	r19, -X
      8c:	6b aa       	std	Y+51, r6	; 0x33
      8e:	aa be       	out	0x3a, r10	; 58
      90:	00 00       	nop
      92:	00 80       	ld	r0, Z
      94:	3f 00       	.word	0x003f	; ????

00000096 <__trampolines_end>:
      96:	6e 61       	ori	r22, 0x1E	; 30
      98:	6e 00       	.word	0x006e	; ????

0000009a <__c.2240>:
      9a:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      aa:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      ba:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      ca:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
      da:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
      ea:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
      fa:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     10a:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     11a:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     12a:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     13a:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     14a:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     15a:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     16a:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     17a:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     18a:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000198 <__ctors_end>:
     198:	11 24       	eor	r1, r1
     19a:	1f be       	out	0x3f, r1	; 63
     19c:	cf ef       	ldi	r28, 0xFF	; 255
     19e:	d8 e0       	ldi	r29, 0x08	; 8
     1a0:	de bf       	out	0x3e, r29	; 62
     1a2:	cd bf       	out	0x3d, r28	; 61

000001a4 <__do_clear_bss>:
     1a4:	11 e0       	ldi	r17, 0x01	; 1
     1a6:	a0 e0       	ldi	r26, 0x00	; 0
     1a8:	b1 e0       	ldi	r27, 0x01	; 1
     1aa:	01 c0       	rjmp	.+2      	; 0x1ae <.do_clear_bss_start>

000001ac <.do_clear_bss_loop>:
     1ac:	1d 92       	st	X+, r1

000001ae <.do_clear_bss_start>:
     1ae:	a6 30       	cpi	r26, 0x06	; 6
     1b0:	b1 07       	cpc	r27, r17
     1b2:	e1 f7       	brne	.-8      	; 0x1ac <.do_clear_bss_loop>
     1b4:	0e 94 9a 04 	call	0x934	; 0x934 <main>
     1b8:	0c 94 82 0c 	jmp	0x1904	; 0x1904 <_exit>

000001bc <__bad_interrupt>:
     1bc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001c0 <USART0Init>:
#include "usart.h"
#include <avr/io.h>

void USART0Init(void) {
    // Set baud rate
    UBRR0H = (uint8_t) (UBRR_VALUE >> 8);
     1c0:	10 92 c5 00 	sts	0x00C5, r1
    UBRR0L = (uint8_t) UBRR_VALUE;
     1c4:	87 e6       	ldi	r24, 0x67	; 103
     1c6:	80 93 c4 00 	sts	0x00C4, r24
    // Set frame format to 8 data bits, no parity, 1 stop bit
    UCSR0C |= (1 << UCSZ01) | (1 << UCSZ00);
     1ca:	e2 ec       	ldi	r30, 0xC2	; 194
     1cc:	f0 e0       	ldi	r31, 0x00	; 0
     1ce:	80 81       	ld	r24, Z
     1d0:	86 60       	ori	r24, 0x06	; 6
     1d2:	80 83       	st	Z, r24
    //enable transmission and reception
    UCSR0B |= (1 << RXEN0) | (1 << TXEN0);
     1d4:	e1 ec       	ldi	r30, 0xC1	; 193
     1d6:	f0 e0       	ldi	r31, 0x00	; 0
     1d8:	80 81       	ld	r24, Z
     1da:	88 61       	ori	r24, 0x18	; 24
     1dc:	80 83       	st	Z, r24
     1de:	08 95       	ret

000001e0 <USART0SendByte>:
}

int USART0SendByte(char u8Data, FILE *stream) {
     1e0:	cf 93       	push	r28
     1e2:	c8 2f       	mov	r28, r24
    if (u8Data == '\n') {
     1e4:	8a 30       	cpi	r24, 0x0A	; 10
     1e6:	29 f4       	brne	.+10     	; 0x1f2 <USART0SendByte+0x12>
        USART0SendByte('\r', 0);
     1e8:	60 e0       	ldi	r22, 0x00	; 0
     1ea:	70 e0       	ldi	r23, 0x00	; 0
     1ec:	8d e0       	ldi	r24, 0x0D	; 13
     1ee:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <USART0SendByte>
    }
    //wait while previous byte is completed
    while (!(UCSR0A & (1 << UDRE0))) {
     1f2:	80 91 c0 00 	lds	r24, 0x00C0
     1f6:	85 ff       	sbrs	r24, 5
     1f8:	fc cf       	rjmp	.-8      	; 0x1f2 <USART0SendByte+0x12>
    };
    // Transmit data
    UDR0 = u8Data;
     1fa:	c0 93 c6 00 	sts	0x00C6, r28
    return 0;
}
     1fe:	80 e0       	ldi	r24, 0x00	; 0
     200:	90 e0       	ldi	r25, 0x00	; 0
     202:	cf 91       	pop	r28
     204:	08 95       	ret

00000206 <USART0ReceiveByte>:
int USART0ReceiveByte(FILE *stream) {
     206:	cf 93       	push	r28
    uint8_t u8Data;
    // Wait for byte to be received
    while (!(UCSR0A & (1 << RXC0))) {
     208:	20 91 c0 00 	lds	r18, 0x00C0
     20c:	27 ff       	sbrs	r18, 7
     20e:	fc cf       	rjmp	.-8      	; 0x208 <USART0ReceiveByte+0x2>
    };
    u8Data = UDR0;
     210:	c0 91 c6 00 	lds	r28, 0x00C6
    //echo input data
    USART0SendByte(u8Data, stream);
     214:	bc 01       	movw	r22, r24
     216:	8c 2f       	mov	r24, r28
     218:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <USART0SendByte>
    // Return received data
    return u8Data;
}
     21c:	8c 2f       	mov	r24, r28
     21e:	90 e0       	ldi	r25, 0x00	; 0
     220:	cf 91       	pop	r28
     222:	08 95       	ret

00000224 <TWIInit>:
#include <compat/twi.h>
#include <util/delay.h>
void TWIInit(void)
{
    //set SCL to 400kHz
    TWSR = 0x00;
     224:	10 92 b9 00 	sts	0x00B9, r1
    TWBR = 0x0C;
     228:	8c e0       	ldi	r24, 0x0C	; 12
     22a:	80 93 b8 00 	sts	0x00B8, r24
    //enable TWI
    TWCR = (1<<TWEN);
     22e:	84 e0       	ldi	r24, 0x04	; 4
     230:	80 93 bc 00 	sts	0x00BC, r24
     234:	08 95       	ret

00000236 <i2c_start>:
uint8_t i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     236:	94 ea       	ldi	r25, 0xA4	; 164
     238:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
     23c:	90 91 bc 00 	lds	r25, 0x00BC
     240:	97 ff       	sbrs	r25, 7
     242:	fc cf       	rjmp	.-8      	; 0x23c <i2c_start+0x6>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
     244:	90 91 b9 00 	lds	r25, 0x00B9
     248:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
     24a:	98 30       	cpi	r25, 0x08	; 8
     24c:	21 f0       	breq	.+8      	; 0x256 <i2c_start+0x20>
     24e:	90 31       	cpi	r25, 0x10	; 16
     250:	11 f0       	breq	.+4      	; 0x256 <i2c_start+0x20>
     252:	81 e0       	ldi	r24, 0x01	; 1
     254:	08 95       	ret

	// send device address
	TWDR = address;
     256:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
     25a:	84 e8       	ldi	r24, 0x84	; 132
     25c:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
     260:	80 91 bc 00 	lds	r24, 0x00BC
     264:	87 ff       	sbrs	r24, 7
     266:	fc cf       	rjmp	.-8      	; 0x260 <i2c_start+0x2a>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
     268:	80 91 b9 00 	lds	r24, 0x00B9
     26c:	88 7f       	andi	r24, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
     26e:	88 31       	cpi	r24, 0x18	; 24
     270:	11 f0       	breq	.+4      	; 0x276 <i2c_start+0x40>
     272:	80 34       	cpi	r24, 0x40	; 64
     274:	71 f7       	brne	.-36     	; 0x252 <i2c_start+0x1c>

	return 0;
     276:	80 e0       	ldi	r24, 0x00	; 0

}
     278:	08 95       	ret

0000027a <i2c_start_wait>:


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     27a:	24 ea       	ldi	r18, 0xA4	; 164
    	twst = TW_STATUS & 0xF8;
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
    	TWCR = (1<<TWINT) | (1<<TWEN);
     27c:	34 e8       	ldi	r19, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     27e:	44 e9       	ldi	r20, 0x94	; 148


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     280:	20 93 bc 00 	sts	0x00BC, r18
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
     284:	90 91 bc 00 	lds	r25, 0x00BC
     288:	97 ff       	sbrs	r25, 7
     28a:	fc cf       	rjmp	.-8      	; 0x284 <i2c_start_wait+0xa>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
     28c:	90 91 b9 00 	lds	r25, 0x00B9
     290:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
     292:	98 30       	cpi	r25, 0x08	; 8
     294:	11 f0       	breq	.+4      	; 0x29a <i2c_start_wait+0x20>
     296:	90 31       	cpi	r25, 0x10	; 16
     298:	99 f7       	brne	.-26     	; 0x280 <i2c_start_wait+0x6>
    
    	// send device address
    	TWDR = address;
     29a:	80 93 bb 00 	sts	0x00BB, r24
    	TWCR = (1<<TWINT) | (1<<TWEN);
     29e:	30 93 bc 00 	sts	0x00BC, r19
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
     2a2:	90 91 bc 00 	lds	r25, 0x00BC
     2a6:	97 ff       	sbrs	r25, 7
     2a8:	fc cf       	rjmp	.-8      	; 0x2a2 <i2c_start_wait+0x28>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
     2aa:	90 91 b9 00 	lds	r25, 0x00B9
     2ae:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
     2b0:	90 32       	cpi	r25, 0x20	; 32
     2b2:	11 f0       	breq	.+4      	; 0x2b8 <i2c_start_wait+0x3e>
     2b4:	98 35       	cpi	r25, 0x58	; 88
     2b6:	39 f4       	brne	.+14     	; 0x2c6 <i2c_start_wait+0x4c>
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     2b8:	40 93 bc 00 	sts	0x00BC, r20
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
     2bc:	90 91 bc 00 	lds	r25, 0x00BC
     2c0:	94 fd       	sbrc	r25, 4
     2c2:	fc cf       	rjmp	.-8      	; 0x2bc <i2c_start_wait+0x42>
     2c4:	dd cf       	rjmp	.-70     	; 0x280 <i2c_start_wait+0x6>
     2c6:	08 95       	ret

000002c8 <i2c_rep_start>:
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
uint8_t i2c_rep_start(unsigned char address)
{
    return i2c_start( address );
     2c8:	0c 94 1b 01 	jmp	0x236	; 0x236 <i2c_start>

000002cc <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     2cc:	84 e9       	ldi	r24, 0x94	; 148
     2ce:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
     2d2:	80 91 bc 00 	lds	r24, 0x00BC
     2d6:	84 fd       	sbrc	r24, 4
     2d8:	fc cf       	rjmp	.-8      	; 0x2d2 <i2c_stop+0x6>

}
     2da:	08 95       	ret

000002dc <i2c_write>:
uint8_t i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
     2dc:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
     2e0:	84 e8       	ldi	r24, 0x84	; 132
     2e2:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
     2e6:	80 91 bc 00 	lds	r24, 0x00BC
     2ea:	87 ff       	sbrs	r24, 7
     2ec:	fc cf       	rjmp	.-8      	; 0x2e6 <i2c_write+0xa>

	// check value of TWI Status Register. Mask prescaler bits only need the top 5 bits
	twst = TW_STATUS & 0xF8;
     2ee:	90 91 b9 00 	lds	r25, 0x00B9
     2f2:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
     2f4:	81 e0       	ldi	r24, 0x01	; 1
     2f6:	98 32       	cpi	r25, 0x28	; 40
     2f8:	09 f4       	brne	.+2      	; 0x2fc <i2c_write+0x20>
     2fa:	80 e0       	ldi	r24, 0x00	; 0
	return 0;

}
     2fc:	08 95       	ret

000002fe <i2c_readAck>:
 
 Return:  byte read from I2C device
*************************************************************************/
uint8_t i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
     2fe:	84 ec       	ldi	r24, 0xC4	; 196
     300:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));    
     304:	80 91 bc 00 	lds	r24, 0x00BC
     308:	87 ff       	sbrs	r24, 7
     30a:	fc cf       	rjmp	.-8      	; 0x304 <i2c_readAck+0x6>

    return TWDR;
     30c:	80 91 bb 00 	lds	r24, 0x00BB

}
     310:	08 95       	ret

00000312 <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
uint8_t i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
     312:	84 e8       	ldi	r24, 0x84	; 132
     314:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
     318:	80 91 bc 00 	lds	r24, 0x00BC
     31c:	87 ff       	sbrs	r24, 7
     31e:	fc cf       	rjmp	.-8      	; 0x318 <i2c_readNak+0x6>
	
    return TWDR;
     320:	80 91 bb 00 	lds	r24, 0x00BB

     324:	08 95       	ret

00000326 <read_temp_celsius>:
 
 Return: float value in Celsius
 
*************************************************************************/

float read_temp_celsius(void) {
     326:	cf 93       	push	r28
    if (i2c_start(BAR_SLAVE_ADDRESS << 1) == 0) {
     328:	8a eb       	ldi	r24, 0xBA	; 186
     32a:	0e 94 1b 01 	call	0x236	; 0x236 <i2c_start>
     32e:	88 23       	and	r24, r24
     330:	29 f0       	breq	.+10     	; 0x33c <read_temp_celsius+0x16>
            return (45.5 + ((float) temp) / 480); //To Celsius

        }

    }
    return 1;
     332:	60 e0       	ldi	r22, 0x00	; 0
     334:	70 e0       	ldi	r23, 0x00	; 0
     336:	80 e8       	ldi	r24, 0x80	; 128
     338:	9f e3       	ldi	r25, 0x3F	; 63
     33a:	22 c0       	rjmp	.+68     	; 0x380 <read_temp_celsius+0x5a>
 
*************************************************************************/

float read_temp_celsius(void) {
    if (i2c_start(BAR_SLAVE_ADDRESS << 1) == 0) {
        i2c_write(BAR_TEMP_OUT_L | (1 << 7));
     33c:	8b ea       	ldi	r24, 0xAB	; 171
     33e:	0e 94 6e 01 	call	0x2dc	; 0x2dc <i2c_write>

        if (i2c_rep_start(((uint8_t) BAR_SLAVE_ADDRESS << 1) | 1) == 0) {
     342:	8b eb       	ldi	r24, 0xBB	; 187
     344:	0e 94 64 01 	call	0x2c8	; 0x2c8 <i2c_rep_start>
     348:	81 11       	cpse	r24, r1
     34a:	f3 cf       	rjmp	.-26     	; 0x332 <read_temp_celsius+0xc>
            uint8_t tl = i2c_read(ACK);
     34c:	0e 94 7f 01 	call	0x2fe	; 0x2fe <i2c_readAck>
     350:	c8 2f       	mov	r28, r24
            uint8_t th = i2c_read(NAK);
     352:	0e 94 89 01 	call	0x312	; 0x312 <i2c_readNak>
            int16_t temp = (int16_t) (th << 8 | tl);
     356:	6c 2f       	mov	r22, r28
     358:	70 e0       	ldi	r23, 0x00	; 0
     35a:	78 2b       	or	r23, r24
            return (45.5 + ((float) temp) / 480); //To Celsius
     35c:	88 27       	eor	r24, r24
     35e:	77 fd       	sbrc	r23, 7
     360:	80 95       	com	r24
     362:	98 2f       	mov	r25, r24
     364:	0e 94 a9 09 	call	0x1352	; 0x1352 <__floatsisf>
     368:	20 e0       	ldi	r18, 0x00	; 0
     36a:	30 e0       	ldi	r19, 0x00	; 0
     36c:	40 ef       	ldi	r20, 0xF0	; 240
     36e:	53 e4       	ldi	r21, 0x43	; 67
     370:	0e 94 0e 09 	call	0x121c	; 0x121c <__divsf3>
     374:	20 e0       	ldi	r18, 0x00	; 0
     376:	30 e0       	ldi	r19, 0x00	; 0
     378:	46 e3       	ldi	r20, 0x36	; 54
     37a:	52 e4       	ldi	r21, 0x42	; 66
     37c:	0e 94 48 08 	call	0x1090	; 0x1090 <__addsf3>

        }

    }
    return 1;
}/*read_temp_celsius*/
     380:	cf 91       	pop	r28
     382:	08 95       	ret

00000384 <read_pressure_hpa>:
 Read the pressure
 
 Return: float value in hpa
 
************************************************************************/
float read_pressure_hpa(void) {
     384:	0f 93       	push	r16
     386:	1f 93       	push	r17
     388:	cf 93       	push	r28
     38a:	df 93       	push	r29
    if (i2c_start(BAR_SLAVE_ADDRESS << 1) == 0) {
     38c:	8a eb       	ldi	r24, 0xBA	; 186
     38e:	0e 94 1b 01 	call	0x236	; 0x236 <i2c_start>
     392:	88 23       	and	r24, r24
     394:	29 f0       	breq	.+10     	; 0x3a0 <read_pressure_hpa+0x1c>

            int32_t temp = (int32_t) (int8_t) ph << 16 | (uint16_t) pl << 8 | pxl;
            return ((float) temp / 4096);
        }
    }
    return 1;
     396:	60 e0       	ldi	r22, 0x00	; 0
     398:	70 e0       	ldi	r23, 0x00	; 0
     39a:	80 e8       	ldi	r24, 0x80	; 128
     39c:	9f e3       	ldi	r25, 0x3F	; 63
     39e:	2f c0       	rjmp	.+94     	; 0x3fe <read_pressure_hpa+0x7a>
 Return: float value in hpa
 
************************************************************************/
float read_pressure_hpa(void) {
    if (i2c_start(BAR_SLAVE_ADDRESS << 1) == 0) {
        i2c_write(BAR_PRESS_POUT_XL | (1 << 7));
     3a0:	88 ea       	ldi	r24, 0xA8	; 168
     3a2:	0e 94 6e 01 	call	0x2dc	; 0x2dc <i2c_write>

        if (i2c_rep_start(((uint8_t) BAR_SLAVE_ADDRESS << 1) | 1) == 0) {
     3a6:	8b eb       	ldi	r24, 0xBB	; 187
     3a8:	0e 94 64 01 	call	0x2c8	; 0x2c8 <i2c_rep_start>
     3ac:	81 11       	cpse	r24, r1
     3ae:	f3 cf       	rjmp	.-26     	; 0x396 <read_pressure_hpa+0x12>
            uint8_t pxl = i2c_read(ACK);
     3b0:	0e 94 7f 01 	call	0x2fe	; 0x2fe <i2c_readAck>
     3b4:	d8 2f       	mov	r29, r24
            uint8_t pl = i2c_read(ACK);
     3b6:	0e 94 7f 01 	call	0x2fe	; 0x2fe <i2c_readAck>
     3ba:	c8 2f       	mov	r28, r24
            uint8_t ph = i2c_read(NAK);
     3bc:	0e 94 89 01 	call	0x312	; 0x312 <i2c_readNak>

            int32_t temp = (int32_t) (int8_t) ph << 16 | (uint16_t) pl << 8 | pxl;
     3c0:	99 27       	eor	r25, r25
     3c2:	87 fd       	sbrc	r24, 7
     3c4:	90 95       	com	r25
     3c6:	a9 2f       	mov	r26, r25
     3c8:	b9 2f       	mov	r27, r25
     3ca:	9c 01       	movw	r18, r24
     3cc:	11 27       	eor	r17, r17
     3ce:	00 27       	eor	r16, r16
     3d0:	4c 2f       	mov	r20, r28
     3d2:	50 e0       	ldi	r21, 0x00	; 0
     3d4:	54 2f       	mov	r21, r20
     3d6:	44 27       	eor	r20, r20
     3d8:	60 e0       	ldi	r22, 0x00	; 0
     3da:	70 e0       	ldi	r23, 0x00	; 0
     3dc:	d9 01       	movw	r26, r18
     3de:	c8 01       	movw	r24, r16
     3e0:	84 2b       	or	r24, r20
     3e2:	95 2b       	or	r25, r21
     3e4:	a6 2b       	or	r26, r22
     3e6:	b7 2b       	or	r27, r23
     3e8:	bc 01       	movw	r22, r24
     3ea:	cd 01       	movw	r24, r26
     3ec:	6d 2b       	or	r22, r29
            return ((float) temp / 4096);
     3ee:	0e 94 a9 09 	call	0x1352	; 0x1352 <__floatsisf>
     3f2:	20 e0       	ldi	r18, 0x00	; 0
     3f4:	30 e0       	ldi	r19, 0x00	; 0
     3f6:	40 e8       	ldi	r20, 0x80	; 128
     3f8:	59 e3       	ldi	r21, 0x39	; 57
     3fa:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <__mulsf3>
        }
    }
    return 1;

}/*read_pressure_hpa*/
     3fe:	df 91       	pop	r29
     400:	cf 91       	pop	r28
     402:	1f 91       	pop	r17
     404:	0f 91       	pop	r16
     406:	08 95       	ret

00000408 <init_bar>:
 Initialize the bar,, more info on the way
 
************************************************************************/

void init_bar(void) {
    write_to_reg(BAR_SLAVE_ADDRESS,BAR_CTRL_REG1, 0xB0);
     408:	40 eb       	ldi	r20, 0xB0	; 176
     40a:	60 e2       	ldi	r22, 0x20	; 32
     40c:	8d e5       	ldi	r24, 0x5D	; 93
     40e:	0c 94 4b 04 	jmp	0x896	; 0x896 <write_to_reg>

00000412 <init_gyro>:
 
 *************************************************************************/

void init_gyro(void) {

    write_to_reg(GYRO_SLAVE_ADDRESS, GYRO_LOW_ODR, 0x00);
     412:	40 e0       	ldi	r20, 0x00	; 0
     414:	69 e3       	ldi	r22, 0x39	; 57
     416:	8b e6       	ldi	r24, 0x6B	; 107
     418:	0e 94 4b 04 	call	0x896	; 0x896 <write_to_reg>
    write_to_reg(GYRO_SLAVE_ADDRESS, GYRO_CTRL4, 0x00);
     41c:	40 e0       	ldi	r20, 0x00	; 0
     41e:	63 e2       	ldi	r22, 0x23	; 35
     420:	8b e6       	ldi	r24, 0x6B	; 107
     422:	0e 94 4b 04 	call	0x896	; 0x896 <write_to_reg>
    write_to_reg(GYRO_SLAVE_ADDRESS, GYRO_CTRL1, 0x6F);
     426:	4f e6       	ldi	r20, 0x6F	; 111
     428:	60 e2       	ldi	r22, 0x20	; 32
     42a:	8b e6       	ldi	r24, 0x6B	; 107
     42c:	0c 94 4b 04 	jmp	0x896	; 0x896 <write_to_reg>

00000430 <read_gyro_values>:
 Read the raw values from all three axis. 16-bit resolution
 
 Input: Pointer to data structure, passed by reference.
 
 *************************************************************************/
void read_gyro_values(struct gyro_data *_gyro_data_) {
     430:	df 92       	push	r13
     432:	ef 92       	push	r14
     434:	ff 92       	push	r15
     436:	0f 93       	push	r16
     438:	1f 93       	push	r17
     43a:	cf 93       	push	r28
     43c:	df 93       	push	r29
     43e:	8c 01       	movw	r16, r24

    timer1_init();
     440:	0e 94 90 04 	call	0x920	; 0x920 <timer1_init>
    while (TCNT1 < DELAY_20M);
     444:	80 91 84 00 	lds	r24, 0x0084
     448:	90 91 85 00 	lds	r25, 0x0085
     44c:	8f 33       	cpi	r24, 0x3F	; 63
     44e:	9c 49       	sbci	r25, 0x9C	; 156
     450:	c8 f3       	brcs	.-14     	; 0x444 <read_gyro_values+0x14>
    if (i2c_start(GYRO_SLAVE_ADDRESS << 1) == 0) {
     452:	86 ed       	ldi	r24, 0xD6	; 214
     454:	0e 94 1b 01 	call	0x236	; 0x236 <i2c_start>
     458:	81 11       	cpse	r24, r1
     45a:	29 c0       	rjmp	.+82     	; 0x4ae <read_gyro_values+0x7e>
        i2c_write(GYRO_OUT_X_L | (1 << 7)); //Auto increment registers by writing the MSB high
     45c:	88 ea       	ldi	r24, 0xA8	; 168
     45e:	0e 94 6e 01 	call	0x2dc	; 0x2dc <i2c_write>

        if (i2c_rep_start(((uint8_t) GYRO_SLAVE_ADDRESS << 1) | 1) == 0) {
     462:	87 ed       	ldi	r24, 0xD7	; 215
     464:	0e 94 64 01 	call	0x2c8	; 0x2c8 <i2c_rep_start>
     468:	81 11       	cpse	r24, r1
     46a:	21 c0       	rjmp	.+66     	; 0x4ae <read_gyro_values+0x7e>
            uint8_t xlg = i2c_read(ACK);
     46c:	0e 94 7f 01 	call	0x2fe	; 0x2fe <i2c_readAck>
     470:	f8 2e       	mov	r15, r24
            uint8_t xhg = i2c_read(ACK);
     472:	0e 94 7f 01 	call	0x2fe	; 0x2fe <i2c_readAck>
     476:	d8 2e       	mov	r13, r24

            uint8_t ylg = i2c_read(ACK);
     478:	0e 94 7f 01 	call	0x2fe	; 0x2fe <i2c_readAck>
     47c:	d8 2f       	mov	r29, r24
            uint8_t yhg = i2c_read(ACK);
     47e:	0e 94 7f 01 	call	0x2fe	; 0x2fe <i2c_readAck>
     482:	e8 2e       	mov	r14, r24

            uint8_t zlg = i2c_read(ACK);
     484:	0e 94 7f 01 	call	0x2fe	; 0x2fe <i2c_readAck>
     488:	c8 2f       	mov	r28, r24
            uint8_t zhg = i2c_read(NAK);
     48a:	0e 94 89 01 	call	0x312	; 0x312 <i2c_readNak>

            _gyro_data_->x = (int16_t) (xhg << 8 | xlg);
     48e:	2f 2d       	mov	r18, r15
     490:	30 e0       	ldi	r19, 0x00	; 0
     492:	3d 29       	or	r19, r13
     494:	f8 01       	movw	r30, r16
     496:	31 83       	std	Z+1, r19	; 0x01
     498:	20 83       	st	Z, r18
            _gyro_data_->y = (int16_t) (yhg << 8 | ylg);
     49a:	2d 2f       	mov	r18, r29
     49c:	30 e0       	ldi	r19, 0x00	; 0
     49e:	3e 29       	or	r19, r14
     4a0:	33 83       	std	Z+3, r19	; 0x03
     4a2:	22 83       	std	Z+2, r18	; 0x02
            _gyro_data_->z = (int16_t) (zhg << 8 | zlg);
     4a4:	2c 2f       	mov	r18, r28
     4a6:	30 e0       	ldi	r19, 0x00	; 0
     4a8:	38 2b       	or	r19, r24
     4aa:	35 83       	std	Z+5, r19	; 0x05
     4ac:	24 83       	std	Z+4, r18	; 0x04

        }
    }

}/*read_gyro_values*/
     4ae:	df 91       	pop	r29
     4b0:	cf 91       	pop	r28
     4b2:	1f 91       	pop	r17
     4b4:	0f 91       	pop	r16
     4b6:	ff 90       	pop	r15
     4b8:	ef 90       	pop	r14
     4ba:	df 90       	pop	r13
     4bc:	08 95       	ret

000004be <read_gyro_values_rate_dps>:

void read_gyro_values_rate_dps(struct gyro_data *_gyro_data_, struct gyro_data_dps *gyro_data_dps) {
     4be:	0f 93       	push	r16
     4c0:	1f 93       	push	r17
     4c2:	cf 93       	push	r28
     4c4:	df 93       	push	r29
     4c6:	8c 01       	movw	r16, r24
     4c8:	eb 01       	movw	r28, r22
    gyro_data_dps->x = (float) _gyro_data_->x * G_GAIN;
     4ca:	fc 01       	movw	r30, r24
     4cc:	60 81       	ld	r22, Z
     4ce:	71 81       	ldd	r23, Z+1	; 0x01
     4d0:	88 27       	eor	r24, r24
     4d2:	77 fd       	sbrc	r23, 7
     4d4:	80 95       	com	r24
     4d6:	98 2f       	mov	r25, r24
     4d8:	0e 94 a9 09 	call	0x1352	; 0x1352 <__floatsisf>
     4dc:	29 e2       	ldi	r18, 0x29	; 41
     4de:	3c e5       	ldi	r19, 0x5C	; 92
     4e0:	4f e0       	ldi	r20, 0x0F	; 15
     4e2:	5c e3       	ldi	r21, 0x3C	; 60
     4e4:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <__mulsf3>
     4e8:	68 83       	st	Y, r22
     4ea:	79 83       	std	Y+1, r23	; 0x01
     4ec:	8a 83       	std	Y+2, r24	; 0x02
     4ee:	9b 83       	std	Y+3, r25	; 0x03
    gyro_data_dps->y = (float) _gyro_data_->y * G_GAIN;
     4f0:	f8 01       	movw	r30, r16
     4f2:	62 81       	ldd	r22, Z+2	; 0x02
     4f4:	73 81       	ldd	r23, Z+3	; 0x03
     4f6:	88 27       	eor	r24, r24
     4f8:	77 fd       	sbrc	r23, 7
     4fa:	80 95       	com	r24
     4fc:	98 2f       	mov	r25, r24
     4fe:	0e 94 a9 09 	call	0x1352	; 0x1352 <__floatsisf>
     502:	29 e2       	ldi	r18, 0x29	; 41
     504:	3c e5       	ldi	r19, 0x5C	; 92
     506:	4f e0       	ldi	r20, 0x0F	; 15
     508:	5c e3       	ldi	r21, 0x3C	; 60
     50a:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <__mulsf3>
     50e:	6c 83       	std	Y+4, r22	; 0x04
     510:	7d 83       	std	Y+5, r23	; 0x05
     512:	8e 83       	std	Y+6, r24	; 0x06
     514:	9f 83       	std	Y+7, r25	; 0x07
    gyro_data_dps->z = (float) _gyro_data_->z * G_GAIN;
     516:	f8 01       	movw	r30, r16
     518:	64 81       	ldd	r22, Z+4	; 0x04
     51a:	75 81       	ldd	r23, Z+5	; 0x05
     51c:	88 27       	eor	r24, r24
     51e:	77 fd       	sbrc	r23, 7
     520:	80 95       	com	r24
     522:	98 2f       	mov	r25, r24
     524:	0e 94 a9 09 	call	0x1352	; 0x1352 <__floatsisf>
     528:	29 e2       	ldi	r18, 0x29	; 41
     52a:	3c e5       	ldi	r19, 0x5C	; 92
     52c:	4f e0       	ldi	r20, 0x0F	; 15
     52e:	5c e3       	ldi	r21, 0x3C	; 60
     530:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <__mulsf3>
     534:	68 87       	std	Y+8, r22	; 0x08
     536:	79 87       	std	Y+9, r23	; 0x09
     538:	8a 87       	std	Y+10, r24	; 0x0a
     53a:	9b 87       	std	Y+11, r25	; 0x0b

}/*read_gyro_values_dps*/
     53c:	df 91       	pop	r29
     53e:	cf 91       	pop	r28
     540:	1f 91       	pop	r17
     542:	0f 91       	pop	r16
     544:	08 95       	ret

00000546 <read_gyro_values_angle>:

void read_gyro_values_angle(struct gyro_data_dps *_gyro_data_dps, struct gyro_data_angle *gyro_data_angle) {
     546:	0f 93       	push	r16
     548:	1f 93       	push	r17
     54a:	cf 93       	push	r28
     54c:	df 93       	push	r29
     54e:	8c 01       	movw	r16, r24
     550:	eb 01       	movw	r28, r22
    gyro_data_angle->x = _gyro_data_dps->x * LOOP_PERIOD;
     552:	2a e0       	ldi	r18, 0x0A	; 10
     554:	37 ed       	ldi	r19, 0xD7	; 215
     556:	43 ea       	ldi	r20, 0xA3	; 163
     558:	5c e3       	ldi	r21, 0x3C	; 60
     55a:	fc 01       	movw	r30, r24
     55c:	60 81       	ld	r22, Z
     55e:	71 81       	ldd	r23, Z+1	; 0x01
     560:	82 81       	ldd	r24, Z+2	; 0x02
     562:	93 81       	ldd	r25, Z+3	; 0x03
     564:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <__mulsf3>
     568:	68 83       	st	Y, r22
     56a:	79 83       	std	Y+1, r23	; 0x01
     56c:	8a 83       	std	Y+2, r24	; 0x02
     56e:	9b 83       	std	Y+3, r25	; 0x03
    gyro_data_angle->y = _gyro_data_dps->y * LOOP_PERIOD;
     570:	2a e0       	ldi	r18, 0x0A	; 10
     572:	37 ed       	ldi	r19, 0xD7	; 215
     574:	43 ea       	ldi	r20, 0xA3	; 163
     576:	5c e3       	ldi	r21, 0x3C	; 60
     578:	f8 01       	movw	r30, r16
     57a:	64 81       	ldd	r22, Z+4	; 0x04
     57c:	75 81       	ldd	r23, Z+5	; 0x05
     57e:	86 81       	ldd	r24, Z+6	; 0x06
     580:	97 81       	ldd	r25, Z+7	; 0x07
     582:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <__mulsf3>
     586:	6c 83       	std	Y+4, r22	; 0x04
     588:	7d 83       	std	Y+5, r23	; 0x05
     58a:	8e 83       	std	Y+6, r24	; 0x06
     58c:	9f 83       	std	Y+7, r25	; 0x07
    gyro_data_angle->z = _gyro_data_dps->z * LOOP_PERIOD;
     58e:	2a e0       	ldi	r18, 0x0A	; 10
     590:	37 ed       	ldi	r19, 0xD7	; 215
     592:	43 ea       	ldi	r20, 0xA3	; 163
     594:	5c e3       	ldi	r21, 0x3C	; 60
     596:	f8 01       	movw	r30, r16
     598:	60 85       	ldd	r22, Z+8	; 0x08
     59a:	71 85       	ldd	r23, Z+9	; 0x09
     59c:	82 85       	ldd	r24, Z+10	; 0x0a
     59e:	93 85       	ldd	r25, Z+11	; 0x0b
     5a0:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <__mulsf3>
     5a4:	68 87       	std	Y+8, r22	; 0x08
     5a6:	79 87       	std	Y+9, r23	; 0x09
     5a8:	8a 87       	std	Y+10, r24	; 0x0a
     5aa:	9b 87       	std	Y+11, r25	; 0x0b

}/*read_gyro_values_angle*/
     5ac:	df 91       	pop	r29
     5ae:	cf 91       	pop	r28
     5b0:	1f 91       	pop	r17
     5b2:	0f 91       	pop	r16
     5b4:	08 95       	ret

000005b6 <f_base>:
 * Input: struct poniters specific to gyro
 * Macro is defined in header for simpler usage [read_all_values_gyro(...)]
 
 *************************************************************************/

void f_base(struct gyro_data *_gyro_data_, struct gyro_data_dps *_gyro_data_dps, struct gyro_data_angle *_gyro_data_angle) {
     5b6:	ef 92       	push	r14
     5b8:	ff 92       	push	r15
     5ba:	0f 93       	push	r16
     5bc:	1f 93       	push	r17
     5be:	cf 93       	push	r28
     5c0:	df 93       	push	r29

    if (_gyro_data_) {
     5c2:	00 97       	sbiw	r24, 0x00	; 0
     5c4:	d9 f0       	breq	.+54     	; 0x5fc <f_base+0x46>
     5c6:	7a 01       	movw	r14, r20
     5c8:	eb 01       	movw	r28, r22
     5ca:	8c 01       	movw	r16, r24
        read_gyro_values(_gyro_data_);
     5cc:	0e 94 18 02 	call	0x430	; 0x430 <read_gyro_values>

        if (_gyro_data_ && _gyro_data_angle && _gyro_data_dps) {
     5d0:	e1 14       	cp	r14, r1
     5d2:	f1 04       	cpc	r15, r1
     5d4:	39 f0       	breq	.+14     	; 0x5e4 <f_base+0x2e>
     5d6:	20 97       	sbiw	r28, 0x00	; 0
     5d8:	89 f0       	breq	.+34     	; 0x5fc <f_base+0x46>

            read_gyro_values_angle(_gyro_data_dps, _gyro_data_angle);
     5da:	b7 01       	movw	r22, r14
     5dc:	ce 01       	movw	r24, r28
     5de:	0e 94 a3 02 	call	0x546	; 0x546 <read_gyro_values_angle>
     5e2:	02 c0       	rjmp	.+4      	; 0x5e8 <f_base+0x32>
        }
        if (_gyro_data_ && _gyro_data_dps) {
     5e4:	20 97       	sbiw	r28, 0x00	; 0
     5e6:	51 f0       	breq	.+20     	; 0x5fc <f_base+0x46>

            read_gyro_values_rate_dps(_gyro_data_, _gyro_data_dps);
     5e8:	be 01       	movw	r22, r28
     5ea:	c8 01       	movw	r24, r16

        }

    }

}/*f_base*/
     5ec:	df 91       	pop	r29
     5ee:	cf 91       	pop	r28
     5f0:	1f 91       	pop	r17
     5f2:	0f 91       	pop	r16
     5f4:	ff 90       	pop	r15
     5f6:	ef 90       	pop	r14

            read_gyro_values_angle(_gyro_data_dps, _gyro_data_angle);
        }
        if (_gyro_data_ && _gyro_data_dps) {

            read_gyro_values_rate_dps(_gyro_data_, _gyro_data_dps);
     5f8:	0c 94 5f 02 	jmp	0x4be	; 0x4be <read_gyro_values_rate_dps>

        }

    }

}/*f_base*/
     5fc:	df 91       	pop	r29
     5fe:	cf 91       	pop	r28
     600:	1f 91       	pop	r17
     602:	0f 91       	pop	r16
     604:	ff 90       	pop	r15
     606:	ef 90       	pop	r14
     608:	08 95       	ret

0000060a <var_f>:
 * specified in f_args struct in header
 * Input: struct f_args
 
 *************************************************************************/

void var_f(f_args in) {
     60a:	cf 93       	push	r28
     60c:	df 93       	push	r29
     60e:	00 d0       	rcall	.+0      	; 0x610 <var_f+0x6>
     610:	00 d0       	rcall	.+0      	; 0x612 <var_f+0x8>
     612:	00 d0       	rcall	.+0      	; 0x614 <var_f+0xa>
     614:	cd b7       	in	r28, 0x3d	; 61
     616:	de b7       	in	r29, 0x3e	; 62
     618:	49 83       	std	Y+1, r20	; 0x01
     61a:	5a 83       	std	Y+2, r21	; 0x02
     61c:	6b 83       	std	Y+3, r22	; 0x03
     61e:	7c 83       	std	Y+4, r23	; 0x04
     620:	8d 83       	std	Y+5, r24	; 0x05
     622:	9e 83       	std	Y+6, r25	; 0x06
    in._gyro_data_ = in._gyro_data_ ? in._gyro_data_ : in._gyro_data_;
    in._gyro_data_dps = in._gyro_data_dps ? in._gyro_data_dps : in._gyro_data_dps;
    in._gyro_data_angle = in._gyro_data_angle ? in._gyro_data_angle : in._gyro_data_angle;

    f_base(in._gyro_data_, in._gyro_data_dps, in._gyro_data_angle);
     624:	4d 81       	ldd	r20, Y+5	; 0x05
     626:	5e 81       	ldd	r21, Y+6	; 0x06
     628:	6b 81       	ldd	r22, Y+3	; 0x03
     62a:	7c 81       	ldd	r23, Y+4	; 0x04
     62c:	89 81       	ldd	r24, Y+1	; 0x01
     62e:	9a 81       	ldd	r25, Y+2	; 0x02
}/*var_f*/
     630:	26 96       	adiw	r28, 0x06	; 6
     632:	0f b6       	in	r0, 0x3f	; 63
     634:	f8 94       	cli
     636:	de bf       	out	0x3e, r29	; 62
     638:	0f be       	out	0x3f, r0	; 63
     63a:	cd bf       	out	0x3d, r28	; 61
     63c:	df 91       	pop	r29
     63e:	cf 91       	pop	r28
void var_f(f_args in) {
    in._gyro_data_ = in._gyro_data_ ? in._gyro_data_ : in._gyro_data_;
    in._gyro_data_dps = in._gyro_data_dps ? in._gyro_data_dps : in._gyro_data_dps;
    in._gyro_data_angle = in._gyro_data_angle ? in._gyro_data_angle : in._gyro_data_angle;

    f_base(in._gyro_data_, in._gyro_data_dps, in._gyro_data_angle);
     640:	0c 94 db 02 	jmp	0x5b6	; 0x5b6 <f_base>

00000644 <init_acc>:
 * (+/- 2 g full scale)
 * (50 Hz ODR); AZEN = AYEN = AXEN = 1 (all axes enabled)
 
 *************************************************************************/
void init_acc(void) {
    write_to_reg(ACC_MAG_SLAVE_ADDRESS, ACC_MAG_CTRL2, 0x00);
     644:	40 e0       	ldi	r20, 0x00	; 0
     646:	61 e2       	ldi	r22, 0x21	; 33
     648:	8d e1       	ldi	r24, 0x1D	; 29
     64a:	0e 94 4b 04 	call	0x896	; 0x896 <write_to_reg>
    write_to_reg(ACC_MAG_SLAVE_ADDRESS, ACC_MAG_CTRL1, 0x57);
     64e:	47 e5       	ldi	r20, 0x57	; 87
     650:	60 e2       	ldi	r22, 0x20	; 32
     652:	8d e1       	ldi	r24, 0x1D	; 29
     654:	0c 94 4b 04 	jmp	0x896	; 0x896 <write_to_reg>

00000658 <init_mag>:
 * (low power mode off); MD = 00 (continuous-conversion mode)
 
 *************************************************************************/

void init_mag(void) {
    write_to_reg(ACC_MAG_SLAVE_ADDRESS, ACC_MAG_CTRL5, 0x64);
     658:	44 e6       	ldi	r20, 0x64	; 100
     65a:	64 e2       	ldi	r22, 0x24	; 36
     65c:	8d e1       	ldi	r24, 0x1D	; 29
     65e:	0e 94 4b 04 	call	0x896	; 0x896 <write_to_reg>
    write_to_reg(ACC_MAG_SLAVE_ADDRESS, ACC_MAG_CTRL6, 0x20);
     662:	40 e2       	ldi	r20, 0x20	; 32
     664:	65 e2       	ldi	r22, 0x25	; 37
     666:	8d e1       	ldi	r24, 0x1D	; 29
     668:	0e 94 4b 04 	call	0x896	; 0x896 <write_to_reg>
    write_to_reg(ACC_MAG_SLAVE_ADDRESS, ACC_MAG_CTRL7, 0x00);
     66c:	40 e0       	ldi	r20, 0x00	; 0
     66e:	66 e2       	ldi	r22, 0x26	; 38
     670:	8d e1       	ldi	r24, 0x1D	; 29
     672:	0c 94 4b 04 	jmp	0x896	; 0x896 <write_to_reg>

00000676 <read_acc_raw>:
/*************************************************************************
 * read_acc_raw values
 
 *************************************************************************/

void read_acc_raw(struct acc_val_raw *_acc_raw_) {
     676:	df 92       	push	r13
     678:	ef 92       	push	r14
     67a:	ff 92       	push	r15
     67c:	0f 93       	push	r16
     67e:	1f 93       	push	r17
     680:	cf 93       	push	r28
     682:	df 93       	push	r29
     684:	8c 01       	movw	r16, r24
    if (i2c_start(ACC_MAG_SLAVE_ADDRESS << 1) == 0) {
     686:	8a e3       	ldi	r24, 0x3A	; 58
     688:	0e 94 1b 01 	call	0x236	; 0x236 <i2c_start>
     68c:	81 11       	cpse	r24, r1
     68e:	29 c0       	rjmp	.+82     	; 0x6e2 <read_acc_raw+0x6c>
        i2c_write(ACC_MAG_OUT_X_L_A | (1 << 7)); //Auto increment registers by writing the MSB high
     690:	88 ea       	ldi	r24, 0xA8	; 168
     692:	0e 94 6e 01 	call	0x2dc	; 0x2dc <i2c_write>

        if (i2c_rep_start(((uint8_t) ACC_MAG_SLAVE_ADDRESS << 1) | 1) == 0) {
     696:	8b e3       	ldi	r24, 0x3B	; 59
     698:	0e 94 64 01 	call	0x2c8	; 0x2c8 <i2c_rep_start>
     69c:	81 11       	cpse	r24, r1
     69e:	21 c0       	rjmp	.+66     	; 0x6e2 <read_acc_raw+0x6c>
            uint8_t xlg = i2c_read(ACK);
     6a0:	0e 94 7f 01 	call	0x2fe	; 0x2fe <i2c_readAck>
     6a4:	f8 2e       	mov	r15, r24
            uint8_t xhg = i2c_read(ACK);
     6a6:	0e 94 7f 01 	call	0x2fe	; 0x2fe <i2c_readAck>
     6aa:	d8 2e       	mov	r13, r24

            uint8_t ylg = i2c_read(ACK);
     6ac:	0e 94 7f 01 	call	0x2fe	; 0x2fe <i2c_readAck>
     6b0:	d8 2f       	mov	r29, r24
            uint8_t yhg = i2c_read(ACK);
     6b2:	0e 94 7f 01 	call	0x2fe	; 0x2fe <i2c_readAck>
     6b6:	e8 2e       	mov	r14, r24

            uint8_t zlg = i2c_read(ACK);
     6b8:	0e 94 7f 01 	call	0x2fe	; 0x2fe <i2c_readAck>
     6bc:	c8 2f       	mov	r28, r24
            uint8_t zhg = i2c_read(NAK);
     6be:	0e 94 89 01 	call	0x312	; 0x312 <i2c_readNak>

            _acc_raw_->x = (int16_t) (xhg << 8 | xlg);
     6c2:	2f 2d       	mov	r18, r15
     6c4:	30 e0       	ldi	r19, 0x00	; 0
     6c6:	3d 29       	or	r19, r13
     6c8:	f8 01       	movw	r30, r16
     6ca:	31 83       	std	Z+1, r19	; 0x01
     6cc:	20 83       	st	Z, r18
            _acc_raw_->y = (int16_t) (yhg << 8 | ylg);
     6ce:	2d 2f       	mov	r18, r29
     6d0:	30 e0       	ldi	r19, 0x00	; 0
     6d2:	3e 29       	or	r19, r14
     6d4:	33 83       	std	Z+3, r19	; 0x03
     6d6:	22 83       	std	Z+2, r18	; 0x02
            _acc_raw_->z = (int16_t) (zhg << 8 | zlg);
     6d8:	2c 2f       	mov	r18, r28
     6da:	30 e0       	ldi	r19, 0x00	; 0
     6dc:	38 2b       	or	r19, r24
     6de:	35 83       	std	Z+5, r19	; 0x05
     6e0:	24 83       	std	Z+4, r18	; 0x04

        }
    }

}/*read_acc_raw*/
     6e2:	df 91       	pop	r29
     6e4:	cf 91       	pop	r28
     6e6:	1f 91       	pop	r17
     6e8:	0f 91       	pop	r16
     6ea:	ff 90       	pop	r15
     6ec:	ef 90       	pop	r14
     6ee:	df 90       	pop	r13
     6f0:	08 95       	ret

000006f2 <read_acc_angel>:
/*************************************************************************
 * read_acc_angles values
 * 
 
 *************************************************************************/
void read_acc_angel(struct acc_val_raw *_acc_raw_, struct acc_val_angle *_acc_angle) {
     6f2:	8f 92       	push	r8
     6f4:	9f 92       	push	r9
     6f6:	af 92       	push	r10
     6f8:	bf 92       	push	r11
     6fa:	cf 92       	push	r12
     6fc:	df 92       	push	r13
     6fe:	ef 92       	push	r14
     700:	ff 92       	push	r15
     702:	0f 93       	push	r16
     704:	1f 93       	push	r17
     706:	cf 93       	push	r28
     708:	df 93       	push	r29
     70a:	8c 01       	movw	r16, r24
     70c:	eb 01       	movw	r28, r22
    _acc_angle->x = (float) (atan2(_acc_raw_->y, _acc_raw_->z) + M_PI) * RAD_TO_DEG;
     70e:	fc 01       	movw	r30, r24
     710:	64 81       	ldd	r22, Z+4	; 0x04
     712:	75 81       	ldd	r23, Z+5	; 0x05
     714:	88 27       	eor	r24, r24
     716:	77 fd       	sbrc	r23, 7
     718:	80 95       	com	r24
     71a:	98 2f       	mov	r25, r24
     71c:	0e 94 a9 09 	call	0x1352	; 0x1352 <__floatsisf>
     720:	6b 01       	movw	r12, r22
     722:	7c 01       	movw	r14, r24
     724:	f8 01       	movw	r30, r16
     726:	62 81       	ldd	r22, Z+2	; 0x02
     728:	73 81       	ldd	r23, Z+3	; 0x03
     72a:	88 27       	eor	r24, r24
     72c:	77 fd       	sbrc	r23, 7
     72e:	80 95       	com	r24
     730:	98 2f       	mov	r25, r24
     732:	0e 94 a9 09 	call	0x1352	; 0x1352 <__floatsisf>
     736:	a7 01       	movw	r20, r14
     738:	96 01       	movw	r18, r12
     73a:	0e 94 bb 08 	call	0x1176	; 0x1176 <atan2>
     73e:	4b 01       	movw	r8, r22
     740:	5c 01       	movw	r10, r24
    _acc_angle->y = (float) (atan2(_acc_raw_->z, _acc_raw_->x) + M_PI) * RAD_TO_DEG;
     742:	f8 01       	movw	r30, r16
     744:	60 81       	ld	r22, Z
     746:	71 81       	ldd	r23, Z+1	; 0x01
     748:	88 27       	eor	r24, r24
     74a:	77 fd       	sbrc	r23, 7
     74c:	80 95       	com	r24
     74e:	98 2f       	mov	r25, r24
     750:	0e 94 a9 09 	call	0x1352	; 0x1352 <__floatsisf>
     754:	9b 01       	movw	r18, r22
     756:	ac 01       	movw	r20, r24
     758:	c7 01       	movw	r24, r14
     75a:	b6 01       	movw	r22, r12
     75c:	0e 94 bb 08 	call	0x1176	; 0x1176 <atan2>
     760:	2b ed       	ldi	r18, 0xDB	; 219
     762:	3f e0       	ldi	r19, 0x0F	; 15
     764:	49 e4       	ldi	r20, 0x49	; 73
     766:	50 e4       	ldi	r21, 0x40	; 64
     768:	0e 94 48 08 	call	0x1090	; 0x1090 <__addsf3>
     76c:	21 ee       	ldi	r18, 0xE1	; 225
     76e:	3e e2       	ldi	r19, 0x2E	; 46
     770:	45 e6       	ldi	r20, 0x65	; 101
     772:	52 e4       	ldi	r21, 0x42	; 66
     774:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <__mulsf3>
     778:	0e 94 76 09 	call	0x12ec	; 0x12ec <__fixsfsi>
     77c:	6b 01       	movw	r12, r22
     77e:	7c 01       	movw	r14, r24
     780:	8b 01       	movw	r16, r22
     782:	7b 83       	std	Y+3, r23	; 0x03
     784:	6a 83       	std	Y+2, r22	; 0x02
 * read_acc_angles values
 * 
 
 *************************************************************************/
void read_acc_angel(struct acc_val_raw *_acc_raw_, struct acc_val_angle *_acc_angle) {
    _acc_angle->x = (float) (atan2(_acc_raw_->y, _acc_raw_->z) + M_PI) * RAD_TO_DEG;
     786:	2b ed       	ldi	r18, 0xDB	; 219
     788:	3f e0       	ldi	r19, 0x0F	; 15
     78a:	49 e4       	ldi	r20, 0x49	; 73
     78c:	50 e4       	ldi	r21, 0x40	; 64
     78e:	c5 01       	movw	r24, r10
     790:	b4 01       	movw	r22, r8
     792:	0e 94 48 08 	call	0x1090	; 0x1090 <__addsf3>
     796:	21 ee       	ldi	r18, 0xE1	; 225
     798:	3e e2       	ldi	r19, 0x2E	; 46
     79a:	45 e6       	ldi	r20, 0x65	; 101
     79c:	52 e4       	ldi	r21, 0x42	; 66
     79e:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <__mulsf3>
     7a2:	0e 94 76 09 	call	0x12ec	; 0x12ec <__fixsfsi>
    _acc_angle->y = (float) (atan2(_acc_raw_->z, _acc_raw_->x) + M_PI) * RAD_TO_DEG;
    
    _acc_angle->x -= (float) 180.0;
     7a6:	88 27       	eor	r24, r24
     7a8:	77 fd       	sbrc	r23, 7
     7aa:	80 95       	com	r24
     7ac:	98 2f       	mov	r25, r24
     7ae:	0e 94 a9 09 	call	0x1352	; 0x1352 <__floatsisf>
     7b2:	20 e0       	ldi	r18, 0x00	; 0
     7b4:	30 e0       	ldi	r19, 0x00	; 0
     7b6:	44 e3       	ldi	r20, 0x34	; 52
     7b8:	53 e4       	ldi	r21, 0x43	; 67
     7ba:	0e 94 47 08 	call	0x108e	; 0x108e <__subsf3>
     7be:	0e 94 76 09 	call	0x12ec	; 0x12ec <__fixsfsi>
     7c2:	79 83       	std	Y+1, r23	; 0x01
     7c4:	68 83       	st	Y, r22
     7c6:	b6 01       	movw	r22, r12
     7c8:	88 27       	eor	r24, r24
     7ca:	77 fd       	sbrc	r23, 7
     7cc:	80 95       	com	r24
     7ce:	98 2f       	mov	r25, r24
    if (_acc_angle->y > 90) {
     7d0:	0b 35       	cpi	r16, 0x5B	; 91
     7d2:	11 05       	cpc	r17, r1
     7d4:	4c f0       	brlt	.+18     	; 0x7e8 <read_acc_angel+0xf6>
        _acc_angle->y -= (float) 270;
     7d6:	0e 94 a9 09 	call	0x1352	; 0x1352 <__floatsisf>
     7da:	20 e0       	ldi	r18, 0x00	; 0
     7dc:	30 e0       	ldi	r19, 0x00	; 0
     7de:	47 e8       	ldi	r20, 0x87	; 135
     7e0:	53 e4       	ldi	r21, 0x43	; 67
     7e2:	0e 94 47 08 	call	0x108e	; 0x108e <__subsf3>
     7e6:	08 c0       	rjmp	.+16     	; 0x7f8 <read_acc_angel+0x106>
    } else {
        _acc_angle->y += (float) 90;
     7e8:	0e 94 a9 09 	call	0x1352	; 0x1352 <__floatsisf>
     7ec:	20 e0       	ldi	r18, 0x00	; 0
     7ee:	30 e0       	ldi	r19, 0x00	; 0
     7f0:	44 eb       	ldi	r20, 0xB4	; 180
     7f2:	52 e4       	ldi	r21, 0x42	; 66
     7f4:	0e 94 48 08 	call	0x1090	; 0x1090 <__addsf3>
     7f8:	0e 94 76 09 	call	0x12ec	; 0x12ec <__fixsfsi>
     7fc:	7b 83       	std	Y+3, r23	; 0x03
     7fe:	6a 83       	std	Y+2, r22	; 0x02
    }


}/*read_acc_angle*/
     800:	df 91       	pop	r29
     802:	cf 91       	pop	r28
     804:	1f 91       	pop	r17
     806:	0f 91       	pop	r16
     808:	ff 90       	pop	r15
     80a:	ef 90       	pop	r14
     80c:	df 90       	pop	r13
     80e:	cf 90       	pop	r12
     810:	bf 90       	pop	r11
     812:	af 90       	pop	r10
     814:	9f 90       	pop	r9
     816:	8f 90       	pop	r8
     818:	08 95       	ret

0000081a <read_mag_raw>:
 * read_mag_raw values
 * 
 
 *************************************************************************/

void read_mag_raw(struct mag_val_raw *_mag_raw_) {
     81a:	df 92       	push	r13
     81c:	ef 92       	push	r14
     81e:	ff 92       	push	r15
     820:	0f 93       	push	r16
     822:	1f 93       	push	r17
     824:	cf 93       	push	r28
     826:	df 93       	push	r29
     828:	8c 01       	movw	r16, r24
    if (i2c_start(ACC_MAG_SLAVE_ADDRESS << 1) == 0) {
     82a:	8a e3       	ldi	r24, 0x3A	; 58
     82c:	0e 94 1b 01 	call	0x236	; 0x236 <i2c_start>
     830:	81 11       	cpse	r24, r1
     832:	29 c0       	rjmp	.+82     	; 0x886 <read_mag_raw+0x6c>
        i2c_write(ACC_MAG_OUT_X_L_M | (1 << 7)); //Auto increment registers by writing the MSB high
     834:	88 e8       	ldi	r24, 0x88	; 136
     836:	0e 94 6e 01 	call	0x2dc	; 0x2dc <i2c_write>

        if (i2c_rep_start(((uint8_t) ACC_MAG_SLAVE_ADDRESS << 1) | 1) == 0) {
     83a:	8b e3       	ldi	r24, 0x3B	; 59
     83c:	0e 94 64 01 	call	0x2c8	; 0x2c8 <i2c_rep_start>
     840:	81 11       	cpse	r24, r1
     842:	21 c0       	rjmp	.+66     	; 0x886 <read_mag_raw+0x6c>
            uint8_t xlm = i2c_read(ACK);
     844:	0e 94 7f 01 	call	0x2fe	; 0x2fe <i2c_readAck>
     848:	f8 2e       	mov	r15, r24
            uint8_t xhm = i2c_read(ACK);
     84a:	0e 94 7f 01 	call	0x2fe	; 0x2fe <i2c_readAck>
     84e:	d8 2e       	mov	r13, r24

            uint8_t ylm = i2c_read(ACK);
     850:	0e 94 7f 01 	call	0x2fe	; 0x2fe <i2c_readAck>
     854:	d8 2f       	mov	r29, r24
            uint8_t yhm = i2c_read(ACK);
     856:	0e 94 7f 01 	call	0x2fe	; 0x2fe <i2c_readAck>
     85a:	e8 2e       	mov	r14, r24

            uint8_t zlm = i2c_read(ACK);
     85c:	0e 94 7f 01 	call	0x2fe	; 0x2fe <i2c_readAck>
     860:	c8 2f       	mov	r28, r24
            uint8_t zhm = i2c_read(NAK);
     862:	0e 94 89 01 	call	0x312	; 0x312 <i2c_readNak>

            _mag_raw_->x = (int16_t) (xhm << 8 | xlm);
     866:	2f 2d       	mov	r18, r15
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	3d 29       	or	r19, r13
     86c:	f8 01       	movw	r30, r16
     86e:	31 83       	std	Z+1, r19	; 0x01
     870:	20 83       	st	Z, r18
            _mag_raw_->y = (int16_t) (yhm << 8 | ylm);
     872:	2d 2f       	mov	r18, r29
     874:	30 e0       	ldi	r19, 0x00	; 0
     876:	3e 29       	or	r19, r14
     878:	33 83       	std	Z+3, r19	; 0x03
     87a:	22 83       	std	Z+2, r18	; 0x02
            _mag_raw_->z = (int16_t) (zhm << 8 | zlm);
     87c:	2c 2f       	mov	r18, r28
     87e:	30 e0       	ldi	r19, 0x00	; 0
     880:	38 2b       	or	r19, r24
     882:	35 83       	std	Z+5, r19	; 0x05
     884:	24 83       	std	Z+4, r18	; 0x04

        }
    }

     886:	df 91       	pop	r29
     888:	cf 91       	pop	r28
     88a:	1f 91       	pop	r17
     88c:	0f 91       	pop	r16
     88e:	ff 90       	pop	r15
     890:	ef 90       	pop	r14
     892:	df 90       	pop	r13
     894:	08 95       	ret

00000896 <write_to_reg>:
 Return: 0 if success
         1 if fail
 
*************************************************************************/

uint8_t write_to_reg(unsigned char address_slave,unsigned char reg_slave, uint8_t data){
     896:	0f 93       	push	r16
     898:	1f 93       	push	r17
     89a:	cf 93       	push	r28
     89c:	df 93       	push	r29
     89e:	1f 92       	push	r1
     8a0:	cd b7       	in	r28, 0x3d	; 61
     8a2:	de b7       	in	r29, 0x3e	; 62
     8a4:	04 2f       	mov	r16, r20
     if (i2c_start(address_slave << 1) == 0) {
     8a6:	88 0f       	add	r24, r24
     8a8:	69 83       	std	Y+1, r22	; 0x01
     8aa:	0e 94 1b 01 	call	0x236	; 0x236 <i2c_start>
     8ae:	18 2f       	mov	r17, r24
     8b0:	69 81       	ldd	r22, Y+1	; 0x01
     8b2:	81 11       	cpse	r24, r1
     8b4:	09 c0       	rjmp	.+18     	; 0x8c8 <write_to_reg+0x32>
        i2c_write(reg_slave);
     8b6:	86 2f       	mov	r24, r22
     8b8:	0e 94 6e 01 	call	0x2dc	; 0x2dc <i2c_write>
        i2c_write(data);
     8bc:	80 2f       	mov	r24, r16
     8be:	0e 94 6e 01 	call	0x2dc	; 0x2dc <i2c_write>
        i2c_stop();
     8c2:	0e 94 66 01 	call	0x2cc	; 0x2cc <i2c_stop>
        return 0;
     8c6:	01 c0       	rjmp	.+2      	; 0x8ca <write_to_reg+0x34>
    } else {
        return 1;
     8c8:	11 e0       	ldi	r17, 0x01	; 1
    }
}/*write_to_reg*/
     8ca:	81 2f       	mov	r24, r17
     8cc:	0f 90       	pop	r0
     8ce:	df 91       	pop	r29
     8d0:	cf 91       	pop	r28
     8d2:	1f 91       	pop	r17
     8d4:	0f 91       	pop	r16
     8d6:	08 95       	ret

000008d8 <read_from_reg>:
 
 Return: Byte if success
         1 if fail
 
*************************************************************************/
uint8_t read_from_reg(unsigned char address_slave,unsigned reg_slave){
     8d8:	1f 93       	push	r17
     8da:	cf 93       	push	r28
     8dc:	df 93       	push	r29
     8de:	1f 92       	push	r1
     8e0:	cd b7       	in	r28, 0x3d	; 61
     8e2:	de b7       	in	r29, 0x3e	; 62
     8e4:	18 2f       	mov	r17, r24
      if (i2c_start(address_slave << 1) == 0) {
     8e6:	88 0f       	add	r24, r24
     8e8:	69 83       	std	Y+1, r22	; 0x01
     8ea:	0e 94 1b 01 	call	0x236	; 0x236 <i2c_start>
     8ee:	69 81       	ldd	r22, Y+1	; 0x01
     8f0:	81 11       	cpse	r24, r1
     8f2:	10 c0       	rjmp	.+32     	; 0x914 <__stack+0x15>
        i2c_write(reg_slave);
     8f4:	86 2f       	mov	r24, r22
     8f6:	0e 94 6e 01 	call	0x2dc	; 0x2dc <i2c_write>
        if (i2c_rep_start(((uint8_t) address_slave << 1) | 1) == 0) {
     8fa:	81 2f       	mov	r24, r17
     8fc:	88 0f       	add	r24, r24
     8fe:	81 60       	ori	r24, 0x01	; 1
     900:	0e 94 64 01 	call	0x2c8	; 0x2c8 <i2c_rep_start>
     904:	81 11       	cpse	r24, r1
     906:	06 c0       	rjmp	.+12     	; 0x914 <__stack+0x15>
            return i2c_read(NAK);
        }
    }
    return 1;
}/*read_from_reg*/
     908:	0f 90       	pop	r0
     90a:	df 91       	pop	r29
     90c:	cf 91       	pop	r28
     90e:	1f 91       	pop	r17
*************************************************************************/
uint8_t read_from_reg(unsigned char address_slave,unsigned reg_slave){
      if (i2c_start(address_slave << 1) == 0) {
        i2c_write(reg_slave);
        if (i2c_rep_start(((uint8_t) address_slave << 1) | 1) == 0) {
            return i2c_read(NAK);
     910:	0c 94 89 01 	jmp	0x312	; 0x312 <i2c_readNak>
        }
    }
    return 1;
}/*read_from_reg*/
     914:	81 e0       	ldi	r24, 0x01	; 1
     916:	0f 90       	pop	r0
     918:	df 91       	pop	r29
     91a:	cf 91       	pop	r28
     91c:	1f 91       	pop	r17
     91e:	08 95       	ret

00000920 <timer1_init>:
     920:	e1 e8       	ldi	r30, 0x81	; 129
     922:	f0 e0       	ldi	r31, 0x00	; 0
     924:	80 81       	ld	r24, Z
     926:	82 60       	ori	r24, 0x02	; 2
     928:	80 83       	st	Z, r24
     92a:	10 92 85 00 	sts	0x0085, r1
     92e:	10 92 84 00 	sts	0x0084, r1
     932:	08 95       	ret

00000934 <main>:
 *Main
 * 
 *  
 */

int main(void) {
     934:	cf 93       	push	r28
     936:	df 93       	push	r29
     938:	cd b7       	in	r28, 0x3d	; 61
     93a:	de b7       	in	r29, 0x3e	; 62
     93c:	2e 97       	sbiw	r28, 0x0e	; 14
     93e:	0f b6       	in	r0, 0x3f	; 63
     940:	f8 94       	cli
     942:	de bf       	out	0x3e, r29	; 62
     944:	0f be       	out	0x3f, r0	; 63
     946:	cd bf       	out	0x3d, r28	; 61
    USART0Init();
     948:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <USART0Init>
    TWIInit();
     94c:	0e 94 12 01 	call	0x224	; 0x224 <TWIInit>
    
    
    

    //Set stream pointer
    FILE usart0_str = FDEV_SETUP_STREAM(USART0SendByte, USART0ReceiveByte, _FDEV_SETUP_RW);
     950:	fe 01       	movw	r30, r28
     952:	31 96       	adiw	r30, 0x01	; 1
     954:	8e e0       	ldi	r24, 0x0E	; 14
     956:	df 01       	movw	r26, r30
     958:	1d 92       	st	X+, r1
     95a:	8a 95       	dec	r24
     95c:	e9 f7       	brne	.-6      	; 0x958 <main+0x24>
     95e:	83 e0       	ldi	r24, 0x03	; 3
     960:	8c 83       	std	Y+4, r24	; 0x04
     962:	80 ef       	ldi	r24, 0xF0	; 240
     964:	90 e0       	ldi	r25, 0x00	; 0
     966:	9a 87       	std	Y+10, r25	; 0x0a
     968:	89 87       	std	Y+9, r24	; 0x09
     96a:	83 e0       	ldi	r24, 0x03	; 3
     96c:	91 e0       	ldi	r25, 0x01	; 1
     96e:	9c 87       	std	Y+12, r25	; 0x0c
     970:	8b 87       	std	Y+11, r24	; 0x0b
    //assign our stream to standart I/O streams, cause why re-invent the wheel? Great for debuging :-) Don't forget to exclude later on.!!!!!!!!!!!!!!!
    stdin = stdout = &usart0_str;
     972:	f0 93 03 01 	sts	0x0103, r31
     976:	e0 93 02 01 	sts	0x0102, r30
     97a:	f0 93 01 01 	sts	0x0101, r31
     97e:	e0 93 00 01 	sts	0x0100, r30
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     982:	bf ef       	ldi	r27, 0xFF	; 255
     984:	29 e6       	ldi	r18, 0x69	; 105
     986:	88 e1       	ldi	r24, 0x18	; 24
     988:	b1 50       	subi	r27, 0x01	; 1
     98a:	20 40       	sbci	r18, 0x00	; 0
     98c:	80 40       	sbci	r24, 0x00	; 0
     98e:	e1 f7       	brne	.-8      	; 0x988 <main+0x54>
     990:	00 c0       	rjmp	.+0      	; 0x992 <main+0x5e>
     992:	00 00       	nop
     994:	f6 cf       	rjmp	.-20     	; 0x982 <main+0x4e>

00000996 <vfprintf>:
     996:	a3 e1       	ldi	r26, 0x13	; 19
     998:	b0 e0       	ldi	r27, 0x00	; 0
     99a:	e1 ed       	ldi	r30, 0xD1	; 209
     99c:	f4 e0       	ldi	r31, 0x04	; 4
     99e:	0c 94 c7 0a 	jmp	0x158e	; 0x158e <__prologue_saves__>
     9a2:	6c 01       	movw	r12, r24
     9a4:	4b 01       	movw	r8, r22
     9a6:	2a 01       	movw	r4, r20
     9a8:	fc 01       	movw	r30, r24
     9aa:	17 82       	std	Z+7, r1	; 0x07
     9ac:	16 82       	std	Z+6, r1	; 0x06
     9ae:	83 81       	ldd	r24, Z+3	; 0x03
     9b0:	81 ff       	sbrs	r24, 1
     9b2:	43 c3       	rjmp	.+1670   	; 0x103a <vfprintf+0x6a4>
     9b4:	ae 01       	movw	r20, r28
     9b6:	4f 5f       	subi	r20, 0xFF	; 255
     9b8:	5f 4f       	sbci	r21, 0xFF	; 255
     9ba:	3a 01       	movw	r6, r20
     9bc:	f6 01       	movw	r30, r12
     9be:	93 81       	ldd	r25, Z+3	; 0x03
     9c0:	f4 01       	movw	r30, r8
     9c2:	93 fd       	sbrc	r25, 3
     9c4:	85 91       	lpm	r24, Z+
     9c6:	93 ff       	sbrs	r25, 3
     9c8:	81 91       	ld	r24, Z+
     9ca:	4f 01       	movw	r8, r30
     9cc:	88 23       	and	r24, r24
     9ce:	09 f4       	brne	.+2      	; 0x9d2 <vfprintf+0x3c>
     9d0:	30 c3       	rjmp	.+1632   	; 0x1032 <vfprintf+0x69c>
     9d2:	85 32       	cpi	r24, 0x25	; 37
     9d4:	39 f4       	brne	.+14     	; 0x9e4 <vfprintf+0x4e>
     9d6:	93 fd       	sbrc	r25, 3
     9d8:	85 91       	lpm	r24, Z+
     9da:	93 ff       	sbrs	r25, 3
     9dc:	81 91       	ld	r24, Z+
     9de:	4f 01       	movw	r8, r30
     9e0:	85 32       	cpi	r24, 0x25	; 37
     9e2:	39 f4       	brne	.+14     	; 0x9f2 <vfprintf+0x5c>
     9e4:	b6 01       	movw	r22, r12
     9e6:	90 e0       	ldi	r25, 0x00	; 0
     9e8:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <fputc>
     9ec:	52 01       	movw	r10, r4
     9ee:	25 01       	movw	r4, r10
     9f0:	e5 cf       	rjmp	.-54     	; 0x9bc <vfprintf+0x26>
     9f2:	10 e0       	ldi	r17, 0x00	; 0
     9f4:	f1 2c       	mov	r15, r1
     9f6:	20 e0       	ldi	r18, 0x00	; 0
     9f8:	20 32       	cpi	r18, 0x20	; 32
     9fa:	a0 f4       	brcc	.+40     	; 0xa24 <vfprintf+0x8e>
     9fc:	8b 32       	cpi	r24, 0x2B	; 43
     9fe:	69 f0       	breq	.+26     	; 0xa1a <vfprintf+0x84>
     a00:	30 f4       	brcc	.+12     	; 0xa0e <vfprintf+0x78>
     a02:	80 32       	cpi	r24, 0x20	; 32
     a04:	59 f0       	breq	.+22     	; 0xa1c <vfprintf+0x86>
     a06:	83 32       	cpi	r24, 0x23	; 35
     a08:	69 f4       	brne	.+26     	; 0xa24 <vfprintf+0x8e>
     a0a:	20 61       	ori	r18, 0x10	; 16
     a0c:	2c c0       	rjmp	.+88     	; 0xa66 <vfprintf+0xd0>
     a0e:	8d 32       	cpi	r24, 0x2D	; 45
     a10:	39 f0       	breq	.+14     	; 0xa20 <vfprintf+0x8a>
     a12:	80 33       	cpi	r24, 0x30	; 48
     a14:	39 f4       	brne	.+14     	; 0xa24 <vfprintf+0x8e>
     a16:	21 60       	ori	r18, 0x01	; 1
     a18:	26 c0       	rjmp	.+76     	; 0xa66 <vfprintf+0xd0>
     a1a:	22 60       	ori	r18, 0x02	; 2
     a1c:	24 60       	ori	r18, 0x04	; 4
     a1e:	23 c0       	rjmp	.+70     	; 0xa66 <vfprintf+0xd0>
     a20:	28 60       	ori	r18, 0x08	; 8
     a22:	21 c0       	rjmp	.+66     	; 0xa66 <vfprintf+0xd0>
     a24:	27 fd       	sbrc	r18, 7
     a26:	27 c0       	rjmp	.+78     	; 0xa76 <vfprintf+0xe0>
     a28:	30 ed       	ldi	r19, 0xD0	; 208
     a2a:	38 0f       	add	r19, r24
     a2c:	3a 30       	cpi	r19, 0x0A	; 10
     a2e:	78 f4       	brcc	.+30     	; 0xa4e <vfprintf+0xb8>
     a30:	26 ff       	sbrs	r18, 6
     a32:	06 c0       	rjmp	.+12     	; 0xa40 <vfprintf+0xaa>
     a34:	fa e0       	ldi	r31, 0x0A	; 10
     a36:	1f 9f       	mul	r17, r31
     a38:	30 0d       	add	r19, r0
     a3a:	11 24       	eor	r1, r1
     a3c:	13 2f       	mov	r17, r19
     a3e:	13 c0       	rjmp	.+38     	; 0xa66 <vfprintf+0xd0>
     a40:	4a e0       	ldi	r20, 0x0A	; 10
     a42:	f4 9e       	mul	r15, r20
     a44:	30 0d       	add	r19, r0
     a46:	11 24       	eor	r1, r1
     a48:	f3 2e       	mov	r15, r19
     a4a:	20 62       	ori	r18, 0x20	; 32
     a4c:	0c c0       	rjmp	.+24     	; 0xa66 <vfprintf+0xd0>
     a4e:	8e 32       	cpi	r24, 0x2E	; 46
     a50:	21 f4       	brne	.+8      	; 0xa5a <vfprintf+0xc4>
     a52:	26 fd       	sbrc	r18, 6
     a54:	ee c2       	rjmp	.+1500   	; 0x1032 <vfprintf+0x69c>
     a56:	20 64       	ori	r18, 0x40	; 64
     a58:	06 c0       	rjmp	.+12     	; 0xa66 <vfprintf+0xd0>
     a5a:	8c 36       	cpi	r24, 0x6C	; 108
     a5c:	11 f4       	brne	.+4      	; 0xa62 <vfprintf+0xcc>
     a5e:	20 68       	ori	r18, 0x80	; 128
     a60:	02 c0       	rjmp	.+4      	; 0xa66 <vfprintf+0xd0>
     a62:	88 36       	cpi	r24, 0x68	; 104
     a64:	41 f4       	brne	.+16     	; 0xa76 <vfprintf+0xe0>
     a66:	f4 01       	movw	r30, r8
     a68:	93 fd       	sbrc	r25, 3
     a6a:	85 91       	lpm	r24, Z+
     a6c:	93 ff       	sbrs	r25, 3
     a6e:	81 91       	ld	r24, Z+
     a70:	4f 01       	movw	r8, r30
     a72:	81 11       	cpse	r24, r1
     a74:	c1 cf       	rjmp	.-126    	; 0x9f8 <vfprintf+0x62>
     a76:	9b eb       	ldi	r25, 0xBB	; 187
     a78:	98 0f       	add	r25, r24
     a7a:	93 30       	cpi	r25, 0x03	; 3
     a7c:	18 f4       	brcc	.+6      	; 0xa84 <vfprintf+0xee>
     a7e:	20 61       	ori	r18, 0x10	; 16
     a80:	80 5e       	subi	r24, 0xE0	; 224
     a82:	06 c0       	rjmp	.+12     	; 0xa90 <vfprintf+0xfa>
     a84:	9b e9       	ldi	r25, 0x9B	; 155
     a86:	98 0f       	add	r25, r24
     a88:	93 30       	cpi	r25, 0x03	; 3
     a8a:	08 f0       	brcs	.+2      	; 0xa8e <vfprintf+0xf8>
     a8c:	71 c1       	rjmp	.+738    	; 0xd70 <vfprintf+0x3da>
     a8e:	2f 7e       	andi	r18, 0xEF	; 239
     a90:	26 ff       	sbrs	r18, 6
     a92:	16 e0       	ldi	r17, 0x06	; 6
     a94:	2f 73       	andi	r18, 0x3F	; 63
     a96:	32 2e       	mov	r3, r18
     a98:	85 36       	cpi	r24, 0x65	; 101
     a9a:	19 f4       	brne	.+6      	; 0xaa2 <vfprintf+0x10c>
     a9c:	20 64       	ori	r18, 0x40	; 64
     a9e:	32 2e       	mov	r3, r18
     aa0:	08 c0       	rjmp	.+16     	; 0xab2 <vfprintf+0x11c>
     aa2:	86 36       	cpi	r24, 0x66	; 102
     aa4:	21 f4       	brne	.+8      	; 0xaae <vfprintf+0x118>
     aa6:	f2 2f       	mov	r31, r18
     aa8:	f0 68       	ori	r31, 0x80	; 128
     aaa:	3f 2e       	mov	r3, r31
     aac:	02 c0       	rjmp	.+4      	; 0xab2 <vfprintf+0x11c>
     aae:	11 11       	cpse	r17, r1
     ab0:	11 50       	subi	r17, 0x01	; 1
     ab2:	37 fe       	sbrs	r3, 7
     ab4:	07 c0       	rjmp	.+14     	; 0xac4 <vfprintf+0x12e>
     ab6:	1c 33       	cpi	r17, 0x3C	; 60
     ab8:	50 f4       	brcc	.+20     	; 0xace <vfprintf+0x138>
     aba:	ee 24       	eor	r14, r14
     abc:	e3 94       	inc	r14
     abe:	e1 0e       	add	r14, r17
     ac0:	27 e0       	ldi	r18, 0x07	; 7
     ac2:	0b c0       	rjmp	.+22     	; 0xada <vfprintf+0x144>
     ac4:	18 30       	cpi	r17, 0x08	; 8
     ac6:	38 f0       	brcs	.+14     	; 0xad6 <vfprintf+0x140>
     ac8:	27 e0       	ldi	r18, 0x07	; 7
     aca:	17 e0       	ldi	r17, 0x07	; 7
     acc:	05 c0       	rjmp	.+10     	; 0xad8 <vfprintf+0x142>
     ace:	27 e0       	ldi	r18, 0x07	; 7
     ad0:	4c e3       	ldi	r20, 0x3C	; 60
     ad2:	e4 2e       	mov	r14, r20
     ad4:	02 c0       	rjmp	.+4      	; 0xada <vfprintf+0x144>
     ad6:	21 2f       	mov	r18, r17
     ad8:	e1 2c       	mov	r14, r1
     ada:	52 01       	movw	r10, r4
     adc:	44 e0       	ldi	r20, 0x04	; 4
     ade:	a4 0e       	add	r10, r20
     ae0:	b1 1c       	adc	r11, r1
     ae2:	f2 01       	movw	r30, r4
     ae4:	60 81       	ld	r22, Z
     ae6:	71 81       	ldd	r23, Z+1	; 0x01
     ae8:	82 81       	ldd	r24, Z+2	; 0x02
     aea:	93 81       	ldd	r25, Z+3	; 0x03
     aec:	0e 2d       	mov	r16, r14
     aee:	a3 01       	movw	r20, r6
     af0:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <__ftoa_engine>
     af4:	2c 01       	movw	r4, r24
     af6:	09 81       	ldd	r16, Y+1	; 0x01
     af8:	00 ff       	sbrs	r16, 0
     afa:	02 c0       	rjmp	.+4      	; 0xb00 <vfprintf+0x16a>
     afc:	03 ff       	sbrs	r16, 3
     afe:	07 c0       	rjmp	.+14     	; 0xb0e <vfprintf+0x178>
     b00:	31 fc       	sbrc	r3, 1
     b02:	08 c0       	rjmp	.+16     	; 0xb14 <vfprintf+0x17e>
     b04:	32 fe       	sbrs	r3, 2
     b06:	09 c0       	rjmp	.+18     	; 0xb1a <vfprintf+0x184>
     b08:	30 e2       	ldi	r19, 0x20	; 32
     b0a:	23 2e       	mov	r2, r19
     b0c:	07 c0       	rjmp	.+14     	; 0xb1c <vfprintf+0x186>
     b0e:	2d e2       	ldi	r18, 0x2D	; 45
     b10:	22 2e       	mov	r2, r18
     b12:	04 c0       	rjmp	.+8      	; 0xb1c <vfprintf+0x186>
     b14:	9b e2       	ldi	r25, 0x2B	; 43
     b16:	29 2e       	mov	r2, r25
     b18:	01 c0       	rjmp	.+2      	; 0xb1c <vfprintf+0x186>
     b1a:	21 2c       	mov	r2, r1
     b1c:	80 2f       	mov	r24, r16
     b1e:	8c 70       	andi	r24, 0x0C	; 12
     b20:	19 f0       	breq	.+6      	; 0xb28 <vfprintf+0x192>
     b22:	21 10       	cpse	r2, r1
     b24:	68 c2       	rjmp	.+1232   	; 0xff6 <vfprintf+0x660>
     b26:	a8 c2       	rjmp	.+1360   	; 0x1078 <vfprintf+0x6e2>
     b28:	37 fe       	sbrs	r3, 7
     b2a:	0f c0       	rjmp	.+30     	; 0xb4a <vfprintf+0x1b4>
     b2c:	e4 0c       	add	r14, r4
     b2e:	04 ff       	sbrs	r16, 4
     b30:	04 c0       	rjmp	.+8      	; 0xb3a <vfprintf+0x1a4>
     b32:	8a 81       	ldd	r24, Y+2	; 0x02
     b34:	81 33       	cpi	r24, 0x31	; 49
     b36:	09 f4       	brne	.+2      	; 0xb3a <vfprintf+0x1a4>
     b38:	ea 94       	dec	r14
     b3a:	1e 14       	cp	r1, r14
     b3c:	74 f5       	brge	.+92     	; 0xb9a <vfprintf+0x204>
     b3e:	f8 e0       	ldi	r31, 0x08	; 8
     b40:	fe 15       	cp	r31, r14
     b42:	78 f5       	brcc	.+94     	; 0xba2 <vfprintf+0x20c>
     b44:	88 e0       	ldi	r24, 0x08	; 8
     b46:	e8 2e       	mov	r14, r24
     b48:	2c c0       	rjmp	.+88     	; 0xba2 <vfprintf+0x20c>
     b4a:	36 fc       	sbrc	r3, 6
     b4c:	2a c0       	rjmp	.+84     	; 0xba2 <vfprintf+0x20c>
     b4e:	81 2f       	mov	r24, r17
     b50:	90 e0       	ldi	r25, 0x00	; 0
     b52:	84 15       	cp	r24, r4
     b54:	95 05       	cpc	r25, r5
     b56:	9c f0       	brlt	.+38     	; 0xb7e <vfprintf+0x1e8>
     b58:	2c ef       	ldi	r18, 0xFC	; 252
     b5a:	42 16       	cp	r4, r18
     b5c:	2f ef       	ldi	r18, 0xFF	; 255
     b5e:	52 06       	cpc	r5, r18
     b60:	74 f0       	brlt	.+28     	; 0xb7e <vfprintf+0x1e8>
     b62:	43 2d       	mov	r20, r3
     b64:	40 68       	ori	r20, 0x80	; 128
     b66:	34 2e       	mov	r3, r20
     b68:	0a c0       	rjmp	.+20     	; 0xb7e <vfprintf+0x1e8>
     b6a:	e2 e0       	ldi	r30, 0x02	; 2
     b6c:	f0 e0       	ldi	r31, 0x00	; 0
     b6e:	ec 0f       	add	r30, r28
     b70:	fd 1f       	adc	r31, r29
     b72:	e1 0f       	add	r30, r17
     b74:	f1 1d       	adc	r31, r1
     b76:	80 81       	ld	r24, Z
     b78:	80 33       	cpi	r24, 0x30	; 48
     b7a:	19 f4       	brne	.+6      	; 0xb82 <vfprintf+0x1ec>
     b7c:	11 50       	subi	r17, 0x01	; 1
     b7e:	11 11       	cpse	r17, r1
     b80:	f4 cf       	rjmp	.-24     	; 0xb6a <vfprintf+0x1d4>
     b82:	37 fe       	sbrs	r3, 7
     b84:	0e c0       	rjmp	.+28     	; 0xba2 <vfprintf+0x20c>
     b86:	ee 24       	eor	r14, r14
     b88:	e3 94       	inc	r14
     b8a:	e1 0e       	add	r14, r17
     b8c:	81 2f       	mov	r24, r17
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	48 16       	cp	r4, r24
     b92:	59 06       	cpc	r5, r25
     b94:	2c f4       	brge	.+10     	; 0xba0 <vfprintf+0x20a>
     b96:	14 19       	sub	r17, r4
     b98:	04 c0       	rjmp	.+8      	; 0xba2 <vfprintf+0x20c>
     b9a:	ee 24       	eor	r14, r14
     b9c:	e3 94       	inc	r14
     b9e:	01 c0       	rjmp	.+2      	; 0xba2 <vfprintf+0x20c>
     ba0:	10 e0       	ldi	r17, 0x00	; 0
     ba2:	37 fe       	sbrs	r3, 7
     ba4:	06 c0       	rjmp	.+12     	; 0xbb2 <vfprintf+0x21c>
     ba6:	14 14       	cp	r1, r4
     ba8:	15 04       	cpc	r1, r5
     baa:	34 f4       	brge	.+12     	; 0xbb8 <vfprintf+0x222>
     bac:	c2 01       	movw	r24, r4
     bae:	01 96       	adiw	r24, 0x01	; 1
     bb0:	05 c0       	rjmp	.+10     	; 0xbbc <vfprintf+0x226>
     bb2:	85 e0       	ldi	r24, 0x05	; 5
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	02 c0       	rjmp	.+4      	; 0xbbc <vfprintf+0x226>
     bb8:	81 e0       	ldi	r24, 0x01	; 1
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	21 10       	cpse	r2, r1
     bbe:	01 96       	adiw	r24, 0x01	; 1
     bc0:	11 23       	and	r17, r17
     bc2:	31 f0       	breq	.+12     	; 0xbd0 <vfprintf+0x23a>
     bc4:	21 2f       	mov	r18, r17
     bc6:	30 e0       	ldi	r19, 0x00	; 0
     bc8:	2f 5f       	subi	r18, 0xFF	; 255
     bca:	3f 4f       	sbci	r19, 0xFF	; 255
     bcc:	82 0f       	add	r24, r18
     bce:	93 1f       	adc	r25, r19
     bd0:	2f 2d       	mov	r18, r15
     bd2:	30 e0       	ldi	r19, 0x00	; 0
     bd4:	82 17       	cp	r24, r18
     bd6:	93 07       	cpc	r25, r19
     bd8:	14 f4       	brge	.+4      	; 0xbde <vfprintf+0x248>
     bda:	f8 1a       	sub	r15, r24
     bdc:	01 c0       	rjmp	.+2      	; 0xbe0 <vfprintf+0x24a>
     bde:	f1 2c       	mov	r15, r1
     be0:	83 2d       	mov	r24, r3
     be2:	89 70       	andi	r24, 0x09	; 9
     be4:	49 f4       	brne	.+18     	; 0xbf8 <vfprintf+0x262>
     be6:	ff 20       	and	r15, r15
     be8:	39 f0       	breq	.+14     	; 0xbf8 <vfprintf+0x262>
     bea:	b6 01       	movw	r22, r12
     bec:	80 e2       	ldi	r24, 0x20	; 32
     bee:	90 e0       	ldi	r25, 0x00	; 0
     bf0:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <fputc>
     bf4:	fa 94       	dec	r15
     bf6:	f7 cf       	rjmp	.-18     	; 0xbe6 <vfprintf+0x250>
     bf8:	22 20       	and	r2, r2
     bfa:	29 f0       	breq	.+10     	; 0xc06 <vfprintf+0x270>
     bfc:	b6 01       	movw	r22, r12
     bfe:	82 2d       	mov	r24, r2
     c00:	90 e0       	ldi	r25, 0x00	; 0
     c02:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <fputc>
     c06:	33 fc       	sbrc	r3, 3
     c08:	09 c0       	rjmp	.+18     	; 0xc1c <vfprintf+0x286>
     c0a:	ff 20       	and	r15, r15
     c0c:	39 f0       	breq	.+14     	; 0xc1c <vfprintf+0x286>
     c0e:	b6 01       	movw	r22, r12
     c10:	80 e3       	ldi	r24, 0x30	; 48
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <fputc>
     c18:	fa 94       	dec	r15
     c1a:	f7 cf       	rjmp	.-18     	; 0xc0a <vfprintf+0x274>
     c1c:	37 fe       	sbrs	r3, 7
     c1e:	5a c0       	rjmp	.+180    	; 0xcd4 <vfprintf+0x33e>
     c20:	94 2d       	mov	r25, r4
     c22:	85 2d       	mov	r24, r5
     c24:	57 fe       	sbrs	r5, 7
     c26:	02 c0       	rjmp	.+4      	; 0xc2c <vfprintf+0x296>
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	80 e0       	ldi	r24, 0x00	; 0
     c2c:	29 2e       	mov	r2, r25
     c2e:	38 2e       	mov	r3, r24
     c30:	20 e0       	ldi	r18, 0x00	; 0
     c32:	30 e0       	ldi	r19, 0x00	; 0
     c34:	a2 01       	movw	r20, r4
     c36:	4e 19       	sub	r20, r14
     c38:	51 09       	sbc	r21, r1
     c3a:	5d 87       	std	Y+13, r21	; 0x0d
     c3c:	4c 87       	std	Y+12, r20	; 0x0c
     c3e:	a2 01       	movw	r20, r4
     c40:	42 19       	sub	r20, r2
     c42:	53 09       	sbc	r21, r3
     c44:	5f 87       	std	Y+15, r21	; 0x0f
     c46:	4e 87       	std	Y+14, r20	; 0x0e
     c48:	61 2f       	mov	r22, r17
     c4a:	70 e0       	ldi	r23, 0x00	; 0
     c4c:	44 27       	eor	r20, r20
     c4e:	55 27       	eor	r21, r21
     c50:	46 1b       	sub	r20, r22
     c52:	57 0b       	sbc	r21, r23
     c54:	59 8b       	std	Y+17, r21	; 0x11
     c56:	48 8b       	std	Y+16, r20	; 0x10
     c58:	5f ef       	ldi	r21, 0xFF	; 255
     c5a:	25 16       	cp	r2, r21
     c5c:	35 06       	cpc	r3, r21
     c5e:	49 f4       	brne	.+18     	; 0xc72 <vfprintf+0x2dc>
     c60:	b6 01       	movw	r22, r12
     c62:	8e e2       	ldi	r24, 0x2E	; 46
     c64:	90 e0       	ldi	r25, 0x00	; 0
     c66:	2a 8b       	std	Y+18, r18	; 0x12
     c68:	3b 8b       	std	Y+19, r19	; 0x13
     c6a:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <fputc>
     c6e:	3b 89       	ldd	r19, Y+19	; 0x13
     c70:	2a 89       	ldd	r18, Y+18	; 0x12
     c72:	42 14       	cp	r4, r2
     c74:	53 04       	cpc	r5, r3
     c76:	6c f0       	brlt	.+26     	; 0xc92 <vfprintf+0x2fc>
     c78:	4c 85       	ldd	r20, Y+12	; 0x0c
     c7a:	5d 85       	ldd	r21, Y+13	; 0x0d
     c7c:	42 15       	cp	r20, r2
     c7e:	53 05       	cpc	r21, r3
     c80:	44 f4       	brge	.+16     	; 0xc92 <vfprintf+0x2fc>
     c82:	ee 85       	ldd	r30, Y+14	; 0x0e
     c84:	ff 85       	ldd	r31, Y+15	; 0x0f
     c86:	e2 0f       	add	r30, r18
     c88:	f3 1f       	adc	r31, r19
     c8a:	e6 0d       	add	r30, r6
     c8c:	f7 1d       	adc	r31, r7
     c8e:	81 81       	ldd	r24, Z+1	; 0x01
     c90:	01 c0       	rjmp	.+2      	; 0xc94 <vfprintf+0x2fe>
     c92:	80 e3       	ldi	r24, 0x30	; 48
     c94:	51 e0       	ldi	r21, 0x01	; 1
     c96:	25 1a       	sub	r2, r21
     c98:	31 08       	sbc	r3, r1
     c9a:	2f 5f       	subi	r18, 0xFF	; 255
     c9c:	3f 4f       	sbci	r19, 0xFF	; 255
     c9e:	48 89       	ldd	r20, Y+16	; 0x10
     ca0:	59 89       	ldd	r21, Y+17	; 0x11
     ca2:	24 16       	cp	r2, r20
     ca4:	35 06       	cpc	r3, r21
     ca6:	4c f0       	brlt	.+18     	; 0xcba <vfprintf+0x324>
     ca8:	b6 01       	movw	r22, r12
     caa:	90 e0       	ldi	r25, 0x00	; 0
     cac:	2a 8b       	std	Y+18, r18	; 0x12
     cae:	3b 8b       	std	Y+19, r19	; 0x13
     cb0:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <fputc>
     cb4:	2a 89       	ldd	r18, Y+18	; 0x12
     cb6:	3b 89       	ldd	r19, Y+19	; 0x13
     cb8:	cf cf       	rjmp	.-98     	; 0xc58 <vfprintf+0x2c2>
     cba:	24 14       	cp	r2, r4
     cbc:	35 04       	cpc	r3, r5
     cbe:	39 f4       	brne	.+14     	; 0xcce <vfprintf+0x338>
     cc0:	9a 81       	ldd	r25, Y+2	; 0x02
     cc2:	96 33       	cpi	r25, 0x36	; 54
     cc4:	18 f4       	brcc	.+6      	; 0xccc <vfprintf+0x336>
     cc6:	95 33       	cpi	r25, 0x35	; 53
     cc8:	11 f4       	brne	.+4      	; 0xcce <vfprintf+0x338>
     cca:	04 ff       	sbrs	r16, 4
     ccc:	81 e3       	ldi	r24, 0x31	; 49
     cce:	b6 01       	movw	r22, r12
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	4b c0       	rjmp	.+150    	; 0xd6a <vfprintf+0x3d4>
     cd4:	8a 81       	ldd	r24, Y+2	; 0x02
     cd6:	81 33       	cpi	r24, 0x31	; 49
     cd8:	09 f0       	breq	.+2      	; 0xcdc <vfprintf+0x346>
     cda:	0f 7e       	andi	r16, 0xEF	; 239
     cdc:	b6 01       	movw	r22, r12
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <fputc>
     ce4:	11 11       	cpse	r17, r1
     ce6:	05 c0       	rjmp	.+10     	; 0xcf2 <vfprintf+0x35c>
     ce8:	34 fc       	sbrc	r3, 4
     cea:	18 c0       	rjmp	.+48     	; 0xd1c <vfprintf+0x386>
     cec:	85 e6       	ldi	r24, 0x65	; 101
     cee:	90 e0       	ldi	r25, 0x00	; 0
     cf0:	17 c0       	rjmp	.+46     	; 0xd20 <vfprintf+0x38a>
     cf2:	b6 01       	movw	r22, r12
     cf4:	8e e2       	ldi	r24, 0x2E	; 46
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <fputc>
     cfc:	82 e0       	ldi	r24, 0x02	; 2
     cfe:	ee 24       	eor	r14, r14
     d00:	e3 94       	inc	r14
     d02:	e8 0e       	add	r14, r24
     d04:	f3 01       	movw	r30, r6
     d06:	e8 0f       	add	r30, r24
     d08:	f1 1d       	adc	r31, r1
     d0a:	80 81       	ld	r24, Z
     d0c:	b6 01       	movw	r22, r12
     d0e:	90 e0       	ldi	r25, 0x00	; 0
     d10:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <fputc>
     d14:	11 50       	subi	r17, 0x01	; 1
     d16:	8e 2d       	mov	r24, r14
     d18:	91 f7       	brne	.-28     	; 0xcfe <vfprintf+0x368>
     d1a:	e6 cf       	rjmp	.-52     	; 0xce8 <vfprintf+0x352>
     d1c:	85 e4       	ldi	r24, 0x45	; 69
     d1e:	90 e0       	ldi	r25, 0x00	; 0
     d20:	b6 01       	movw	r22, r12
     d22:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <fputc>
     d26:	57 fc       	sbrc	r5, 7
     d28:	05 c0       	rjmp	.+10     	; 0xd34 <vfprintf+0x39e>
     d2a:	41 14       	cp	r4, r1
     d2c:	51 04       	cpc	r5, r1
     d2e:	39 f4       	brne	.+14     	; 0xd3e <vfprintf+0x3a8>
     d30:	04 ff       	sbrs	r16, 4
     d32:	05 c0       	rjmp	.+10     	; 0xd3e <vfprintf+0x3a8>
     d34:	51 94       	neg	r5
     d36:	41 94       	neg	r4
     d38:	51 08       	sbc	r5, r1
     d3a:	8d e2       	ldi	r24, 0x2D	; 45
     d3c:	01 c0       	rjmp	.+2      	; 0xd40 <vfprintf+0x3aa>
     d3e:	8b e2       	ldi	r24, 0x2B	; 43
     d40:	b6 01       	movw	r22, r12
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <fputc>
     d48:	80 e3       	ldi	r24, 0x30	; 48
     d4a:	9a e0       	ldi	r25, 0x0A	; 10
     d4c:	49 16       	cp	r4, r25
     d4e:	51 04       	cpc	r5, r1
     d50:	2c f0       	brlt	.+10     	; 0xd5c <vfprintf+0x3c6>
     d52:	8f 5f       	subi	r24, 0xFF	; 255
     d54:	5a e0       	ldi	r21, 0x0A	; 10
     d56:	45 1a       	sub	r4, r21
     d58:	51 08       	sbc	r5, r1
     d5a:	f7 cf       	rjmp	.-18     	; 0xd4a <vfprintf+0x3b4>
     d5c:	b6 01       	movw	r22, r12
     d5e:	90 e0       	ldi	r25, 0x00	; 0
     d60:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <fputc>
     d64:	b6 01       	movw	r22, r12
     d66:	c2 01       	movw	r24, r4
     d68:	c0 96       	adiw	r24, 0x30	; 48
     d6a:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <fputc>
     d6e:	57 c1       	rjmp	.+686    	; 0x101e <vfprintf+0x688>
     d70:	83 36       	cpi	r24, 0x63	; 99
     d72:	31 f0       	breq	.+12     	; 0xd80 <vfprintf+0x3ea>
     d74:	83 37       	cpi	r24, 0x73	; 115
     d76:	79 f0       	breq	.+30     	; 0xd96 <vfprintf+0x400>
     d78:	83 35       	cpi	r24, 0x53	; 83
     d7a:	09 f0       	breq	.+2      	; 0xd7e <vfprintf+0x3e8>
     d7c:	58 c0       	rjmp	.+176    	; 0xe2e <vfprintf+0x498>
     d7e:	21 c0       	rjmp	.+66     	; 0xdc2 <vfprintf+0x42c>
     d80:	52 01       	movw	r10, r4
     d82:	e2 e0       	ldi	r30, 0x02	; 2
     d84:	ae 0e       	add	r10, r30
     d86:	b1 1c       	adc	r11, r1
     d88:	f2 01       	movw	r30, r4
     d8a:	80 81       	ld	r24, Z
     d8c:	89 83       	std	Y+1, r24	; 0x01
     d8e:	01 e0       	ldi	r16, 0x01	; 1
     d90:	10 e0       	ldi	r17, 0x00	; 0
     d92:	23 01       	movw	r4, r6
     d94:	14 c0       	rjmp	.+40     	; 0xdbe <vfprintf+0x428>
     d96:	52 01       	movw	r10, r4
     d98:	f2 e0       	ldi	r31, 0x02	; 2
     d9a:	af 0e       	add	r10, r31
     d9c:	b1 1c       	adc	r11, r1
     d9e:	f2 01       	movw	r30, r4
     da0:	40 80       	ld	r4, Z
     da2:	51 80       	ldd	r5, Z+1	; 0x01
     da4:	26 ff       	sbrs	r18, 6
     da6:	03 c0       	rjmp	.+6      	; 0xdae <vfprintf+0x418>
     da8:	61 2f       	mov	r22, r17
     daa:	70 e0       	ldi	r23, 0x00	; 0
     dac:	02 c0       	rjmp	.+4      	; 0xdb2 <vfprintf+0x41c>
     dae:	6f ef       	ldi	r22, 0xFF	; 255
     db0:	7f ef       	ldi	r23, 0xFF	; 255
     db2:	c2 01       	movw	r24, r4
     db4:	2a 8b       	std	Y+18, r18	; 0x12
     db6:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <strnlen>
     dba:	8c 01       	movw	r16, r24
     dbc:	2a 89       	ldd	r18, Y+18	; 0x12
     dbe:	2f 77       	andi	r18, 0x7F	; 127
     dc0:	15 c0       	rjmp	.+42     	; 0xdec <vfprintf+0x456>
     dc2:	52 01       	movw	r10, r4
     dc4:	f2 e0       	ldi	r31, 0x02	; 2
     dc6:	af 0e       	add	r10, r31
     dc8:	b1 1c       	adc	r11, r1
     dca:	f2 01       	movw	r30, r4
     dcc:	40 80       	ld	r4, Z
     dce:	51 80       	ldd	r5, Z+1	; 0x01
     dd0:	26 ff       	sbrs	r18, 6
     dd2:	03 c0       	rjmp	.+6      	; 0xdda <vfprintf+0x444>
     dd4:	61 2f       	mov	r22, r17
     dd6:	70 e0       	ldi	r23, 0x00	; 0
     dd8:	02 c0       	rjmp	.+4      	; 0xdde <vfprintf+0x448>
     dda:	6f ef       	ldi	r22, 0xFF	; 255
     ddc:	7f ef       	ldi	r23, 0xFF	; 255
     dde:	c2 01       	movw	r24, r4
     de0:	2a 8b       	std	Y+18, r18	; 0x12
     de2:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <strnlen_P>
     de6:	8c 01       	movw	r16, r24
     de8:	2a 89       	ldd	r18, Y+18	; 0x12
     dea:	20 68       	ori	r18, 0x80	; 128
     dec:	32 2e       	mov	r3, r18
     dee:	23 fd       	sbrc	r18, 3
     df0:	1a c0       	rjmp	.+52     	; 0xe26 <vfprintf+0x490>
     df2:	8f 2d       	mov	r24, r15
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	08 17       	cp	r16, r24
     df8:	19 07       	cpc	r17, r25
     dfa:	a8 f4       	brcc	.+42     	; 0xe26 <vfprintf+0x490>
     dfc:	b6 01       	movw	r22, r12
     dfe:	80 e2       	ldi	r24, 0x20	; 32
     e00:	90 e0       	ldi	r25, 0x00	; 0
     e02:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <fputc>
     e06:	fa 94       	dec	r15
     e08:	f4 cf       	rjmp	.-24     	; 0xdf2 <vfprintf+0x45c>
     e0a:	f2 01       	movw	r30, r4
     e0c:	37 fc       	sbrc	r3, 7
     e0e:	85 91       	lpm	r24, Z+
     e10:	37 fe       	sbrs	r3, 7
     e12:	81 91       	ld	r24, Z+
     e14:	2f 01       	movw	r4, r30
     e16:	b6 01       	movw	r22, r12
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <fputc>
     e1e:	f1 10       	cpse	r15, r1
     e20:	fa 94       	dec	r15
     e22:	01 50       	subi	r16, 0x01	; 1
     e24:	11 09       	sbc	r17, r1
     e26:	01 15       	cp	r16, r1
     e28:	11 05       	cpc	r17, r1
     e2a:	79 f7       	brne	.-34     	; 0xe0a <vfprintf+0x474>
     e2c:	f8 c0       	rjmp	.+496    	; 0x101e <vfprintf+0x688>
     e2e:	84 36       	cpi	r24, 0x64	; 100
     e30:	11 f0       	breq	.+4      	; 0xe36 <vfprintf+0x4a0>
     e32:	89 36       	cpi	r24, 0x69	; 105
     e34:	59 f5       	brne	.+86     	; 0xe8c <vfprintf+0x4f6>
     e36:	52 01       	movw	r10, r4
     e38:	27 ff       	sbrs	r18, 7
     e3a:	09 c0       	rjmp	.+18     	; 0xe4e <vfprintf+0x4b8>
     e3c:	f4 e0       	ldi	r31, 0x04	; 4
     e3e:	af 0e       	add	r10, r31
     e40:	b1 1c       	adc	r11, r1
     e42:	f2 01       	movw	r30, r4
     e44:	60 81       	ld	r22, Z
     e46:	71 81       	ldd	r23, Z+1	; 0x01
     e48:	82 81       	ldd	r24, Z+2	; 0x02
     e4a:	93 81       	ldd	r25, Z+3	; 0x03
     e4c:	0a c0       	rjmp	.+20     	; 0xe62 <vfprintf+0x4cc>
     e4e:	f2 e0       	ldi	r31, 0x02	; 2
     e50:	af 0e       	add	r10, r31
     e52:	b1 1c       	adc	r11, r1
     e54:	f2 01       	movw	r30, r4
     e56:	60 81       	ld	r22, Z
     e58:	71 81       	ldd	r23, Z+1	; 0x01
     e5a:	88 27       	eor	r24, r24
     e5c:	77 fd       	sbrc	r23, 7
     e5e:	80 95       	com	r24
     e60:	98 2f       	mov	r25, r24
     e62:	2f 76       	andi	r18, 0x6F	; 111
     e64:	32 2e       	mov	r3, r18
     e66:	97 ff       	sbrs	r25, 7
     e68:	09 c0       	rjmp	.+18     	; 0xe7c <vfprintf+0x4e6>
     e6a:	90 95       	com	r25
     e6c:	80 95       	com	r24
     e6e:	70 95       	com	r23
     e70:	61 95       	neg	r22
     e72:	7f 4f       	sbci	r23, 0xFF	; 255
     e74:	8f 4f       	sbci	r24, 0xFF	; 255
     e76:	9f 4f       	sbci	r25, 0xFF	; 255
     e78:	20 68       	ori	r18, 0x80	; 128
     e7a:	32 2e       	mov	r3, r18
     e7c:	2a e0       	ldi	r18, 0x0A	; 10
     e7e:	30 e0       	ldi	r19, 0x00	; 0
     e80:	a3 01       	movw	r20, r6
     e82:	0e 94 24 0c 	call	0x1848	; 0x1848 <__ultoa_invert>
     e86:	e8 2e       	mov	r14, r24
     e88:	e6 18       	sub	r14, r6
     e8a:	3f c0       	rjmp	.+126    	; 0xf0a <vfprintf+0x574>
     e8c:	02 2f       	mov	r16, r18
     e8e:	85 37       	cpi	r24, 0x75	; 117
     e90:	21 f4       	brne	.+8      	; 0xe9a <vfprintf+0x504>
     e92:	0f 7e       	andi	r16, 0xEF	; 239
     e94:	2a e0       	ldi	r18, 0x0A	; 10
     e96:	30 e0       	ldi	r19, 0x00	; 0
     e98:	1d c0       	rjmp	.+58     	; 0xed4 <vfprintf+0x53e>
     e9a:	09 7f       	andi	r16, 0xF9	; 249
     e9c:	8f 36       	cpi	r24, 0x6F	; 111
     e9e:	91 f0       	breq	.+36     	; 0xec4 <vfprintf+0x52e>
     ea0:	18 f4       	brcc	.+6      	; 0xea8 <vfprintf+0x512>
     ea2:	88 35       	cpi	r24, 0x58	; 88
     ea4:	59 f0       	breq	.+22     	; 0xebc <vfprintf+0x526>
     ea6:	c5 c0       	rjmp	.+394    	; 0x1032 <vfprintf+0x69c>
     ea8:	80 37       	cpi	r24, 0x70	; 112
     eaa:	19 f0       	breq	.+6      	; 0xeb2 <vfprintf+0x51c>
     eac:	88 37       	cpi	r24, 0x78	; 120
     eae:	11 f0       	breq	.+4      	; 0xeb4 <vfprintf+0x51e>
     eb0:	c0 c0       	rjmp	.+384    	; 0x1032 <vfprintf+0x69c>
     eb2:	00 61       	ori	r16, 0x10	; 16
     eb4:	04 ff       	sbrs	r16, 4
     eb6:	09 c0       	rjmp	.+18     	; 0xeca <vfprintf+0x534>
     eb8:	04 60       	ori	r16, 0x04	; 4
     eba:	07 c0       	rjmp	.+14     	; 0xeca <vfprintf+0x534>
     ebc:	24 ff       	sbrs	r18, 4
     ebe:	08 c0       	rjmp	.+16     	; 0xed0 <vfprintf+0x53a>
     ec0:	06 60       	ori	r16, 0x06	; 6
     ec2:	06 c0       	rjmp	.+12     	; 0xed0 <vfprintf+0x53a>
     ec4:	28 e0       	ldi	r18, 0x08	; 8
     ec6:	30 e0       	ldi	r19, 0x00	; 0
     ec8:	05 c0       	rjmp	.+10     	; 0xed4 <vfprintf+0x53e>
     eca:	20 e1       	ldi	r18, 0x10	; 16
     ecc:	30 e0       	ldi	r19, 0x00	; 0
     ece:	02 c0       	rjmp	.+4      	; 0xed4 <vfprintf+0x53e>
     ed0:	20 e1       	ldi	r18, 0x10	; 16
     ed2:	32 e0       	ldi	r19, 0x02	; 2
     ed4:	52 01       	movw	r10, r4
     ed6:	07 ff       	sbrs	r16, 7
     ed8:	09 c0       	rjmp	.+18     	; 0xeec <vfprintf+0x556>
     eda:	f4 e0       	ldi	r31, 0x04	; 4
     edc:	af 0e       	add	r10, r31
     ede:	b1 1c       	adc	r11, r1
     ee0:	f2 01       	movw	r30, r4
     ee2:	60 81       	ld	r22, Z
     ee4:	71 81       	ldd	r23, Z+1	; 0x01
     ee6:	82 81       	ldd	r24, Z+2	; 0x02
     ee8:	93 81       	ldd	r25, Z+3	; 0x03
     eea:	08 c0       	rjmp	.+16     	; 0xefc <vfprintf+0x566>
     eec:	f2 e0       	ldi	r31, 0x02	; 2
     eee:	af 0e       	add	r10, r31
     ef0:	b1 1c       	adc	r11, r1
     ef2:	f2 01       	movw	r30, r4
     ef4:	60 81       	ld	r22, Z
     ef6:	71 81       	ldd	r23, Z+1	; 0x01
     ef8:	80 e0       	ldi	r24, 0x00	; 0
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	a3 01       	movw	r20, r6
     efe:	0e 94 24 0c 	call	0x1848	; 0x1848 <__ultoa_invert>
     f02:	e8 2e       	mov	r14, r24
     f04:	e6 18       	sub	r14, r6
     f06:	0f 77       	andi	r16, 0x7F	; 127
     f08:	30 2e       	mov	r3, r16
     f0a:	36 fe       	sbrs	r3, 6
     f0c:	0b c0       	rjmp	.+22     	; 0xf24 <vfprintf+0x58e>
     f0e:	33 2d       	mov	r19, r3
     f10:	3e 7f       	andi	r19, 0xFE	; 254
     f12:	e1 16       	cp	r14, r17
     f14:	50 f4       	brcc	.+20     	; 0xf2a <vfprintf+0x594>
     f16:	34 fe       	sbrs	r3, 4
     f18:	0a c0       	rjmp	.+20     	; 0xf2e <vfprintf+0x598>
     f1a:	32 fc       	sbrc	r3, 2
     f1c:	08 c0       	rjmp	.+16     	; 0xf2e <vfprintf+0x598>
     f1e:	33 2d       	mov	r19, r3
     f20:	3e 7e       	andi	r19, 0xEE	; 238
     f22:	05 c0       	rjmp	.+10     	; 0xf2e <vfprintf+0x598>
     f24:	0e 2d       	mov	r16, r14
     f26:	33 2d       	mov	r19, r3
     f28:	03 c0       	rjmp	.+6      	; 0xf30 <vfprintf+0x59a>
     f2a:	0e 2d       	mov	r16, r14
     f2c:	01 c0       	rjmp	.+2      	; 0xf30 <vfprintf+0x59a>
     f2e:	01 2f       	mov	r16, r17
     f30:	34 ff       	sbrs	r19, 4
     f32:	0c c0       	rjmp	.+24     	; 0xf4c <vfprintf+0x5b6>
     f34:	fe 01       	movw	r30, r28
     f36:	ee 0d       	add	r30, r14
     f38:	f1 1d       	adc	r31, r1
     f3a:	80 81       	ld	r24, Z
     f3c:	80 33       	cpi	r24, 0x30	; 48
     f3e:	11 f4       	brne	.+4      	; 0xf44 <vfprintf+0x5ae>
     f40:	39 7e       	andi	r19, 0xE9	; 233
     f42:	08 c0       	rjmp	.+16     	; 0xf54 <vfprintf+0x5be>
     f44:	32 ff       	sbrs	r19, 2
     f46:	05 c0       	rjmp	.+10     	; 0xf52 <vfprintf+0x5bc>
     f48:	0e 5f       	subi	r16, 0xFE	; 254
     f4a:	04 c0       	rjmp	.+8      	; 0xf54 <vfprintf+0x5be>
     f4c:	83 2f       	mov	r24, r19
     f4e:	86 78       	andi	r24, 0x86	; 134
     f50:	09 f0       	breq	.+2      	; 0xf54 <vfprintf+0x5be>
     f52:	0f 5f       	subi	r16, 0xFF	; 255
     f54:	33 fd       	sbrc	r19, 3
     f56:	13 c0       	rjmp	.+38     	; 0xf7e <vfprintf+0x5e8>
     f58:	30 ff       	sbrs	r19, 0
     f5a:	06 c0       	rjmp	.+12     	; 0xf68 <vfprintf+0x5d2>
     f5c:	1e 2d       	mov	r17, r14
     f5e:	0f 15       	cp	r16, r15
     f60:	18 f4       	brcc	.+6      	; 0xf68 <vfprintf+0x5d2>
     f62:	1f 0d       	add	r17, r15
     f64:	10 1b       	sub	r17, r16
     f66:	0f 2d       	mov	r16, r15
     f68:	0f 15       	cp	r16, r15
     f6a:	68 f4       	brcc	.+26     	; 0xf86 <vfprintf+0x5f0>
     f6c:	b6 01       	movw	r22, r12
     f6e:	80 e2       	ldi	r24, 0x20	; 32
     f70:	90 e0       	ldi	r25, 0x00	; 0
     f72:	3b 8b       	std	Y+19, r19	; 0x13
     f74:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <fputc>
     f78:	0f 5f       	subi	r16, 0xFF	; 255
     f7a:	3b 89       	ldd	r19, Y+19	; 0x13
     f7c:	f5 cf       	rjmp	.-22     	; 0xf68 <vfprintf+0x5d2>
     f7e:	0f 15       	cp	r16, r15
     f80:	10 f4       	brcc	.+4      	; 0xf86 <vfprintf+0x5f0>
     f82:	f0 1a       	sub	r15, r16
     f84:	01 c0       	rjmp	.+2      	; 0xf88 <vfprintf+0x5f2>
     f86:	f1 2c       	mov	r15, r1
     f88:	34 ff       	sbrs	r19, 4
     f8a:	12 c0       	rjmp	.+36     	; 0xfb0 <vfprintf+0x61a>
     f8c:	b6 01       	movw	r22, r12
     f8e:	80 e3       	ldi	r24, 0x30	; 48
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	3b 8b       	std	Y+19, r19	; 0x13
     f94:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <fputc>
     f98:	3b 89       	ldd	r19, Y+19	; 0x13
     f9a:	32 ff       	sbrs	r19, 2
     f9c:	17 c0       	rjmp	.+46     	; 0xfcc <vfprintf+0x636>
     f9e:	31 fd       	sbrc	r19, 1
     fa0:	03 c0       	rjmp	.+6      	; 0xfa8 <vfprintf+0x612>
     fa2:	88 e7       	ldi	r24, 0x78	; 120
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	02 c0       	rjmp	.+4      	; 0xfac <vfprintf+0x616>
     fa8:	88 e5       	ldi	r24, 0x58	; 88
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	b6 01       	movw	r22, r12
     fae:	0c c0       	rjmp	.+24     	; 0xfc8 <vfprintf+0x632>
     fb0:	83 2f       	mov	r24, r19
     fb2:	86 78       	andi	r24, 0x86	; 134
     fb4:	59 f0       	breq	.+22     	; 0xfcc <vfprintf+0x636>
     fb6:	31 ff       	sbrs	r19, 1
     fb8:	02 c0       	rjmp	.+4      	; 0xfbe <vfprintf+0x628>
     fba:	8b e2       	ldi	r24, 0x2B	; 43
     fbc:	01 c0       	rjmp	.+2      	; 0xfc0 <vfprintf+0x62a>
     fbe:	80 e2       	ldi	r24, 0x20	; 32
     fc0:	37 fd       	sbrc	r19, 7
     fc2:	8d e2       	ldi	r24, 0x2D	; 45
     fc4:	b6 01       	movw	r22, r12
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <fputc>
     fcc:	e1 16       	cp	r14, r17
     fce:	38 f4       	brcc	.+14     	; 0xfde <vfprintf+0x648>
     fd0:	b6 01       	movw	r22, r12
     fd2:	80 e3       	ldi	r24, 0x30	; 48
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <fputc>
     fda:	11 50       	subi	r17, 0x01	; 1
     fdc:	f7 cf       	rjmp	.-18     	; 0xfcc <vfprintf+0x636>
     fde:	ea 94       	dec	r14
     fe0:	f3 01       	movw	r30, r6
     fe2:	ee 0d       	add	r30, r14
     fe4:	f1 1d       	adc	r31, r1
     fe6:	80 81       	ld	r24, Z
     fe8:	b6 01       	movw	r22, r12
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <fputc>
     ff0:	e1 10       	cpse	r14, r1
     ff2:	f5 cf       	rjmp	.-22     	; 0xfde <vfprintf+0x648>
     ff4:	14 c0       	rjmp	.+40     	; 0x101e <vfprintf+0x688>
     ff6:	f4 e0       	ldi	r31, 0x04	; 4
     ff8:	ff 15       	cp	r31, r15
     ffa:	58 f5       	brcc	.+86     	; 0x1052 <vfprintf+0x6bc>
     ffc:	84 e0       	ldi	r24, 0x04	; 4
     ffe:	f8 1a       	sub	r15, r24
    1000:	33 fe       	sbrs	r3, 3
    1002:	1e c0       	rjmp	.+60     	; 0x1040 <vfprintf+0x6aa>
    1004:	21 10       	cpse	r2, r1
    1006:	26 c0       	rjmp	.+76     	; 0x1054 <vfprintf+0x6be>
    1008:	03 ff       	sbrs	r16, 3
    100a:	2a c0       	rjmp	.+84     	; 0x1060 <vfprintf+0x6ca>
    100c:	06 e9       	ldi	r16, 0x96	; 150
    100e:	10 e0       	ldi	r17, 0x00	; 0
    1010:	f3 2d       	mov	r31, r3
    1012:	f0 71       	andi	r31, 0x10	; 16
    1014:	3f 2e       	mov	r3, r31
    1016:	f8 01       	movw	r30, r16
    1018:	84 91       	lpm	r24, Z
    101a:	81 11       	cpse	r24, r1
    101c:	24 c0       	rjmp	.+72     	; 0x1066 <vfprintf+0x6d0>
    101e:	ff 20       	and	r15, r15
    1020:	09 f4       	brne	.+2      	; 0x1024 <vfprintf+0x68e>
    1022:	e5 cc       	rjmp	.-1590   	; 0x9ee <vfprintf+0x58>
    1024:	b6 01       	movw	r22, r12
    1026:	80 e2       	ldi	r24, 0x20	; 32
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <fputc>
    102e:	fa 94       	dec	r15
    1030:	f6 cf       	rjmp	.-20     	; 0x101e <vfprintf+0x688>
    1032:	f6 01       	movw	r30, r12
    1034:	86 81       	ldd	r24, Z+6	; 0x06
    1036:	97 81       	ldd	r25, Z+7	; 0x07
    1038:	26 c0       	rjmp	.+76     	; 0x1086 <vfprintf+0x6f0>
    103a:	8f ef       	ldi	r24, 0xFF	; 255
    103c:	9f ef       	ldi	r25, 0xFF	; 255
    103e:	23 c0       	rjmp	.+70     	; 0x1086 <vfprintf+0x6f0>
    1040:	b6 01       	movw	r22, r12
    1042:	80 e2       	ldi	r24, 0x20	; 32
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <fputc>
    104a:	fa 94       	dec	r15
    104c:	f1 10       	cpse	r15, r1
    104e:	f8 cf       	rjmp	.-16     	; 0x1040 <vfprintf+0x6aa>
    1050:	d9 cf       	rjmp	.-78     	; 0x1004 <vfprintf+0x66e>
    1052:	f1 2c       	mov	r15, r1
    1054:	b6 01       	movw	r22, r12
    1056:	82 2d       	mov	r24, r2
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <fputc>
    105e:	d4 cf       	rjmp	.-88     	; 0x1008 <vfprintf+0x672>
    1060:	0a e9       	ldi	r16, 0x9A	; 154
    1062:	10 e0       	ldi	r17, 0x00	; 0
    1064:	d5 cf       	rjmp	.-86     	; 0x1010 <vfprintf+0x67a>
    1066:	31 10       	cpse	r3, r1
    1068:	80 52       	subi	r24, 0x20	; 32
    106a:	b6 01       	movw	r22, r12
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <fputc>
    1072:	0f 5f       	subi	r16, 0xFF	; 255
    1074:	1f 4f       	sbci	r17, 0xFF	; 255
    1076:	cf cf       	rjmp	.-98     	; 0x1016 <vfprintf+0x680>
    1078:	23 e0       	ldi	r18, 0x03	; 3
    107a:	2f 15       	cp	r18, r15
    107c:	10 f4       	brcc	.+4      	; 0x1082 <vfprintf+0x6ec>
    107e:	83 e0       	ldi	r24, 0x03	; 3
    1080:	be cf       	rjmp	.-132    	; 0xffe <vfprintf+0x668>
    1082:	f1 2c       	mov	r15, r1
    1084:	c1 cf       	rjmp	.-126    	; 0x1008 <vfprintf+0x672>
    1086:	63 96       	adiw	r28, 0x13	; 19
    1088:	e2 e1       	ldi	r30, 0x12	; 18
    108a:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <__epilogue_restores__>

0000108e <__subsf3>:
    108e:	50 58       	subi	r21, 0x80	; 128

00001090 <__addsf3>:
    1090:	bb 27       	eor	r27, r27
    1092:	aa 27       	eor	r26, r26
    1094:	0e d0       	rcall	.+28     	; 0x10b2 <__addsf3x>
    1096:	d4 c1       	rjmp	.+936    	; 0x1440 <__fp_round>
    1098:	c5 d1       	rcall	.+906    	; 0x1424 <__fp_pscA>
    109a:	30 f0       	brcs	.+12     	; 0x10a8 <__addsf3+0x18>
    109c:	ca d1       	rcall	.+916    	; 0x1432 <__fp_pscB>
    109e:	20 f0       	brcs	.+8      	; 0x10a8 <__addsf3+0x18>
    10a0:	31 f4       	brne	.+12     	; 0x10ae <__addsf3+0x1e>
    10a2:	9f 3f       	cpi	r25, 0xFF	; 255
    10a4:	11 f4       	brne	.+4      	; 0x10aa <__addsf3+0x1a>
    10a6:	1e f4       	brtc	.+6      	; 0x10ae <__addsf3+0x1e>
    10a8:	95 c1       	rjmp	.+810    	; 0x13d4 <__fp_nan>
    10aa:	0e f4       	brtc	.+2      	; 0x10ae <__addsf3+0x1e>
    10ac:	e0 95       	com	r30
    10ae:	e7 fb       	bst	r30, 7
    10b0:	8b c1       	rjmp	.+790    	; 0x13c8 <__fp_inf>

000010b2 <__addsf3x>:
    10b2:	e9 2f       	mov	r30, r25
    10b4:	d6 d1       	rcall	.+940    	; 0x1462 <__fp_split3>
    10b6:	80 f3       	brcs	.-32     	; 0x1098 <__addsf3+0x8>
    10b8:	ba 17       	cp	r27, r26
    10ba:	62 07       	cpc	r22, r18
    10bc:	73 07       	cpc	r23, r19
    10be:	84 07       	cpc	r24, r20
    10c0:	95 07       	cpc	r25, r21
    10c2:	18 f0       	brcs	.+6      	; 0x10ca <__addsf3x+0x18>
    10c4:	71 f4       	brne	.+28     	; 0x10e2 <__addsf3x+0x30>
    10c6:	9e f5       	brtc	.+102    	; 0x112e <__addsf3x+0x7c>
    10c8:	ee c1       	rjmp	.+988    	; 0x14a6 <__fp_zero>
    10ca:	0e f4       	brtc	.+2      	; 0x10ce <__addsf3x+0x1c>
    10cc:	e0 95       	com	r30
    10ce:	0b 2e       	mov	r0, r27
    10d0:	ba 2f       	mov	r27, r26
    10d2:	a0 2d       	mov	r26, r0
    10d4:	0b 01       	movw	r0, r22
    10d6:	b9 01       	movw	r22, r18
    10d8:	90 01       	movw	r18, r0
    10da:	0c 01       	movw	r0, r24
    10dc:	ca 01       	movw	r24, r20
    10de:	a0 01       	movw	r20, r0
    10e0:	11 24       	eor	r1, r1
    10e2:	ff 27       	eor	r31, r31
    10e4:	59 1b       	sub	r21, r25
    10e6:	99 f0       	breq	.+38     	; 0x110e <__addsf3x+0x5c>
    10e8:	59 3f       	cpi	r21, 0xF9	; 249
    10ea:	50 f4       	brcc	.+20     	; 0x1100 <__addsf3x+0x4e>
    10ec:	50 3e       	cpi	r21, 0xE0	; 224
    10ee:	68 f1       	brcs	.+90     	; 0x114a <__addsf3x+0x98>
    10f0:	1a 16       	cp	r1, r26
    10f2:	f0 40       	sbci	r31, 0x00	; 0
    10f4:	a2 2f       	mov	r26, r18
    10f6:	23 2f       	mov	r18, r19
    10f8:	34 2f       	mov	r19, r20
    10fa:	44 27       	eor	r20, r20
    10fc:	58 5f       	subi	r21, 0xF8	; 248
    10fe:	f3 cf       	rjmp	.-26     	; 0x10e6 <__addsf3x+0x34>
    1100:	46 95       	lsr	r20
    1102:	37 95       	ror	r19
    1104:	27 95       	ror	r18
    1106:	a7 95       	ror	r26
    1108:	f0 40       	sbci	r31, 0x00	; 0
    110a:	53 95       	inc	r21
    110c:	c9 f7       	brne	.-14     	; 0x1100 <__addsf3x+0x4e>
    110e:	7e f4       	brtc	.+30     	; 0x112e <__addsf3x+0x7c>
    1110:	1f 16       	cp	r1, r31
    1112:	ba 0b       	sbc	r27, r26
    1114:	62 0b       	sbc	r22, r18
    1116:	73 0b       	sbc	r23, r19
    1118:	84 0b       	sbc	r24, r20
    111a:	ba f0       	brmi	.+46     	; 0x114a <__addsf3x+0x98>
    111c:	91 50       	subi	r25, 0x01	; 1
    111e:	a1 f0       	breq	.+40     	; 0x1148 <__addsf3x+0x96>
    1120:	ff 0f       	add	r31, r31
    1122:	bb 1f       	adc	r27, r27
    1124:	66 1f       	adc	r22, r22
    1126:	77 1f       	adc	r23, r23
    1128:	88 1f       	adc	r24, r24
    112a:	c2 f7       	brpl	.-16     	; 0x111c <__addsf3x+0x6a>
    112c:	0e c0       	rjmp	.+28     	; 0x114a <__addsf3x+0x98>
    112e:	ba 0f       	add	r27, r26
    1130:	62 1f       	adc	r22, r18
    1132:	73 1f       	adc	r23, r19
    1134:	84 1f       	adc	r24, r20
    1136:	48 f4       	brcc	.+18     	; 0x114a <__addsf3x+0x98>
    1138:	87 95       	ror	r24
    113a:	77 95       	ror	r23
    113c:	67 95       	ror	r22
    113e:	b7 95       	ror	r27
    1140:	f7 95       	ror	r31
    1142:	9e 3f       	cpi	r25, 0xFE	; 254
    1144:	08 f0       	brcs	.+2      	; 0x1148 <__addsf3x+0x96>
    1146:	b3 cf       	rjmp	.-154    	; 0x10ae <__addsf3+0x1e>
    1148:	93 95       	inc	r25
    114a:	88 0f       	add	r24, r24
    114c:	08 f0       	brcs	.+2      	; 0x1150 <__addsf3x+0x9e>
    114e:	99 27       	eor	r25, r25
    1150:	ee 0f       	add	r30, r30
    1152:	97 95       	ror	r25
    1154:	87 95       	ror	r24
    1156:	08 95       	ret
    1158:	65 d1       	rcall	.+714    	; 0x1424 <__fp_pscA>
    115a:	58 f0       	brcs	.+22     	; 0x1172 <__addsf3x+0xc0>
    115c:	80 e8       	ldi	r24, 0x80	; 128
    115e:	91 e0       	ldi	r25, 0x01	; 1
    1160:	09 f4       	brne	.+2      	; 0x1164 <__addsf3x+0xb2>
    1162:	9e ef       	ldi	r25, 0xFE	; 254
    1164:	66 d1       	rcall	.+716    	; 0x1432 <__fp_pscB>
    1166:	28 f0       	brcs	.+10     	; 0x1172 <__addsf3x+0xc0>
    1168:	40 e8       	ldi	r20, 0x80	; 128
    116a:	51 e0       	ldi	r21, 0x01	; 1
    116c:	59 f4       	brne	.+22     	; 0x1184 <atan2+0xe>
    116e:	5e ef       	ldi	r21, 0xFE	; 254
    1170:	09 c0       	rjmp	.+18     	; 0x1184 <atan2+0xe>
    1172:	30 c1       	rjmp	.+608    	; 0x13d4 <__fp_nan>
    1174:	98 c1       	rjmp	.+816    	; 0x14a6 <__fp_zero>

00001176 <atan2>:
    1176:	e9 2f       	mov	r30, r25
    1178:	e0 78       	andi	r30, 0x80	; 128
    117a:	73 d1       	rcall	.+742    	; 0x1462 <__fp_split3>
    117c:	68 f3       	brcs	.-38     	; 0x1158 <__addsf3x+0xa6>
    117e:	09 2e       	mov	r0, r25
    1180:	05 2a       	or	r0, r21
    1182:	c1 f3       	breq	.-16     	; 0x1174 <__addsf3x+0xc2>
    1184:	26 17       	cp	r18, r22
    1186:	37 07       	cpc	r19, r23
    1188:	48 07       	cpc	r20, r24
    118a:	59 07       	cpc	r21, r25
    118c:	38 f0       	brcs	.+14     	; 0x119c <atan2+0x26>
    118e:	0e 2e       	mov	r0, r30
    1190:	07 f8       	bld	r0, 7
    1192:	e0 25       	eor	r30, r0
    1194:	69 f0       	breq	.+26     	; 0x11b0 <atan2+0x3a>
    1196:	e0 25       	eor	r30, r0
    1198:	e0 64       	ori	r30, 0x40	; 64
    119a:	0a c0       	rjmp	.+20     	; 0x11b0 <atan2+0x3a>
    119c:	ef 63       	ori	r30, 0x3F	; 63
    119e:	07 f8       	bld	r0, 7
    11a0:	00 94       	com	r0
    11a2:	07 fa       	bst	r0, 7
    11a4:	db 01       	movw	r26, r22
    11a6:	b9 01       	movw	r22, r18
    11a8:	9d 01       	movw	r18, r26
    11aa:	dc 01       	movw	r26, r24
    11ac:	ca 01       	movw	r24, r20
    11ae:	ad 01       	movw	r20, r26
    11b0:	ef 93       	push	r30
    11b2:	43 d0       	rcall	.+134    	; 0x123a <__divsf3_pse>
    11b4:	45 d1       	rcall	.+650    	; 0x1440 <__fp_round>
    11b6:	0a d0       	rcall	.+20     	; 0x11cc <atan>
    11b8:	5f 91       	pop	r21
    11ba:	55 23       	and	r21, r21
    11bc:	31 f0       	breq	.+12     	; 0x11ca <atan2+0x54>
    11be:	2b ed       	ldi	r18, 0xDB	; 219
    11c0:	3f e0       	ldi	r19, 0x0F	; 15
    11c2:	49 e4       	ldi	r20, 0x49	; 73
    11c4:	50 fd       	sbrc	r21, 0
    11c6:	49 ec       	ldi	r20, 0xC9	; 201
    11c8:	63 cf       	rjmp	.-314    	; 0x1090 <__addsf3>
    11ca:	08 95       	ret

000011cc <atan>:
    11cc:	df 93       	push	r29
    11ce:	dd 27       	eor	r29, r29
    11d0:	b9 2f       	mov	r27, r25
    11d2:	bf 77       	andi	r27, 0x7F	; 127
    11d4:	40 e8       	ldi	r20, 0x80	; 128
    11d6:	5f e3       	ldi	r21, 0x3F	; 63
    11d8:	16 16       	cp	r1, r22
    11da:	17 06       	cpc	r1, r23
    11dc:	48 07       	cpc	r20, r24
    11de:	5b 07       	cpc	r21, r27
    11e0:	10 f4       	brcc	.+4      	; 0x11e6 <atan+0x1a>
    11e2:	d9 2f       	mov	r29, r25
    11e4:	67 d1       	rcall	.+718    	; 0x14b4 <inverse>
    11e6:	9f 93       	push	r25
    11e8:	8f 93       	push	r24
    11ea:	7f 93       	push	r23
    11ec:	6f 93       	push	r22
    11ee:	cc d1       	rcall	.+920    	; 0x1588 <square>
    11f0:	e8 e6       	ldi	r30, 0x68	; 104
    11f2:	f0 e0       	ldi	r31, 0x00	; 0
    11f4:	f2 d0       	rcall	.+484    	; 0x13da <__fp_powser>
    11f6:	24 d1       	rcall	.+584    	; 0x1440 <__fp_round>
    11f8:	2f 91       	pop	r18
    11fa:	3f 91       	pop	r19
    11fc:	4f 91       	pop	r20
    11fe:	5f 91       	pop	r21
    1200:	6c d1       	rcall	.+728    	; 0x14da <__mulsf3x>
    1202:	dd 23       	and	r29, r29
    1204:	49 f0       	breq	.+18     	; 0x1218 <atan+0x4c>
    1206:	90 58       	subi	r25, 0x80	; 128
    1208:	a2 ea       	ldi	r26, 0xA2	; 162
    120a:	2a ed       	ldi	r18, 0xDA	; 218
    120c:	3f e0       	ldi	r19, 0x0F	; 15
    120e:	49 ec       	ldi	r20, 0xC9	; 201
    1210:	5f e3       	ldi	r21, 0x3F	; 63
    1212:	d0 78       	andi	r29, 0x80	; 128
    1214:	5d 27       	eor	r21, r29
    1216:	4d df       	rcall	.-358    	; 0x10b2 <__addsf3x>
    1218:	df 91       	pop	r29
    121a:	12 c1       	rjmp	.+548    	; 0x1440 <__fp_round>

0000121c <__divsf3>:
    121c:	0c d0       	rcall	.+24     	; 0x1236 <__divsf3x>
    121e:	10 c1       	rjmp	.+544    	; 0x1440 <__fp_round>
    1220:	08 d1       	rcall	.+528    	; 0x1432 <__fp_pscB>
    1222:	40 f0       	brcs	.+16     	; 0x1234 <__divsf3+0x18>
    1224:	ff d0       	rcall	.+510    	; 0x1424 <__fp_pscA>
    1226:	30 f0       	brcs	.+12     	; 0x1234 <__divsf3+0x18>
    1228:	21 f4       	brne	.+8      	; 0x1232 <__divsf3+0x16>
    122a:	5f 3f       	cpi	r21, 0xFF	; 255
    122c:	19 f0       	breq	.+6      	; 0x1234 <__divsf3+0x18>
    122e:	cc c0       	rjmp	.+408    	; 0x13c8 <__fp_inf>
    1230:	51 11       	cpse	r21, r1
    1232:	3a c1       	rjmp	.+628    	; 0x14a8 <__fp_szero>
    1234:	cf c0       	rjmp	.+414    	; 0x13d4 <__fp_nan>

00001236 <__divsf3x>:
    1236:	15 d1       	rcall	.+554    	; 0x1462 <__fp_split3>
    1238:	98 f3       	brcs	.-26     	; 0x1220 <__divsf3+0x4>

0000123a <__divsf3_pse>:
    123a:	99 23       	and	r25, r25
    123c:	c9 f3       	breq	.-14     	; 0x1230 <__divsf3+0x14>
    123e:	55 23       	and	r21, r21
    1240:	b1 f3       	breq	.-20     	; 0x122e <__divsf3+0x12>
    1242:	95 1b       	sub	r25, r21
    1244:	55 0b       	sbc	r21, r21
    1246:	bb 27       	eor	r27, r27
    1248:	aa 27       	eor	r26, r26
    124a:	62 17       	cp	r22, r18
    124c:	73 07       	cpc	r23, r19
    124e:	84 07       	cpc	r24, r20
    1250:	38 f0       	brcs	.+14     	; 0x1260 <__divsf3_pse+0x26>
    1252:	9f 5f       	subi	r25, 0xFF	; 255
    1254:	5f 4f       	sbci	r21, 0xFF	; 255
    1256:	22 0f       	add	r18, r18
    1258:	33 1f       	adc	r19, r19
    125a:	44 1f       	adc	r20, r20
    125c:	aa 1f       	adc	r26, r26
    125e:	a9 f3       	breq	.-22     	; 0x124a <__divsf3_pse+0x10>
    1260:	33 d0       	rcall	.+102    	; 0x12c8 <__divsf3_pse+0x8e>
    1262:	0e 2e       	mov	r0, r30
    1264:	3a f0       	brmi	.+14     	; 0x1274 <__divsf3_pse+0x3a>
    1266:	e0 e8       	ldi	r30, 0x80	; 128
    1268:	30 d0       	rcall	.+96     	; 0x12ca <__divsf3_pse+0x90>
    126a:	91 50       	subi	r25, 0x01	; 1
    126c:	50 40       	sbci	r21, 0x00	; 0
    126e:	e6 95       	lsr	r30
    1270:	00 1c       	adc	r0, r0
    1272:	ca f7       	brpl	.-14     	; 0x1266 <__divsf3_pse+0x2c>
    1274:	29 d0       	rcall	.+82     	; 0x12c8 <__divsf3_pse+0x8e>
    1276:	fe 2f       	mov	r31, r30
    1278:	27 d0       	rcall	.+78     	; 0x12c8 <__divsf3_pse+0x8e>
    127a:	66 0f       	add	r22, r22
    127c:	77 1f       	adc	r23, r23
    127e:	88 1f       	adc	r24, r24
    1280:	bb 1f       	adc	r27, r27
    1282:	26 17       	cp	r18, r22
    1284:	37 07       	cpc	r19, r23
    1286:	48 07       	cpc	r20, r24
    1288:	ab 07       	cpc	r26, r27
    128a:	b0 e8       	ldi	r27, 0x80	; 128
    128c:	09 f0       	breq	.+2      	; 0x1290 <__divsf3_pse+0x56>
    128e:	bb 0b       	sbc	r27, r27
    1290:	80 2d       	mov	r24, r0
    1292:	bf 01       	movw	r22, r30
    1294:	ff 27       	eor	r31, r31
    1296:	93 58       	subi	r25, 0x83	; 131
    1298:	5f 4f       	sbci	r21, 0xFF	; 255
    129a:	2a f0       	brmi	.+10     	; 0x12a6 <__divsf3_pse+0x6c>
    129c:	9e 3f       	cpi	r25, 0xFE	; 254
    129e:	51 05       	cpc	r21, r1
    12a0:	68 f0       	brcs	.+26     	; 0x12bc <__divsf3_pse+0x82>
    12a2:	92 c0       	rjmp	.+292    	; 0x13c8 <__fp_inf>
    12a4:	01 c1       	rjmp	.+514    	; 0x14a8 <__fp_szero>
    12a6:	5f 3f       	cpi	r21, 0xFF	; 255
    12a8:	ec f3       	brlt	.-6      	; 0x12a4 <__divsf3_pse+0x6a>
    12aa:	98 3e       	cpi	r25, 0xE8	; 232
    12ac:	dc f3       	brlt	.-10     	; 0x12a4 <__divsf3_pse+0x6a>
    12ae:	86 95       	lsr	r24
    12b0:	77 95       	ror	r23
    12b2:	67 95       	ror	r22
    12b4:	b7 95       	ror	r27
    12b6:	f7 95       	ror	r31
    12b8:	9f 5f       	subi	r25, 0xFF	; 255
    12ba:	c9 f7       	brne	.-14     	; 0x12ae <__divsf3_pse+0x74>
    12bc:	88 0f       	add	r24, r24
    12be:	91 1d       	adc	r25, r1
    12c0:	96 95       	lsr	r25
    12c2:	87 95       	ror	r24
    12c4:	97 f9       	bld	r25, 7
    12c6:	08 95       	ret
    12c8:	e1 e0       	ldi	r30, 0x01	; 1
    12ca:	66 0f       	add	r22, r22
    12cc:	77 1f       	adc	r23, r23
    12ce:	88 1f       	adc	r24, r24
    12d0:	bb 1f       	adc	r27, r27
    12d2:	62 17       	cp	r22, r18
    12d4:	73 07       	cpc	r23, r19
    12d6:	84 07       	cpc	r24, r20
    12d8:	ba 07       	cpc	r27, r26
    12da:	20 f0       	brcs	.+8      	; 0x12e4 <__divsf3_pse+0xaa>
    12dc:	62 1b       	sub	r22, r18
    12de:	73 0b       	sbc	r23, r19
    12e0:	84 0b       	sbc	r24, r20
    12e2:	ba 0b       	sbc	r27, r26
    12e4:	ee 1f       	adc	r30, r30
    12e6:	88 f7       	brcc	.-30     	; 0x12ca <__divsf3_pse+0x90>
    12e8:	e0 95       	com	r30
    12ea:	08 95       	ret

000012ec <__fixsfsi>:
    12ec:	04 d0       	rcall	.+8      	; 0x12f6 <__fixunssfsi>
    12ee:	68 94       	set
    12f0:	b1 11       	cpse	r27, r1
    12f2:	da c0       	rjmp	.+436    	; 0x14a8 <__fp_szero>
    12f4:	08 95       	ret

000012f6 <__fixunssfsi>:
    12f6:	bd d0       	rcall	.+378    	; 0x1472 <__fp_splitA>
    12f8:	88 f0       	brcs	.+34     	; 0x131c <__fixunssfsi+0x26>
    12fa:	9f 57       	subi	r25, 0x7F	; 127
    12fc:	90 f0       	brcs	.+36     	; 0x1322 <__fixunssfsi+0x2c>
    12fe:	b9 2f       	mov	r27, r25
    1300:	99 27       	eor	r25, r25
    1302:	b7 51       	subi	r27, 0x17	; 23
    1304:	a0 f0       	brcs	.+40     	; 0x132e <__fixunssfsi+0x38>
    1306:	d1 f0       	breq	.+52     	; 0x133c <__fixunssfsi+0x46>
    1308:	66 0f       	add	r22, r22
    130a:	77 1f       	adc	r23, r23
    130c:	88 1f       	adc	r24, r24
    130e:	99 1f       	adc	r25, r25
    1310:	1a f0       	brmi	.+6      	; 0x1318 <__fixunssfsi+0x22>
    1312:	ba 95       	dec	r27
    1314:	c9 f7       	brne	.-14     	; 0x1308 <__fixunssfsi+0x12>
    1316:	12 c0       	rjmp	.+36     	; 0x133c <__fixunssfsi+0x46>
    1318:	b1 30       	cpi	r27, 0x01	; 1
    131a:	81 f0       	breq	.+32     	; 0x133c <__fixunssfsi+0x46>
    131c:	c4 d0       	rcall	.+392    	; 0x14a6 <__fp_zero>
    131e:	b1 e0       	ldi	r27, 0x01	; 1
    1320:	08 95       	ret
    1322:	c1 c0       	rjmp	.+386    	; 0x14a6 <__fp_zero>
    1324:	67 2f       	mov	r22, r23
    1326:	78 2f       	mov	r23, r24
    1328:	88 27       	eor	r24, r24
    132a:	b8 5f       	subi	r27, 0xF8	; 248
    132c:	39 f0       	breq	.+14     	; 0x133c <__fixunssfsi+0x46>
    132e:	b9 3f       	cpi	r27, 0xF9	; 249
    1330:	cc f3       	brlt	.-14     	; 0x1324 <__fixunssfsi+0x2e>
    1332:	86 95       	lsr	r24
    1334:	77 95       	ror	r23
    1336:	67 95       	ror	r22
    1338:	b3 95       	inc	r27
    133a:	d9 f7       	brne	.-10     	; 0x1332 <__fixunssfsi+0x3c>
    133c:	3e f4       	brtc	.+14     	; 0x134c <__fixunssfsi+0x56>
    133e:	90 95       	com	r25
    1340:	80 95       	com	r24
    1342:	70 95       	com	r23
    1344:	61 95       	neg	r22
    1346:	7f 4f       	sbci	r23, 0xFF	; 255
    1348:	8f 4f       	sbci	r24, 0xFF	; 255
    134a:	9f 4f       	sbci	r25, 0xFF	; 255
    134c:	08 95       	ret

0000134e <__floatunsisf>:
    134e:	e8 94       	clt
    1350:	09 c0       	rjmp	.+18     	; 0x1364 <__floatsisf+0x12>

00001352 <__floatsisf>:
    1352:	97 fb       	bst	r25, 7
    1354:	3e f4       	brtc	.+14     	; 0x1364 <__floatsisf+0x12>
    1356:	90 95       	com	r25
    1358:	80 95       	com	r24
    135a:	70 95       	com	r23
    135c:	61 95       	neg	r22
    135e:	7f 4f       	sbci	r23, 0xFF	; 255
    1360:	8f 4f       	sbci	r24, 0xFF	; 255
    1362:	9f 4f       	sbci	r25, 0xFF	; 255
    1364:	99 23       	and	r25, r25
    1366:	a9 f0       	breq	.+42     	; 0x1392 <__floatsisf+0x40>
    1368:	f9 2f       	mov	r31, r25
    136a:	96 e9       	ldi	r25, 0x96	; 150
    136c:	bb 27       	eor	r27, r27
    136e:	93 95       	inc	r25
    1370:	f6 95       	lsr	r31
    1372:	87 95       	ror	r24
    1374:	77 95       	ror	r23
    1376:	67 95       	ror	r22
    1378:	b7 95       	ror	r27
    137a:	f1 11       	cpse	r31, r1
    137c:	f8 cf       	rjmp	.-16     	; 0x136e <__floatsisf+0x1c>
    137e:	fa f4       	brpl	.+62     	; 0x13be <__floatsisf+0x6c>
    1380:	bb 0f       	add	r27, r27
    1382:	11 f4       	brne	.+4      	; 0x1388 <__floatsisf+0x36>
    1384:	60 ff       	sbrs	r22, 0
    1386:	1b c0       	rjmp	.+54     	; 0x13be <__floatsisf+0x6c>
    1388:	6f 5f       	subi	r22, 0xFF	; 255
    138a:	7f 4f       	sbci	r23, 0xFF	; 255
    138c:	8f 4f       	sbci	r24, 0xFF	; 255
    138e:	9f 4f       	sbci	r25, 0xFF	; 255
    1390:	16 c0       	rjmp	.+44     	; 0x13be <__floatsisf+0x6c>
    1392:	88 23       	and	r24, r24
    1394:	11 f0       	breq	.+4      	; 0x139a <__floatsisf+0x48>
    1396:	96 e9       	ldi	r25, 0x96	; 150
    1398:	11 c0       	rjmp	.+34     	; 0x13bc <__floatsisf+0x6a>
    139a:	77 23       	and	r23, r23
    139c:	21 f0       	breq	.+8      	; 0x13a6 <__floatsisf+0x54>
    139e:	9e e8       	ldi	r25, 0x8E	; 142
    13a0:	87 2f       	mov	r24, r23
    13a2:	76 2f       	mov	r23, r22
    13a4:	05 c0       	rjmp	.+10     	; 0x13b0 <__floatsisf+0x5e>
    13a6:	66 23       	and	r22, r22
    13a8:	71 f0       	breq	.+28     	; 0x13c6 <__floatsisf+0x74>
    13aa:	96 e8       	ldi	r25, 0x86	; 134
    13ac:	86 2f       	mov	r24, r22
    13ae:	70 e0       	ldi	r23, 0x00	; 0
    13b0:	60 e0       	ldi	r22, 0x00	; 0
    13b2:	2a f0       	brmi	.+10     	; 0x13be <__floatsisf+0x6c>
    13b4:	9a 95       	dec	r25
    13b6:	66 0f       	add	r22, r22
    13b8:	77 1f       	adc	r23, r23
    13ba:	88 1f       	adc	r24, r24
    13bc:	da f7       	brpl	.-10     	; 0x13b4 <__floatsisf+0x62>
    13be:	88 0f       	add	r24, r24
    13c0:	96 95       	lsr	r25
    13c2:	87 95       	ror	r24
    13c4:	97 f9       	bld	r25, 7
    13c6:	08 95       	ret

000013c8 <__fp_inf>:
    13c8:	97 f9       	bld	r25, 7
    13ca:	9f 67       	ori	r25, 0x7F	; 127
    13cc:	80 e8       	ldi	r24, 0x80	; 128
    13ce:	70 e0       	ldi	r23, 0x00	; 0
    13d0:	60 e0       	ldi	r22, 0x00	; 0
    13d2:	08 95       	ret

000013d4 <__fp_nan>:
    13d4:	9f ef       	ldi	r25, 0xFF	; 255
    13d6:	80 ec       	ldi	r24, 0xC0	; 192
    13d8:	08 95       	ret

000013da <__fp_powser>:
    13da:	df 93       	push	r29
    13dc:	cf 93       	push	r28
    13de:	1f 93       	push	r17
    13e0:	0f 93       	push	r16
    13e2:	ff 92       	push	r15
    13e4:	ef 92       	push	r14
    13e6:	df 92       	push	r13
    13e8:	7b 01       	movw	r14, r22
    13ea:	8c 01       	movw	r16, r24
    13ec:	68 94       	set
    13ee:	05 c0       	rjmp	.+10     	; 0x13fa <__fp_powser+0x20>
    13f0:	da 2e       	mov	r13, r26
    13f2:	ef 01       	movw	r28, r30
    13f4:	72 d0       	rcall	.+228    	; 0x14da <__mulsf3x>
    13f6:	fe 01       	movw	r30, r28
    13f8:	e8 94       	clt
    13fa:	a5 91       	lpm	r26, Z+
    13fc:	25 91       	lpm	r18, Z+
    13fe:	35 91       	lpm	r19, Z+
    1400:	45 91       	lpm	r20, Z+
    1402:	55 91       	lpm	r21, Z+
    1404:	ae f3       	brts	.-22     	; 0x13f0 <__fp_powser+0x16>
    1406:	ef 01       	movw	r28, r30
    1408:	54 de       	rcall	.-856    	; 0x10b2 <__addsf3x>
    140a:	fe 01       	movw	r30, r28
    140c:	97 01       	movw	r18, r14
    140e:	a8 01       	movw	r20, r16
    1410:	da 94       	dec	r13
    1412:	79 f7       	brne	.-34     	; 0x13f2 <__fp_powser+0x18>
    1414:	df 90       	pop	r13
    1416:	ef 90       	pop	r14
    1418:	ff 90       	pop	r15
    141a:	0f 91       	pop	r16
    141c:	1f 91       	pop	r17
    141e:	cf 91       	pop	r28
    1420:	df 91       	pop	r29
    1422:	08 95       	ret

00001424 <__fp_pscA>:
    1424:	00 24       	eor	r0, r0
    1426:	0a 94       	dec	r0
    1428:	16 16       	cp	r1, r22
    142a:	17 06       	cpc	r1, r23
    142c:	18 06       	cpc	r1, r24
    142e:	09 06       	cpc	r0, r25
    1430:	08 95       	ret

00001432 <__fp_pscB>:
    1432:	00 24       	eor	r0, r0
    1434:	0a 94       	dec	r0
    1436:	12 16       	cp	r1, r18
    1438:	13 06       	cpc	r1, r19
    143a:	14 06       	cpc	r1, r20
    143c:	05 06       	cpc	r0, r21
    143e:	08 95       	ret

00001440 <__fp_round>:
    1440:	09 2e       	mov	r0, r25
    1442:	03 94       	inc	r0
    1444:	00 0c       	add	r0, r0
    1446:	11 f4       	brne	.+4      	; 0x144c <__fp_round+0xc>
    1448:	88 23       	and	r24, r24
    144a:	52 f0       	brmi	.+20     	; 0x1460 <__fp_round+0x20>
    144c:	bb 0f       	add	r27, r27
    144e:	40 f4       	brcc	.+16     	; 0x1460 <__fp_round+0x20>
    1450:	bf 2b       	or	r27, r31
    1452:	11 f4       	brne	.+4      	; 0x1458 <__fp_round+0x18>
    1454:	60 ff       	sbrs	r22, 0
    1456:	04 c0       	rjmp	.+8      	; 0x1460 <__fp_round+0x20>
    1458:	6f 5f       	subi	r22, 0xFF	; 255
    145a:	7f 4f       	sbci	r23, 0xFF	; 255
    145c:	8f 4f       	sbci	r24, 0xFF	; 255
    145e:	9f 4f       	sbci	r25, 0xFF	; 255
    1460:	08 95       	ret

00001462 <__fp_split3>:
    1462:	57 fd       	sbrc	r21, 7
    1464:	90 58       	subi	r25, 0x80	; 128
    1466:	44 0f       	add	r20, r20
    1468:	55 1f       	adc	r21, r21
    146a:	59 f0       	breq	.+22     	; 0x1482 <__fp_splitA+0x10>
    146c:	5f 3f       	cpi	r21, 0xFF	; 255
    146e:	71 f0       	breq	.+28     	; 0x148c <__fp_splitA+0x1a>
    1470:	47 95       	ror	r20

00001472 <__fp_splitA>:
    1472:	88 0f       	add	r24, r24
    1474:	97 fb       	bst	r25, 7
    1476:	99 1f       	adc	r25, r25
    1478:	61 f0       	breq	.+24     	; 0x1492 <__fp_splitA+0x20>
    147a:	9f 3f       	cpi	r25, 0xFF	; 255
    147c:	79 f0       	breq	.+30     	; 0x149c <__fp_splitA+0x2a>
    147e:	87 95       	ror	r24
    1480:	08 95       	ret
    1482:	12 16       	cp	r1, r18
    1484:	13 06       	cpc	r1, r19
    1486:	14 06       	cpc	r1, r20
    1488:	55 1f       	adc	r21, r21
    148a:	f2 cf       	rjmp	.-28     	; 0x1470 <__fp_split3+0xe>
    148c:	46 95       	lsr	r20
    148e:	f1 df       	rcall	.-30     	; 0x1472 <__fp_splitA>
    1490:	08 c0       	rjmp	.+16     	; 0x14a2 <__fp_splitA+0x30>
    1492:	16 16       	cp	r1, r22
    1494:	17 06       	cpc	r1, r23
    1496:	18 06       	cpc	r1, r24
    1498:	99 1f       	adc	r25, r25
    149a:	f1 cf       	rjmp	.-30     	; 0x147e <__fp_splitA+0xc>
    149c:	86 95       	lsr	r24
    149e:	71 05       	cpc	r23, r1
    14a0:	61 05       	cpc	r22, r1
    14a2:	08 94       	sec
    14a4:	08 95       	ret

000014a6 <__fp_zero>:
    14a6:	e8 94       	clt

000014a8 <__fp_szero>:
    14a8:	bb 27       	eor	r27, r27
    14aa:	66 27       	eor	r22, r22
    14ac:	77 27       	eor	r23, r23
    14ae:	cb 01       	movw	r24, r22
    14b0:	97 f9       	bld	r25, 7
    14b2:	08 95       	ret

000014b4 <inverse>:
    14b4:	9b 01       	movw	r18, r22
    14b6:	ac 01       	movw	r20, r24
    14b8:	60 e0       	ldi	r22, 0x00	; 0
    14ba:	70 e0       	ldi	r23, 0x00	; 0
    14bc:	80 e8       	ldi	r24, 0x80	; 128
    14be:	9f e3       	ldi	r25, 0x3F	; 63
    14c0:	ad ce       	rjmp	.-678    	; 0x121c <__divsf3>

000014c2 <__mulsf3>:
    14c2:	0b d0       	rcall	.+22     	; 0x14da <__mulsf3x>
    14c4:	bd cf       	rjmp	.-134    	; 0x1440 <__fp_round>
    14c6:	ae df       	rcall	.-164    	; 0x1424 <__fp_pscA>
    14c8:	28 f0       	brcs	.+10     	; 0x14d4 <__mulsf3+0x12>
    14ca:	b3 df       	rcall	.-154    	; 0x1432 <__fp_pscB>
    14cc:	18 f0       	brcs	.+6      	; 0x14d4 <__mulsf3+0x12>
    14ce:	95 23       	and	r25, r21
    14d0:	09 f0       	breq	.+2      	; 0x14d4 <__mulsf3+0x12>
    14d2:	7a cf       	rjmp	.-268    	; 0x13c8 <__fp_inf>
    14d4:	7f cf       	rjmp	.-258    	; 0x13d4 <__fp_nan>
    14d6:	11 24       	eor	r1, r1
    14d8:	e7 cf       	rjmp	.-50     	; 0x14a8 <__fp_szero>

000014da <__mulsf3x>:
    14da:	c3 df       	rcall	.-122    	; 0x1462 <__fp_split3>
    14dc:	a0 f3       	brcs	.-24     	; 0x14c6 <__mulsf3+0x4>

000014de <__mulsf3_pse>:
    14de:	95 9f       	mul	r25, r21
    14e0:	d1 f3       	breq	.-12     	; 0x14d6 <__mulsf3+0x14>
    14e2:	95 0f       	add	r25, r21
    14e4:	50 e0       	ldi	r21, 0x00	; 0
    14e6:	55 1f       	adc	r21, r21
    14e8:	62 9f       	mul	r22, r18
    14ea:	f0 01       	movw	r30, r0
    14ec:	72 9f       	mul	r23, r18
    14ee:	bb 27       	eor	r27, r27
    14f0:	f0 0d       	add	r31, r0
    14f2:	b1 1d       	adc	r27, r1
    14f4:	63 9f       	mul	r22, r19
    14f6:	aa 27       	eor	r26, r26
    14f8:	f0 0d       	add	r31, r0
    14fa:	b1 1d       	adc	r27, r1
    14fc:	aa 1f       	adc	r26, r26
    14fe:	64 9f       	mul	r22, r20
    1500:	66 27       	eor	r22, r22
    1502:	b0 0d       	add	r27, r0
    1504:	a1 1d       	adc	r26, r1
    1506:	66 1f       	adc	r22, r22
    1508:	82 9f       	mul	r24, r18
    150a:	22 27       	eor	r18, r18
    150c:	b0 0d       	add	r27, r0
    150e:	a1 1d       	adc	r26, r1
    1510:	62 1f       	adc	r22, r18
    1512:	73 9f       	mul	r23, r19
    1514:	b0 0d       	add	r27, r0
    1516:	a1 1d       	adc	r26, r1
    1518:	62 1f       	adc	r22, r18
    151a:	83 9f       	mul	r24, r19
    151c:	a0 0d       	add	r26, r0
    151e:	61 1d       	adc	r22, r1
    1520:	22 1f       	adc	r18, r18
    1522:	74 9f       	mul	r23, r20
    1524:	33 27       	eor	r19, r19
    1526:	a0 0d       	add	r26, r0
    1528:	61 1d       	adc	r22, r1
    152a:	23 1f       	adc	r18, r19
    152c:	84 9f       	mul	r24, r20
    152e:	60 0d       	add	r22, r0
    1530:	21 1d       	adc	r18, r1
    1532:	82 2f       	mov	r24, r18
    1534:	76 2f       	mov	r23, r22
    1536:	6a 2f       	mov	r22, r26
    1538:	11 24       	eor	r1, r1
    153a:	9f 57       	subi	r25, 0x7F	; 127
    153c:	50 40       	sbci	r21, 0x00	; 0
    153e:	8a f0       	brmi	.+34     	; 0x1562 <__mulsf3_pse+0x84>
    1540:	e1 f0       	breq	.+56     	; 0x157a <__mulsf3_pse+0x9c>
    1542:	88 23       	and	r24, r24
    1544:	4a f0       	brmi	.+18     	; 0x1558 <__mulsf3_pse+0x7a>
    1546:	ee 0f       	add	r30, r30
    1548:	ff 1f       	adc	r31, r31
    154a:	bb 1f       	adc	r27, r27
    154c:	66 1f       	adc	r22, r22
    154e:	77 1f       	adc	r23, r23
    1550:	88 1f       	adc	r24, r24
    1552:	91 50       	subi	r25, 0x01	; 1
    1554:	50 40       	sbci	r21, 0x00	; 0
    1556:	a9 f7       	brne	.-22     	; 0x1542 <__mulsf3_pse+0x64>
    1558:	9e 3f       	cpi	r25, 0xFE	; 254
    155a:	51 05       	cpc	r21, r1
    155c:	70 f0       	brcs	.+28     	; 0x157a <__mulsf3_pse+0x9c>
    155e:	34 cf       	rjmp	.-408    	; 0x13c8 <__fp_inf>
    1560:	a3 cf       	rjmp	.-186    	; 0x14a8 <__fp_szero>
    1562:	5f 3f       	cpi	r21, 0xFF	; 255
    1564:	ec f3       	brlt	.-6      	; 0x1560 <__mulsf3_pse+0x82>
    1566:	98 3e       	cpi	r25, 0xE8	; 232
    1568:	dc f3       	brlt	.-10     	; 0x1560 <__mulsf3_pse+0x82>
    156a:	86 95       	lsr	r24
    156c:	77 95       	ror	r23
    156e:	67 95       	ror	r22
    1570:	b7 95       	ror	r27
    1572:	f7 95       	ror	r31
    1574:	e7 95       	ror	r30
    1576:	9f 5f       	subi	r25, 0xFF	; 255
    1578:	c1 f7       	brne	.-16     	; 0x156a <__mulsf3_pse+0x8c>
    157a:	fe 2b       	or	r31, r30
    157c:	88 0f       	add	r24, r24
    157e:	91 1d       	adc	r25, r1
    1580:	96 95       	lsr	r25
    1582:	87 95       	ror	r24
    1584:	97 f9       	bld	r25, 7
    1586:	08 95       	ret

00001588 <square>:
    1588:	9b 01       	movw	r18, r22
    158a:	ac 01       	movw	r20, r24
    158c:	9a cf       	rjmp	.-204    	; 0x14c2 <__mulsf3>

0000158e <__prologue_saves__>:
    158e:	2f 92       	push	r2
    1590:	3f 92       	push	r3
    1592:	4f 92       	push	r4
    1594:	5f 92       	push	r5
    1596:	6f 92       	push	r6
    1598:	7f 92       	push	r7
    159a:	8f 92       	push	r8
    159c:	9f 92       	push	r9
    159e:	af 92       	push	r10
    15a0:	bf 92       	push	r11
    15a2:	cf 92       	push	r12
    15a4:	df 92       	push	r13
    15a6:	ef 92       	push	r14
    15a8:	ff 92       	push	r15
    15aa:	0f 93       	push	r16
    15ac:	1f 93       	push	r17
    15ae:	cf 93       	push	r28
    15b0:	df 93       	push	r29
    15b2:	cd b7       	in	r28, 0x3d	; 61
    15b4:	de b7       	in	r29, 0x3e	; 62
    15b6:	ca 1b       	sub	r28, r26
    15b8:	db 0b       	sbc	r29, r27
    15ba:	0f b6       	in	r0, 0x3f	; 63
    15bc:	f8 94       	cli
    15be:	de bf       	out	0x3e, r29	; 62
    15c0:	0f be       	out	0x3f, r0	; 63
    15c2:	cd bf       	out	0x3d, r28	; 61
    15c4:	09 94       	ijmp

000015c6 <__epilogue_restores__>:
    15c6:	2a 88       	ldd	r2, Y+18	; 0x12
    15c8:	39 88       	ldd	r3, Y+17	; 0x11
    15ca:	48 88       	ldd	r4, Y+16	; 0x10
    15cc:	5f 84       	ldd	r5, Y+15	; 0x0f
    15ce:	6e 84       	ldd	r6, Y+14	; 0x0e
    15d0:	7d 84       	ldd	r7, Y+13	; 0x0d
    15d2:	8c 84       	ldd	r8, Y+12	; 0x0c
    15d4:	9b 84       	ldd	r9, Y+11	; 0x0b
    15d6:	aa 84       	ldd	r10, Y+10	; 0x0a
    15d8:	b9 84       	ldd	r11, Y+9	; 0x09
    15da:	c8 84       	ldd	r12, Y+8	; 0x08
    15dc:	df 80       	ldd	r13, Y+7	; 0x07
    15de:	ee 80       	ldd	r14, Y+6	; 0x06
    15e0:	fd 80       	ldd	r15, Y+5	; 0x05
    15e2:	0c 81       	ldd	r16, Y+4	; 0x04
    15e4:	1b 81       	ldd	r17, Y+3	; 0x03
    15e6:	aa 81       	ldd	r26, Y+2	; 0x02
    15e8:	b9 81       	ldd	r27, Y+1	; 0x01
    15ea:	ce 0f       	add	r28, r30
    15ec:	d1 1d       	adc	r29, r1
    15ee:	0f b6       	in	r0, 0x3f	; 63
    15f0:	f8 94       	cli
    15f2:	de bf       	out	0x3e, r29	; 62
    15f4:	0f be       	out	0x3f, r0	; 63
    15f6:	cd bf       	out	0x3d, r28	; 61
    15f8:	ed 01       	movw	r28, r26
    15fa:	08 95       	ret

000015fc <__ftoa_engine>:
    15fc:	28 30       	cpi	r18, 0x08	; 8
    15fe:	08 f0       	brcs	.+2      	; 0x1602 <__ftoa_engine+0x6>
    1600:	27 e0       	ldi	r18, 0x07	; 7
    1602:	33 27       	eor	r19, r19
    1604:	da 01       	movw	r26, r20
    1606:	99 0f       	add	r25, r25
    1608:	31 1d       	adc	r19, r1
    160a:	87 fd       	sbrc	r24, 7
    160c:	91 60       	ori	r25, 0x01	; 1
    160e:	00 96       	adiw	r24, 0x00	; 0
    1610:	61 05       	cpc	r22, r1
    1612:	71 05       	cpc	r23, r1
    1614:	39 f4       	brne	.+14     	; 0x1624 <__ftoa_engine+0x28>
    1616:	32 60       	ori	r19, 0x02	; 2
    1618:	2e 5f       	subi	r18, 0xFE	; 254
    161a:	3d 93       	st	X+, r19
    161c:	30 e3       	ldi	r19, 0x30	; 48
    161e:	2a 95       	dec	r18
    1620:	e1 f7       	brne	.-8      	; 0x161a <__ftoa_engine+0x1e>
    1622:	08 95       	ret
    1624:	9f 3f       	cpi	r25, 0xFF	; 255
    1626:	30 f0       	brcs	.+12     	; 0x1634 <__ftoa_engine+0x38>
    1628:	80 38       	cpi	r24, 0x80	; 128
    162a:	71 05       	cpc	r23, r1
    162c:	61 05       	cpc	r22, r1
    162e:	09 f0       	breq	.+2      	; 0x1632 <__ftoa_engine+0x36>
    1630:	3c 5f       	subi	r19, 0xFC	; 252
    1632:	3c 5f       	subi	r19, 0xFC	; 252
    1634:	3d 93       	st	X+, r19
    1636:	91 30       	cpi	r25, 0x01	; 1
    1638:	08 f0       	brcs	.+2      	; 0x163c <__ftoa_engine+0x40>
    163a:	80 68       	ori	r24, 0x80	; 128
    163c:	91 1d       	adc	r25, r1
    163e:	df 93       	push	r29
    1640:	cf 93       	push	r28
    1642:	1f 93       	push	r17
    1644:	0f 93       	push	r16
    1646:	ff 92       	push	r15
    1648:	ef 92       	push	r14
    164a:	19 2f       	mov	r17, r25
    164c:	98 7f       	andi	r25, 0xF8	; 248
    164e:	96 95       	lsr	r25
    1650:	e9 2f       	mov	r30, r25
    1652:	96 95       	lsr	r25
    1654:	96 95       	lsr	r25
    1656:	e9 0f       	add	r30, r25
    1658:	ff 27       	eor	r31, r31
    165a:	e8 50       	subi	r30, 0x08	; 8
    165c:	ff 4f       	sbci	r31, 0xFF	; 255
    165e:	99 27       	eor	r25, r25
    1660:	33 27       	eor	r19, r19
    1662:	ee 24       	eor	r14, r14
    1664:	ff 24       	eor	r15, r15
    1666:	a7 01       	movw	r20, r14
    1668:	e7 01       	movw	r28, r14
    166a:	05 90       	lpm	r0, Z+
    166c:	08 94       	sec
    166e:	07 94       	ror	r0
    1670:	28 f4       	brcc	.+10     	; 0x167c <__ftoa_engine+0x80>
    1672:	36 0f       	add	r19, r22
    1674:	e7 1e       	adc	r14, r23
    1676:	f8 1e       	adc	r15, r24
    1678:	49 1f       	adc	r20, r25
    167a:	51 1d       	adc	r21, r1
    167c:	66 0f       	add	r22, r22
    167e:	77 1f       	adc	r23, r23
    1680:	88 1f       	adc	r24, r24
    1682:	99 1f       	adc	r25, r25
    1684:	06 94       	lsr	r0
    1686:	a1 f7       	brne	.-24     	; 0x1670 <__ftoa_engine+0x74>
    1688:	05 90       	lpm	r0, Z+
    168a:	07 94       	ror	r0
    168c:	28 f4       	brcc	.+10     	; 0x1698 <__ftoa_engine+0x9c>
    168e:	e7 0e       	add	r14, r23
    1690:	f8 1e       	adc	r15, r24
    1692:	49 1f       	adc	r20, r25
    1694:	56 1f       	adc	r21, r22
    1696:	c1 1d       	adc	r28, r1
    1698:	77 0f       	add	r23, r23
    169a:	88 1f       	adc	r24, r24
    169c:	99 1f       	adc	r25, r25
    169e:	66 1f       	adc	r22, r22
    16a0:	06 94       	lsr	r0
    16a2:	a1 f7       	brne	.-24     	; 0x168c <__ftoa_engine+0x90>
    16a4:	05 90       	lpm	r0, Z+
    16a6:	07 94       	ror	r0
    16a8:	28 f4       	brcc	.+10     	; 0x16b4 <__ftoa_engine+0xb8>
    16aa:	f8 0e       	add	r15, r24
    16ac:	49 1f       	adc	r20, r25
    16ae:	56 1f       	adc	r21, r22
    16b0:	c7 1f       	adc	r28, r23
    16b2:	d1 1d       	adc	r29, r1
    16b4:	88 0f       	add	r24, r24
    16b6:	99 1f       	adc	r25, r25
    16b8:	66 1f       	adc	r22, r22
    16ba:	77 1f       	adc	r23, r23
    16bc:	06 94       	lsr	r0
    16be:	a1 f7       	brne	.-24     	; 0x16a8 <__ftoa_engine+0xac>
    16c0:	05 90       	lpm	r0, Z+
    16c2:	07 94       	ror	r0
    16c4:	20 f4       	brcc	.+8      	; 0x16ce <__ftoa_engine+0xd2>
    16c6:	49 0f       	add	r20, r25
    16c8:	56 1f       	adc	r21, r22
    16ca:	c7 1f       	adc	r28, r23
    16cc:	d8 1f       	adc	r29, r24
    16ce:	99 0f       	add	r25, r25
    16d0:	66 1f       	adc	r22, r22
    16d2:	77 1f       	adc	r23, r23
    16d4:	88 1f       	adc	r24, r24
    16d6:	06 94       	lsr	r0
    16d8:	a9 f7       	brne	.-22     	; 0x16c4 <__ftoa_engine+0xc8>
    16da:	84 91       	lpm	r24, Z
    16dc:	10 95       	com	r17
    16de:	17 70       	andi	r17, 0x07	; 7
    16e0:	41 f0       	breq	.+16     	; 0x16f2 <__ftoa_engine+0xf6>
    16e2:	d6 95       	lsr	r29
    16e4:	c7 95       	ror	r28
    16e6:	57 95       	ror	r21
    16e8:	47 95       	ror	r20
    16ea:	f7 94       	ror	r15
    16ec:	e7 94       	ror	r14
    16ee:	1a 95       	dec	r17
    16f0:	c1 f7       	brne	.-16     	; 0x16e2 <__ftoa_engine+0xe6>
    16f2:	ee e9       	ldi	r30, 0x9E	; 158
    16f4:	f0 e0       	ldi	r31, 0x00	; 0
    16f6:	68 94       	set
    16f8:	15 90       	lpm	r1, Z+
    16fa:	15 91       	lpm	r17, Z+
    16fc:	35 91       	lpm	r19, Z+
    16fe:	65 91       	lpm	r22, Z+
    1700:	95 91       	lpm	r25, Z+
    1702:	05 90       	lpm	r0, Z+
    1704:	7f e2       	ldi	r23, 0x2F	; 47
    1706:	73 95       	inc	r23
    1708:	e1 18       	sub	r14, r1
    170a:	f1 0a       	sbc	r15, r17
    170c:	43 0b       	sbc	r20, r19
    170e:	56 0b       	sbc	r21, r22
    1710:	c9 0b       	sbc	r28, r25
    1712:	d0 09       	sbc	r29, r0
    1714:	c0 f7       	brcc	.-16     	; 0x1706 <__ftoa_engine+0x10a>
    1716:	e1 0c       	add	r14, r1
    1718:	f1 1e       	adc	r15, r17
    171a:	43 1f       	adc	r20, r19
    171c:	56 1f       	adc	r21, r22
    171e:	c9 1f       	adc	r28, r25
    1720:	d0 1d       	adc	r29, r0
    1722:	7e f4       	brtc	.+30     	; 0x1742 <__ftoa_engine+0x146>
    1724:	70 33       	cpi	r23, 0x30	; 48
    1726:	11 f4       	brne	.+4      	; 0x172c <__ftoa_engine+0x130>
    1728:	8a 95       	dec	r24
    172a:	e6 cf       	rjmp	.-52     	; 0x16f8 <__ftoa_engine+0xfc>
    172c:	e8 94       	clt
    172e:	01 50       	subi	r16, 0x01	; 1
    1730:	30 f0       	brcs	.+12     	; 0x173e <__ftoa_engine+0x142>
    1732:	08 0f       	add	r16, r24
    1734:	0a f4       	brpl	.+2      	; 0x1738 <__ftoa_engine+0x13c>
    1736:	00 27       	eor	r16, r16
    1738:	02 17       	cp	r16, r18
    173a:	08 f4       	brcc	.+2      	; 0x173e <__ftoa_engine+0x142>
    173c:	20 2f       	mov	r18, r16
    173e:	23 95       	inc	r18
    1740:	02 2f       	mov	r16, r18
    1742:	7a 33       	cpi	r23, 0x3A	; 58
    1744:	28 f0       	brcs	.+10     	; 0x1750 <__ftoa_engine+0x154>
    1746:	79 e3       	ldi	r23, 0x39	; 57
    1748:	7d 93       	st	X+, r23
    174a:	2a 95       	dec	r18
    174c:	e9 f7       	brne	.-6      	; 0x1748 <__ftoa_engine+0x14c>
    174e:	10 c0       	rjmp	.+32     	; 0x1770 <__ftoa_engine+0x174>
    1750:	7d 93       	st	X+, r23
    1752:	2a 95       	dec	r18
    1754:	89 f6       	brne	.-94     	; 0x16f8 <__ftoa_engine+0xfc>
    1756:	06 94       	lsr	r0
    1758:	97 95       	ror	r25
    175a:	67 95       	ror	r22
    175c:	37 95       	ror	r19
    175e:	17 95       	ror	r17
    1760:	17 94       	ror	r1
    1762:	e1 18       	sub	r14, r1
    1764:	f1 0a       	sbc	r15, r17
    1766:	43 0b       	sbc	r20, r19
    1768:	56 0b       	sbc	r21, r22
    176a:	c9 0b       	sbc	r28, r25
    176c:	d0 09       	sbc	r29, r0
    176e:	98 f0       	brcs	.+38     	; 0x1796 <__ftoa_engine+0x19a>
    1770:	23 95       	inc	r18
    1772:	7e 91       	ld	r23, -X
    1774:	73 95       	inc	r23
    1776:	7a 33       	cpi	r23, 0x3A	; 58
    1778:	08 f0       	brcs	.+2      	; 0x177c <__ftoa_engine+0x180>
    177a:	70 e3       	ldi	r23, 0x30	; 48
    177c:	7c 93       	st	X, r23
    177e:	20 13       	cpse	r18, r16
    1780:	b8 f7       	brcc	.-18     	; 0x1770 <__ftoa_engine+0x174>
    1782:	7e 91       	ld	r23, -X
    1784:	70 61       	ori	r23, 0x10	; 16
    1786:	7d 93       	st	X+, r23
    1788:	30 f0       	brcs	.+12     	; 0x1796 <__ftoa_engine+0x19a>
    178a:	83 95       	inc	r24
    178c:	71 e3       	ldi	r23, 0x31	; 49
    178e:	7d 93       	st	X+, r23
    1790:	70 e3       	ldi	r23, 0x30	; 48
    1792:	2a 95       	dec	r18
    1794:	e1 f7       	brne	.-8      	; 0x178e <__ftoa_engine+0x192>
    1796:	11 24       	eor	r1, r1
    1798:	ef 90       	pop	r14
    179a:	ff 90       	pop	r15
    179c:	0f 91       	pop	r16
    179e:	1f 91       	pop	r17
    17a0:	cf 91       	pop	r28
    17a2:	df 91       	pop	r29
    17a4:	99 27       	eor	r25, r25
    17a6:	87 fd       	sbrc	r24, 7
    17a8:	90 95       	com	r25
    17aa:	08 95       	ret

000017ac <strnlen_P>:
    17ac:	fc 01       	movw	r30, r24
    17ae:	05 90       	lpm	r0, Z+
    17b0:	61 50       	subi	r22, 0x01	; 1
    17b2:	70 40       	sbci	r23, 0x00	; 0
    17b4:	01 10       	cpse	r0, r1
    17b6:	d8 f7       	brcc	.-10     	; 0x17ae <strnlen_P+0x2>
    17b8:	80 95       	com	r24
    17ba:	90 95       	com	r25
    17bc:	8e 0f       	add	r24, r30
    17be:	9f 1f       	adc	r25, r31
    17c0:	08 95       	ret

000017c2 <strnlen>:
    17c2:	fc 01       	movw	r30, r24
    17c4:	61 50       	subi	r22, 0x01	; 1
    17c6:	70 40       	sbci	r23, 0x00	; 0
    17c8:	01 90       	ld	r0, Z+
    17ca:	01 10       	cpse	r0, r1
    17cc:	d8 f7       	brcc	.-10     	; 0x17c4 <strnlen+0x2>
    17ce:	80 95       	com	r24
    17d0:	90 95       	com	r25
    17d2:	8e 0f       	add	r24, r30
    17d4:	9f 1f       	adc	r25, r31
    17d6:	08 95       	ret

000017d8 <fputc>:
    17d8:	0f 93       	push	r16
    17da:	1f 93       	push	r17
    17dc:	cf 93       	push	r28
    17de:	df 93       	push	r29
    17e0:	fb 01       	movw	r30, r22
    17e2:	23 81       	ldd	r18, Z+3	; 0x03
    17e4:	21 fd       	sbrc	r18, 1
    17e6:	03 c0       	rjmp	.+6      	; 0x17ee <fputc+0x16>
    17e8:	8f ef       	ldi	r24, 0xFF	; 255
    17ea:	9f ef       	ldi	r25, 0xFF	; 255
    17ec:	28 c0       	rjmp	.+80     	; 0x183e <fputc+0x66>
    17ee:	22 ff       	sbrs	r18, 2
    17f0:	16 c0       	rjmp	.+44     	; 0x181e <fputc+0x46>
    17f2:	46 81       	ldd	r20, Z+6	; 0x06
    17f4:	57 81       	ldd	r21, Z+7	; 0x07
    17f6:	24 81       	ldd	r18, Z+4	; 0x04
    17f8:	35 81       	ldd	r19, Z+5	; 0x05
    17fa:	42 17       	cp	r20, r18
    17fc:	53 07       	cpc	r21, r19
    17fe:	44 f4       	brge	.+16     	; 0x1810 <fputc+0x38>
    1800:	a0 81       	ld	r26, Z
    1802:	b1 81       	ldd	r27, Z+1	; 0x01
    1804:	9d 01       	movw	r18, r26
    1806:	2f 5f       	subi	r18, 0xFF	; 255
    1808:	3f 4f       	sbci	r19, 0xFF	; 255
    180a:	31 83       	std	Z+1, r19	; 0x01
    180c:	20 83       	st	Z, r18
    180e:	8c 93       	st	X, r24
    1810:	26 81       	ldd	r18, Z+6	; 0x06
    1812:	37 81       	ldd	r19, Z+7	; 0x07
    1814:	2f 5f       	subi	r18, 0xFF	; 255
    1816:	3f 4f       	sbci	r19, 0xFF	; 255
    1818:	37 83       	std	Z+7, r19	; 0x07
    181a:	26 83       	std	Z+6, r18	; 0x06
    181c:	10 c0       	rjmp	.+32     	; 0x183e <fputc+0x66>
    181e:	eb 01       	movw	r28, r22
    1820:	09 2f       	mov	r16, r25
    1822:	18 2f       	mov	r17, r24
    1824:	00 84       	ldd	r0, Z+8	; 0x08
    1826:	f1 85       	ldd	r31, Z+9	; 0x09
    1828:	e0 2d       	mov	r30, r0
    182a:	09 95       	icall
    182c:	89 2b       	or	r24, r25
    182e:	e1 f6       	brne	.-72     	; 0x17e8 <fputc+0x10>
    1830:	8e 81       	ldd	r24, Y+6	; 0x06
    1832:	9f 81       	ldd	r25, Y+7	; 0x07
    1834:	01 96       	adiw	r24, 0x01	; 1
    1836:	9f 83       	std	Y+7, r25	; 0x07
    1838:	8e 83       	std	Y+6, r24	; 0x06
    183a:	81 2f       	mov	r24, r17
    183c:	90 2f       	mov	r25, r16
    183e:	df 91       	pop	r29
    1840:	cf 91       	pop	r28
    1842:	1f 91       	pop	r17
    1844:	0f 91       	pop	r16
    1846:	08 95       	ret

00001848 <__ultoa_invert>:
    1848:	fa 01       	movw	r30, r20
    184a:	aa 27       	eor	r26, r26
    184c:	28 30       	cpi	r18, 0x08	; 8
    184e:	51 f1       	breq	.+84     	; 0x18a4 <__ultoa_invert+0x5c>
    1850:	20 31       	cpi	r18, 0x10	; 16
    1852:	81 f1       	breq	.+96     	; 0x18b4 <__ultoa_invert+0x6c>
    1854:	e8 94       	clt
    1856:	6f 93       	push	r22
    1858:	6e 7f       	andi	r22, 0xFE	; 254
    185a:	6e 5f       	subi	r22, 0xFE	; 254
    185c:	7f 4f       	sbci	r23, 0xFF	; 255
    185e:	8f 4f       	sbci	r24, 0xFF	; 255
    1860:	9f 4f       	sbci	r25, 0xFF	; 255
    1862:	af 4f       	sbci	r26, 0xFF	; 255
    1864:	b1 e0       	ldi	r27, 0x01	; 1
    1866:	3e d0       	rcall	.+124    	; 0x18e4 <__ultoa_invert+0x9c>
    1868:	b4 e0       	ldi	r27, 0x04	; 4
    186a:	3c d0       	rcall	.+120    	; 0x18e4 <__ultoa_invert+0x9c>
    186c:	67 0f       	add	r22, r23
    186e:	78 1f       	adc	r23, r24
    1870:	89 1f       	adc	r24, r25
    1872:	9a 1f       	adc	r25, r26
    1874:	a1 1d       	adc	r26, r1
    1876:	68 0f       	add	r22, r24
    1878:	79 1f       	adc	r23, r25
    187a:	8a 1f       	adc	r24, r26
    187c:	91 1d       	adc	r25, r1
    187e:	a1 1d       	adc	r26, r1
    1880:	6a 0f       	add	r22, r26
    1882:	71 1d       	adc	r23, r1
    1884:	81 1d       	adc	r24, r1
    1886:	91 1d       	adc	r25, r1
    1888:	a1 1d       	adc	r26, r1
    188a:	20 d0       	rcall	.+64     	; 0x18cc <__ultoa_invert+0x84>
    188c:	09 f4       	brne	.+2      	; 0x1890 <__ultoa_invert+0x48>
    188e:	68 94       	set
    1890:	3f 91       	pop	r19
    1892:	2a e0       	ldi	r18, 0x0A	; 10
    1894:	26 9f       	mul	r18, r22
    1896:	11 24       	eor	r1, r1
    1898:	30 19       	sub	r19, r0
    189a:	30 5d       	subi	r19, 0xD0	; 208
    189c:	31 93       	st	Z+, r19
    189e:	de f6       	brtc	.-74     	; 0x1856 <__ultoa_invert+0xe>
    18a0:	cf 01       	movw	r24, r30
    18a2:	08 95       	ret
    18a4:	46 2f       	mov	r20, r22
    18a6:	47 70       	andi	r20, 0x07	; 7
    18a8:	40 5d       	subi	r20, 0xD0	; 208
    18aa:	41 93       	st	Z+, r20
    18ac:	b3 e0       	ldi	r27, 0x03	; 3
    18ae:	0f d0       	rcall	.+30     	; 0x18ce <__ultoa_invert+0x86>
    18b0:	c9 f7       	brne	.-14     	; 0x18a4 <__ultoa_invert+0x5c>
    18b2:	f6 cf       	rjmp	.-20     	; 0x18a0 <__ultoa_invert+0x58>
    18b4:	46 2f       	mov	r20, r22
    18b6:	4f 70       	andi	r20, 0x0F	; 15
    18b8:	40 5d       	subi	r20, 0xD0	; 208
    18ba:	4a 33       	cpi	r20, 0x3A	; 58
    18bc:	18 f0       	brcs	.+6      	; 0x18c4 <__ultoa_invert+0x7c>
    18be:	49 5d       	subi	r20, 0xD9	; 217
    18c0:	31 fd       	sbrc	r19, 1
    18c2:	40 52       	subi	r20, 0x20	; 32
    18c4:	41 93       	st	Z+, r20
    18c6:	02 d0       	rcall	.+4      	; 0x18cc <__ultoa_invert+0x84>
    18c8:	a9 f7       	brne	.-22     	; 0x18b4 <__ultoa_invert+0x6c>
    18ca:	ea cf       	rjmp	.-44     	; 0x18a0 <__ultoa_invert+0x58>
    18cc:	b4 e0       	ldi	r27, 0x04	; 4
    18ce:	a6 95       	lsr	r26
    18d0:	97 95       	ror	r25
    18d2:	87 95       	ror	r24
    18d4:	77 95       	ror	r23
    18d6:	67 95       	ror	r22
    18d8:	ba 95       	dec	r27
    18da:	c9 f7       	brne	.-14     	; 0x18ce <__ultoa_invert+0x86>
    18dc:	00 97       	sbiw	r24, 0x00	; 0
    18de:	61 05       	cpc	r22, r1
    18e0:	71 05       	cpc	r23, r1
    18e2:	08 95       	ret
    18e4:	9b 01       	movw	r18, r22
    18e6:	ac 01       	movw	r20, r24
    18e8:	0a 2e       	mov	r0, r26
    18ea:	06 94       	lsr	r0
    18ec:	57 95       	ror	r21
    18ee:	47 95       	ror	r20
    18f0:	37 95       	ror	r19
    18f2:	27 95       	ror	r18
    18f4:	ba 95       	dec	r27
    18f6:	c9 f7       	brne	.-14     	; 0x18ea <__ultoa_invert+0xa2>
    18f8:	62 0f       	add	r22, r18
    18fa:	73 1f       	adc	r23, r19
    18fc:	84 1f       	adc	r24, r20
    18fe:	95 1f       	adc	r25, r21
    1900:	a0 1d       	adc	r26, r0
    1902:	08 95       	ret

00001904 <_exit>:
    1904:	f8 94       	cli

00001906 <__stop_program>:
    1906:	ff cf       	rjmp	.-2      	; 0x1906 <__stop_program>
