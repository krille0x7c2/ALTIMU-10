
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  0000187e  00001912  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000187e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800100  00800100  00001912  2**0
                  ALLOC
  3 .stab         00002634  00000000  00000000  00001914  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000149f  00000000  00000000  00003f48  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000027  00000000  00000000  000053e7  2**0
                  CONTENTS, READONLY
  6 .debug_info   000005f4  00000000  00000000  0000540e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005a2  00000000  00000000  00005a02  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001d  00000000  00000000  00005fa4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  00005fc1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 cc 00 	jmp	0x198	; 0x198 <__ctors_end>
       4:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
       8:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
       c:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
      10:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
      14:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
      18:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
      1c:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
      20:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
      24:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
      28:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
      2c:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
      30:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
      34:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
      38:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
      3c:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
      40:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
      44:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
      48:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
      4c:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
      50:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
      54:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
      58:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
      5c:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
      60:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
      64:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
      68:	08 4a       	sbci	r16, 0xA8	; 168
      6a:	d7 3b       	cpi	r29, 0xB7	; 183
      6c:	3b ce       	rjmp	.-906    	; 0xfffffce4 <__eeprom_end+0xff7efce4>
      6e:	01 6e       	ori	r16, 0xE1	; 225
      70:	84 bc       	out	0x24, r8	; 36
      72:	bf fd       	.word	0xfdbf	; ????
      74:	c1 2f       	mov	r28, r17
      76:	3d 6c       	ori	r19, 0xCD	; 205
      78:	74 31       	cpi	r23, 0x14	; 20
      7a:	9a bd       	out	0x2a, r25	; 42
      7c:	56 83       	std	Z+6, r21	; 0x06
      7e:	3d da       	rcall	.-2950   	; 0xfffff4fa <__eeprom_end+0xff7ef4fa>
      80:	3d 00       	.word	0x003d	; ????
      82:	c7 7f       	andi	r28, 0xF7	; 247
      84:	11 be       	out	0x31, r1	; 49
      86:	d9 e4       	ldi	r29, 0x49	; 73
      88:	bb 4c       	sbci	r27, 0xCB	; 203
      8a:	3e 91       	ld	r19, -X
      8c:	6b aa       	std	Y+51, r6	; 0x33
      8e:	aa be       	out	0x3a, r10	; 58
      90:	00 00       	nop
      92:	00 80       	ld	r0, Z
      94:	3f 00       	.word	0x003f	; ????

00000096 <__trampolines_end>:
      96:	6e 61       	ori	r22, 0x1E	; 30
      98:	6e 00       	.word	0x006e	; ????

0000009a <__c.2240>:
      9a:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      aa:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      ba:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      ca:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
      da:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
      ea:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
      fa:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     10a:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     11a:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     12a:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     13a:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     14a:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     15a:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     16a:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     17a:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     18a:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000198 <__ctors_end>:
     198:	11 24       	eor	r1, r1
     19a:	1f be       	out	0x3f, r1	; 63
     19c:	cf ef       	ldi	r28, 0xFF	; 255
     19e:	d8 e0       	ldi	r29, 0x08	; 8
     1a0:	de bf       	out	0x3e, r29	; 62
     1a2:	cd bf       	out	0x3d, r28	; 61

000001a4 <__do_clear_bss>:
     1a4:	11 e0       	ldi	r17, 0x01	; 1
     1a6:	a0 e0       	ldi	r26, 0x00	; 0
     1a8:	b1 e0       	ldi	r27, 0x01	; 1
     1aa:	01 c0       	rjmp	.+2      	; 0x1ae <.do_clear_bss_start>

000001ac <.do_clear_bss_loop>:
     1ac:	1d 92       	st	X+, r1

000001ae <.do_clear_bss_start>:
     1ae:	a6 30       	cpi	r26, 0x06	; 6
     1b0:	b1 07       	cpc	r27, r17
     1b2:	e1 f7       	brne	.-8      	; 0x1ac <.do_clear_bss_loop>
     1b4:	0e 94 53 04 	call	0x8a6	; 0x8a6 <main>
     1b8:	0c 94 3d 0c 	jmp	0x187a	; 0x187a <_exit>

000001bc <__bad_interrupt>:
     1bc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001c0 <USART0Init>:
#include "usart.h"
#include <avr/io.h>

void USART0Init(void) {
    // Set baud rate
    UBRR0H = (uint8_t) (UBRR_VALUE >> 8);
     1c0:	10 92 c5 00 	sts	0x00C5, r1
    UBRR0L = (uint8_t) UBRR_VALUE;
     1c4:	87 e6       	ldi	r24, 0x67	; 103
     1c6:	80 93 c4 00 	sts	0x00C4, r24
    // Set frame format to 8 data bits, no parity, 1 stop bit
    UCSR0C |= (1 << UCSZ01) | (1 << UCSZ00);
     1ca:	e2 ec       	ldi	r30, 0xC2	; 194
     1cc:	f0 e0       	ldi	r31, 0x00	; 0
     1ce:	80 81       	ld	r24, Z
     1d0:	86 60       	ori	r24, 0x06	; 6
     1d2:	80 83       	st	Z, r24
    //enable transmission and reception
    UCSR0B |= (1 << RXEN0) | (1 << TXEN0);
     1d4:	e1 ec       	ldi	r30, 0xC1	; 193
     1d6:	f0 e0       	ldi	r31, 0x00	; 0
     1d8:	80 81       	ld	r24, Z
     1da:	88 61       	ori	r24, 0x18	; 24
     1dc:	80 83       	st	Z, r24
     1de:	08 95       	ret

000001e0 <USART0SendByte>:
}

int USART0SendByte(char u8Data, FILE *stream) {
     1e0:	cf 93       	push	r28
     1e2:	c8 2f       	mov	r28, r24
    if (u8Data == '\n') {
     1e4:	8a 30       	cpi	r24, 0x0A	; 10
     1e6:	29 f4       	brne	.+10     	; 0x1f2 <USART0SendByte+0x12>
        USART0SendByte('\r', 0);
     1e8:	60 e0       	ldi	r22, 0x00	; 0
     1ea:	70 e0       	ldi	r23, 0x00	; 0
     1ec:	8d e0       	ldi	r24, 0x0D	; 13
     1ee:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <USART0SendByte>
    }
    //wait while previous byte is completed
    while (!(UCSR0A & (1 << UDRE0))) {
     1f2:	80 91 c0 00 	lds	r24, 0x00C0
     1f6:	85 ff       	sbrs	r24, 5
     1f8:	fc cf       	rjmp	.-8      	; 0x1f2 <USART0SendByte+0x12>
    };
    // Transmit data
    UDR0 = u8Data;
     1fa:	c0 93 c6 00 	sts	0x00C6, r28
    return 0;
}
     1fe:	80 e0       	ldi	r24, 0x00	; 0
     200:	90 e0       	ldi	r25, 0x00	; 0
     202:	cf 91       	pop	r28
     204:	08 95       	ret

00000206 <USART0ReceiveByte>:
int USART0ReceiveByte(FILE *stream) {
     206:	cf 93       	push	r28
    uint8_t u8Data;
    // Wait for byte to be received
    while (!(UCSR0A & (1 << RXC0))) {
     208:	20 91 c0 00 	lds	r18, 0x00C0
     20c:	27 ff       	sbrs	r18, 7
     20e:	fc cf       	rjmp	.-8      	; 0x208 <USART0ReceiveByte+0x2>
    };
    u8Data = UDR0;
     210:	c0 91 c6 00 	lds	r28, 0x00C6
    //echo input data
    USART0SendByte(u8Data, stream);
     214:	bc 01       	movw	r22, r24
     216:	8c 2f       	mov	r24, r28
     218:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <USART0SendByte>
    // Return received data
    return u8Data;
}
     21c:	8c 2f       	mov	r24, r28
     21e:	90 e0       	ldi	r25, 0x00	; 0
     220:	cf 91       	pop	r28
     222:	08 95       	ret

00000224 <TWIInit>:
#include <compat/twi.h>
#include <util/delay.h>
void TWIInit(void)
{
    //set SCL to 400kHz
    TWSR = 0x00;
     224:	10 92 b9 00 	sts	0x00B9, r1
    TWBR = 0x0C;
     228:	8c e0       	ldi	r24, 0x0C	; 12
     22a:	80 93 b8 00 	sts	0x00B8, r24
    //enable TWI
    TWCR = (1<<TWEN);
     22e:	84 e0       	ldi	r24, 0x04	; 4
     230:	80 93 bc 00 	sts	0x00BC, r24
     234:	08 95       	ret

00000236 <i2c_start>:
uint8_t i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     236:	94 ea       	ldi	r25, 0xA4	; 164
     238:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
     23c:	90 91 bc 00 	lds	r25, 0x00BC
     240:	97 ff       	sbrs	r25, 7
     242:	fc cf       	rjmp	.-8      	; 0x23c <i2c_start+0x6>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
     244:	90 91 b9 00 	lds	r25, 0x00B9
     248:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
     24a:	98 30       	cpi	r25, 0x08	; 8
     24c:	21 f0       	breq	.+8      	; 0x256 <i2c_start+0x20>
     24e:	90 31       	cpi	r25, 0x10	; 16
     250:	11 f0       	breq	.+4      	; 0x256 <i2c_start+0x20>
     252:	81 e0       	ldi	r24, 0x01	; 1
     254:	08 95       	ret

	// send device address
	TWDR = address;
     256:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
     25a:	84 e8       	ldi	r24, 0x84	; 132
     25c:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
     260:	80 91 bc 00 	lds	r24, 0x00BC
     264:	87 ff       	sbrs	r24, 7
     266:	fc cf       	rjmp	.-8      	; 0x260 <i2c_start+0x2a>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
     268:	80 91 b9 00 	lds	r24, 0x00B9
     26c:	88 7f       	andi	r24, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
     26e:	88 31       	cpi	r24, 0x18	; 24
     270:	11 f0       	breq	.+4      	; 0x276 <i2c_start+0x40>
     272:	80 34       	cpi	r24, 0x40	; 64
     274:	71 f7       	brne	.-36     	; 0x252 <i2c_start+0x1c>

	return 0;
     276:	80 e0       	ldi	r24, 0x00	; 0

}
     278:	08 95       	ret

0000027a <i2c_start_wait>:


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     27a:	24 ea       	ldi	r18, 0xA4	; 164
    	twst = TW_STATUS & 0xF8;
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
    	TWCR = (1<<TWINT) | (1<<TWEN);
     27c:	34 e8       	ldi	r19, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     27e:	44 e9       	ldi	r20, 0x94	; 148


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     280:	20 93 bc 00 	sts	0x00BC, r18
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
     284:	90 91 bc 00 	lds	r25, 0x00BC
     288:	97 ff       	sbrs	r25, 7
     28a:	fc cf       	rjmp	.-8      	; 0x284 <i2c_start_wait+0xa>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
     28c:	90 91 b9 00 	lds	r25, 0x00B9
     290:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
     292:	98 30       	cpi	r25, 0x08	; 8
     294:	11 f0       	breq	.+4      	; 0x29a <i2c_start_wait+0x20>
     296:	90 31       	cpi	r25, 0x10	; 16
     298:	99 f7       	brne	.-26     	; 0x280 <i2c_start_wait+0x6>
    
    	// send device address
    	TWDR = address;
     29a:	80 93 bb 00 	sts	0x00BB, r24
    	TWCR = (1<<TWINT) | (1<<TWEN);
     29e:	30 93 bc 00 	sts	0x00BC, r19
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
     2a2:	90 91 bc 00 	lds	r25, 0x00BC
     2a6:	97 ff       	sbrs	r25, 7
     2a8:	fc cf       	rjmp	.-8      	; 0x2a2 <i2c_start_wait+0x28>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
     2aa:	90 91 b9 00 	lds	r25, 0x00B9
     2ae:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
     2b0:	90 32       	cpi	r25, 0x20	; 32
     2b2:	11 f0       	breq	.+4      	; 0x2b8 <i2c_start_wait+0x3e>
     2b4:	98 35       	cpi	r25, 0x58	; 88
     2b6:	39 f4       	brne	.+14     	; 0x2c6 <i2c_start_wait+0x4c>
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     2b8:	40 93 bc 00 	sts	0x00BC, r20
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
     2bc:	90 91 bc 00 	lds	r25, 0x00BC
     2c0:	94 fd       	sbrc	r25, 4
     2c2:	fc cf       	rjmp	.-8      	; 0x2bc <i2c_start_wait+0x42>
     2c4:	dd cf       	rjmp	.-70     	; 0x280 <i2c_start_wait+0x6>
     2c6:	08 95       	ret

000002c8 <i2c_rep_start>:
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
uint8_t i2c_rep_start(unsigned char address)
{
    return i2c_start( address );
     2c8:	0c 94 1b 01 	jmp	0x236	; 0x236 <i2c_start>

000002cc <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     2cc:	84 e9       	ldi	r24, 0x94	; 148
     2ce:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
     2d2:	80 91 bc 00 	lds	r24, 0x00BC
     2d6:	84 fd       	sbrc	r24, 4
     2d8:	fc cf       	rjmp	.-8      	; 0x2d2 <i2c_stop+0x6>

}
     2da:	08 95       	ret

000002dc <i2c_write>:
uint8_t i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
     2dc:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
     2e0:	84 e8       	ldi	r24, 0x84	; 132
     2e2:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
     2e6:	80 91 bc 00 	lds	r24, 0x00BC
     2ea:	87 ff       	sbrs	r24, 7
     2ec:	fc cf       	rjmp	.-8      	; 0x2e6 <i2c_write+0xa>

	// check value of TWI Status Register. Mask prescaler bits only need the top 5 bits
	twst = TW_STATUS & 0xF8;
     2ee:	90 91 b9 00 	lds	r25, 0x00B9
     2f2:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
     2f4:	81 e0       	ldi	r24, 0x01	; 1
     2f6:	98 32       	cpi	r25, 0x28	; 40
     2f8:	09 f4       	brne	.+2      	; 0x2fc <i2c_write+0x20>
     2fa:	80 e0       	ldi	r24, 0x00	; 0
	return 0;

}
     2fc:	08 95       	ret

000002fe <i2c_readAck>:
 
 Return:  byte read from I2C device
*************************************************************************/
uint8_t i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
     2fe:	84 ec       	ldi	r24, 0xC4	; 196
     300:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));    
     304:	80 91 bc 00 	lds	r24, 0x00BC
     308:	87 ff       	sbrs	r24, 7
     30a:	fc cf       	rjmp	.-8      	; 0x304 <i2c_readAck+0x6>

    return TWDR;
     30c:	80 91 bb 00 	lds	r24, 0x00BB

}
     310:	08 95       	ret

00000312 <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
uint8_t i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
     312:	84 e8       	ldi	r24, 0x84	; 132
     314:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
     318:	80 91 bc 00 	lds	r24, 0x00BC
     31c:	87 ff       	sbrs	r24, 7
     31e:	fc cf       	rjmp	.-8      	; 0x318 <i2c_readNak+0x6>
	
    return TWDR;
     320:	80 91 bb 00 	lds	r24, 0x00BB

     324:	08 95       	ret

00000326 <read_temp_celsius>:
 
 Return: float value in Celsius
 
*************************************************************************/

float read_temp_celsius(void) {
     326:	cf 93       	push	r28
    if (i2c_start(BAR_SLAVE_ADDRESS << 1) == 0) {
     328:	8a eb       	ldi	r24, 0xBA	; 186
     32a:	0e 94 1b 01 	call	0x236	; 0x236 <i2c_start>
     32e:	88 23       	and	r24, r24
     330:	29 f0       	breq	.+10     	; 0x33c <read_temp_celsius+0x16>
            return (45.5 + ((float) temp) / 480); //To Celsius

        }

    }
    return 1;
     332:	60 e0       	ldi	r22, 0x00	; 0
     334:	70 e0       	ldi	r23, 0x00	; 0
     336:	80 e8       	ldi	r24, 0x80	; 128
     338:	9f e3       	ldi	r25, 0x3F	; 63
     33a:	22 c0       	rjmp	.+68     	; 0x380 <read_temp_celsius+0x5a>
 
*************************************************************************/

float read_temp_celsius(void) {
    if (i2c_start(BAR_SLAVE_ADDRESS << 1) == 0) {
        i2c_write(BAR_TEMP_OUT_L | (1 << 7));
     33c:	8b ea       	ldi	r24, 0xAB	; 171
     33e:	0e 94 6e 01 	call	0x2dc	; 0x2dc <i2c_write>

        if (i2c_rep_start(((uint8_t) BAR_SLAVE_ADDRESS << 1) | 1) == 0) {
     342:	8b eb       	ldi	r24, 0xBB	; 187
     344:	0e 94 64 01 	call	0x2c8	; 0x2c8 <i2c_rep_start>
     348:	81 11       	cpse	r24, r1
     34a:	f3 cf       	rjmp	.-26     	; 0x332 <read_temp_celsius+0xc>
            uint8_t tl = i2c_read(ACK);
     34c:	0e 94 7f 01 	call	0x2fe	; 0x2fe <i2c_readAck>
     350:	c8 2f       	mov	r28, r24
            uint8_t th = i2c_read(NAK);
     352:	0e 94 89 01 	call	0x312	; 0x312 <i2c_readNak>
            int16_t temp = (int16_t) (th << 8 | tl);
     356:	6c 2f       	mov	r22, r28
     358:	70 e0       	ldi	r23, 0x00	; 0
     35a:	78 2b       	or	r23, r24
            return (45.5 + ((float) temp) / 480); //To Celsius
     35c:	88 27       	eor	r24, r24
     35e:	77 fd       	sbrc	r23, 7
     360:	80 95       	com	r24
     362:	98 2f       	mov	r25, r24
     364:	0e 94 64 09 	call	0x12c8	; 0x12c8 <__floatsisf>
     368:	20 e0       	ldi	r18, 0x00	; 0
     36a:	30 e0       	ldi	r19, 0x00	; 0
     36c:	40 ef       	ldi	r20, 0xF0	; 240
     36e:	53 e4       	ldi	r21, 0x43	; 67
     370:	0e 94 c9 08 	call	0x1192	; 0x1192 <__divsf3>
     374:	20 e0       	ldi	r18, 0x00	; 0
     376:	30 e0       	ldi	r19, 0x00	; 0
     378:	46 e3       	ldi	r20, 0x36	; 54
     37a:	52 e4       	ldi	r21, 0x42	; 66
     37c:	0e 94 03 08 	call	0x1006	; 0x1006 <__addsf3>

        }

    }
    return 1;
}/*read_temp_celsius*/
     380:	cf 91       	pop	r28
     382:	08 95       	ret

00000384 <read_pressure_hpa>:
 Read the pressure
 
 Return: float value in hpa
 
************************************************************************/
float read_pressure_hpa(void) {
     384:	0f 93       	push	r16
     386:	1f 93       	push	r17
     388:	cf 93       	push	r28
     38a:	df 93       	push	r29
    if (i2c_start(BAR_SLAVE_ADDRESS << 1) == 0) {
     38c:	8a eb       	ldi	r24, 0xBA	; 186
     38e:	0e 94 1b 01 	call	0x236	; 0x236 <i2c_start>
     392:	88 23       	and	r24, r24
     394:	29 f0       	breq	.+10     	; 0x3a0 <read_pressure_hpa+0x1c>

            int32_t temp = (int32_t) (int8_t) ph << 16 | (uint16_t) pl << 8 | pxl;
            return ((float) temp / 4096);
        }
    }
    return 1;
     396:	60 e0       	ldi	r22, 0x00	; 0
     398:	70 e0       	ldi	r23, 0x00	; 0
     39a:	80 e8       	ldi	r24, 0x80	; 128
     39c:	9f e3       	ldi	r25, 0x3F	; 63
     39e:	2f c0       	rjmp	.+94     	; 0x3fe <read_pressure_hpa+0x7a>
 Return: float value in hpa
 
************************************************************************/
float read_pressure_hpa(void) {
    if (i2c_start(BAR_SLAVE_ADDRESS << 1) == 0) {
        i2c_write(BAR_PRESS_POUT_XL | (1 << 7));
     3a0:	88 ea       	ldi	r24, 0xA8	; 168
     3a2:	0e 94 6e 01 	call	0x2dc	; 0x2dc <i2c_write>

        if (i2c_rep_start(((uint8_t) BAR_SLAVE_ADDRESS << 1) | 1) == 0) {
     3a6:	8b eb       	ldi	r24, 0xBB	; 187
     3a8:	0e 94 64 01 	call	0x2c8	; 0x2c8 <i2c_rep_start>
     3ac:	81 11       	cpse	r24, r1
     3ae:	f3 cf       	rjmp	.-26     	; 0x396 <read_pressure_hpa+0x12>
            uint8_t pxl = i2c_read(ACK);
     3b0:	0e 94 7f 01 	call	0x2fe	; 0x2fe <i2c_readAck>
     3b4:	d8 2f       	mov	r29, r24
            uint8_t pl = i2c_read(ACK);
     3b6:	0e 94 7f 01 	call	0x2fe	; 0x2fe <i2c_readAck>
     3ba:	c8 2f       	mov	r28, r24
            uint8_t ph = i2c_read(NAK);
     3bc:	0e 94 89 01 	call	0x312	; 0x312 <i2c_readNak>

            int32_t temp = (int32_t) (int8_t) ph << 16 | (uint16_t) pl << 8 | pxl;
     3c0:	99 27       	eor	r25, r25
     3c2:	87 fd       	sbrc	r24, 7
     3c4:	90 95       	com	r25
     3c6:	a9 2f       	mov	r26, r25
     3c8:	b9 2f       	mov	r27, r25
     3ca:	9c 01       	movw	r18, r24
     3cc:	11 27       	eor	r17, r17
     3ce:	00 27       	eor	r16, r16
     3d0:	4c 2f       	mov	r20, r28
     3d2:	50 e0       	ldi	r21, 0x00	; 0
     3d4:	54 2f       	mov	r21, r20
     3d6:	44 27       	eor	r20, r20
     3d8:	60 e0       	ldi	r22, 0x00	; 0
     3da:	70 e0       	ldi	r23, 0x00	; 0
     3dc:	d9 01       	movw	r26, r18
     3de:	c8 01       	movw	r24, r16
     3e0:	84 2b       	or	r24, r20
     3e2:	95 2b       	or	r25, r21
     3e4:	a6 2b       	or	r26, r22
     3e6:	b7 2b       	or	r27, r23
     3e8:	bc 01       	movw	r22, r24
     3ea:	cd 01       	movw	r24, r26
     3ec:	6d 2b       	or	r22, r29
            return ((float) temp / 4096);
     3ee:	0e 94 64 09 	call	0x12c8	; 0x12c8 <__floatsisf>
     3f2:	20 e0       	ldi	r18, 0x00	; 0
     3f4:	30 e0       	ldi	r19, 0x00	; 0
     3f6:	40 e8       	ldi	r20, 0x80	; 128
     3f8:	59 e3       	ldi	r21, 0x39	; 57
     3fa:	0e 94 1c 0a 	call	0x1438	; 0x1438 <__mulsf3>
        }
    }
    return 1;

}/*read_pressure_hpa*/
     3fe:	df 91       	pop	r29
     400:	cf 91       	pop	r28
     402:	1f 91       	pop	r17
     404:	0f 91       	pop	r16
     406:	08 95       	ret

00000408 <init_bar>:
 Initialize the bar,, more info on the way
 
************************************************************************/

void init_bar(void) {
    write_to_reg(BAR_SLAVE_ADDRESS,BAR_CTRL_REG1, 0xB0);
     408:	40 eb       	ldi	r20, 0xB0	; 176
     40a:	60 e2       	ldi	r22, 0x20	; 32
     40c:	8d e5       	ldi	r24, 0x5D	; 93
     40e:	0c 94 04 04 	jmp	0x808	; 0x808 <write_to_reg>

00000412 <init_gyro>:
 
 *************************************************************************/

void init_gyro(void) {

    write_to_reg(GYRO_SLAVE_ADDRESS, GYRO_LOW_ODR, 0x00);
     412:	40 e0       	ldi	r20, 0x00	; 0
     414:	69 e3       	ldi	r22, 0x39	; 57
     416:	8b e6       	ldi	r24, 0x6B	; 107
     418:	0e 94 04 04 	call	0x808	; 0x808 <write_to_reg>
    write_to_reg(GYRO_SLAVE_ADDRESS, GYRO_CTRL4, 0x00);
     41c:	40 e0       	ldi	r20, 0x00	; 0
     41e:	63 e2       	ldi	r22, 0x23	; 35
     420:	8b e6       	ldi	r24, 0x6B	; 107
     422:	0e 94 04 04 	call	0x808	; 0x808 <write_to_reg>
    write_to_reg(GYRO_SLAVE_ADDRESS, GYRO_CTRL1, 0x6F);
     426:	4f e6       	ldi	r20, 0x6F	; 111
     428:	60 e2       	ldi	r22, 0x20	; 32
     42a:	8b e6       	ldi	r24, 0x6B	; 107
     42c:	0c 94 04 04 	jmp	0x808	; 0x808 <write_to_reg>

00000430 <read_gyro_values>:
 Read the raw values from all three axis. 16-bit resolution
 
 Input: Pointer to data structure, passed by reference.
 
 *************************************************************************/
void read_gyro_values(struct gyro_data *_gyro_data_) {
     430:	df 92       	push	r13
     432:	ef 92       	push	r14
     434:	ff 92       	push	r15
     436:	0f 93       	push	r16
     438:	1f 93       	push	r17
     43a:	cf 93       	push	r28
     43c:	df 93       	push	r29
     43e:	8c 01       	movw	r16, r24

    timer1_init();
     440:	0e 94 49 04 	call	0x892	; 0x892 <timer1_init>
    while(TCNT1<DELAY_20M);
     444:	80 91 84 00 	lds	r24, 0x0084
     448:	90 91 85 00 	lds	r25, 0x0085
     44c:	8f 33       	cpi	r24, 0x3F	; 63
     44e:	9c 49       	sbci	r25, 0x9C	; 156
     450:	c8 f3       	brcs	.-14     	; 0x444 <read_gyro_values+0x14>
        if (i2c_start(GYRO_SLAVE_ADDRESS << 1) == 0) {
     452:	86 ed       	ldi	r24, 0xD6	; 214
     454:	0e 94 1b 01 	call	0x236	; 0x236 <i2c_start>
     458:	81 11       	cpse	r24, r1
     45a:	29 c0       	rjmp	.+82     	; 0x4ae <read_gyro_values+0x7e>
            i2c_write(GYRO_OUT_X_L | (1 << 7)); //Auto increment registers by writing the MSB high
     45c:	88 ea       	ldi	r24, 0xA8	; 168
     45e:	0e 94 6e 01 	call	0x2dc	; 0x2dc <i2c_write>

            if (i2c_rep_start(((uint8_t) GYRO_SLAVE_ADDRESS << 1) | 1) == 0) {
     462:	87 ed       	ldi	r24, 0xD7	; 215
     464:	0e 94 64 01 	call	0x2c8	; 0x2c8 <i2c_rep_start>
     468:	81 11       	cpse	r24, r1
     46a:	21 c0       	rjmp	.+66     	; 0x4ae <read_gyro_values+0x7e>
                uint8_t xlg = i2c_read(ACK);
     46c:	0e 94 7f 01 	call	0x2fe	; 0x2fe <i2c_readAck>
     470:	f8 2e       	mov	r15, r24
                uint8_t xhg = i2c_read(ACK);
     472:	0e 94 7f 01 	call	0x2fe	; 0x2fe <i2c_readAck>
     476:	d8 2e       	mov	r13, r24

                uint8_t ylg = i2c_read(ACK);
     478:	0e 94 7f 01 	call	0x2fe	; 0x2fe <i2c_readAck>
     47c:	d8 2f       	mov	r29, r24
                uint8_t yhg = i2c_read(ACK);
     47e:	0e 94 7f 01 	call	0x2fe	; 0x2fe <i2c_readAck>
     482:	e8 2e       	mov	r14, r24

                uint8_t zlg = i2c_read(ACK);
     484:	0e 94 7f 01 	call	0x2fe	; 0x2fe <i2c_readAck>
     488:	c8 2f       	mov	r28, r24
                uint8_t zhg = i2c_read(NAK);
     48a:	0e 94 89 01 	call	0x312	; 0x312 <i2c_readNak>

                _gyro_data_->x = (int16_t) (xhg << 8 | xlg);
     48e:	2f 2d       	mov	r18, r15
     490:	30 e0       	ldi	r19, 0x00	; 0
     492:	3d 29       	or	r19, r13
     494:	f8 01       	movw	r30, r16
     496:	31 83       	std	Z+1, r19	; 0x01
     498:	20 83       	st	Z, r18
                _gyro_data_->y = (int16_t) (yhg << 8 | ylg);
     49a:	2d 2f       	mov	r18, r29
     49c:	30 e0       	ldi	r19, 0x00	; 0
     49e:	3e 29       	or	r19, r14
     4a0:	33 83       	std	Z+3, r19	; 0x03
     4a2:	22 83       	std	Z+2, r18	; 0x02
                _gyro_data_->z = (int16_t) (zhg << 8 | zlg);
     4a4:	2c 2f       	mov	r18, r28
     4a6:	30 e0       	ldi	r19, 0x00	; 0
     4a8:	38 2b       	or	r19, r24
     4aa:	35 83       	std	Z+5, r19	; 0x05
     4ac:	24 83       	std	Z+4, r18	; 0x04

            }
        }
    
}/*read_gyro_values*/
     4ae:	df 91       	pop	r29
     4b0:	cf 91       	pop	r28
     4b2:	1f 91       	pop	r17
     4b4:	0f 91       	pop	r16
     4b6:	ff 90       	pop	r15
     4b8:	ef 90       	pop	r14
     4ba:	df 90       	pop	r13
     4bc:	08 95       	ret

000004be <read_gyro_values_rate_dps>:

void read_gyro_values_rate_dps(struct gyro_data *_gyro_data_, struct gyro_data_dps *gyro_data_dps) {
     4be:	0f 93       	push	r16
     4c0:	1f 93       	push	r17
     4c2:	cf 93       	push	r28
     4c4:	df 93       	push	r29
     4c6:	8c 01       	movw	r16, r24
     4c8:	eb 01       	movw	r28, r22
    gyro_data_dps->x = (float) _gyro_data_->x * G_GAIN;
     4ca:	fc 01       	movw	r30, r24
     4cc:	60 81       	ld	r22, Z
     4ce:	71 81       	ldd	r23, Z+1	; 0x01
     4d0:	88 27       	eor	r24, r24
     4d2:	77 fd       	sbrc	r23, 7
     4d4:	80 95       	com	r24
     4d6:	98 2f       	mov	r25, r24
     4d8:	0e 94 64 09 	call	0x12c8	; 0x12c8 <__floatsisf>
     4dc:	29 e2       	ldi	r18, 0x29	; 41
     4de:	3c e5       	ldi	r19, 0x5C	; 92
     4e0:	4f e0       	ldi	r20, 0x0F	; 15
     4e2:	5c e3       	ldi	r21, 0x3C	; 60
     4e4:	0e 94 1c 0a 	call	0x1438	; 0x1438 <__mulsf3>
     4e8:	68 83       	st	Y, r22
     4ea:	79 83       	std	Y+1, r23	; 0x01
     4ec:	8a 83       	std	Y+2, r24	; 0x02
     4ee:	9b 83       	std	Y+3, r25	; 0x03
    gyro_data_dps->y = (float) _gyro_data_->y * G_GAIN;
     4f0:	f8 01       	movw	r30, r16
     4f2:	62 81       	ldd	r22, Z+2	; 0x02
     4f4:	73 81       	ldd	r23, Z+3	; 0x03
     4f6:	88 27       	eor	r24, r24
     4f8:	77 fd       	sbrc	r23, 7
     4fa:	80 95       	com	r24
     4fc:	98 2f       	mov	r25, r24
     4fe:	0e 94 64 09 	call	0x12c8	; 0x12c8 <__floatsisf>
     502:	29 e2       	ldi	r18, 0x29	; 41
     504:	3c e5       	ldi	r19, 0x5C	; 92
     506:	4f e0       	ldi	r20, 0x0F	; 15
     508:	5c e3       	ldi	r21, 0x3C	; 60
     50a:	0e 94 1c 0a 	call	0x1438	; 0x1438 <__mulsf3>
     50e:	6c 83       	std	Y+4, r22	; 0x04
     510:	7d 83       	std	Y+5, r23	; 0x05
     512:	8e 83       	std	Y+6, r24	; 0x06
     514:	9f 83       	std	Y+7, r25	; 0x07
    gyro_data_dps->z = (float) _gyro_data_->z * G_GAIN;
     516:	f8 01       	movw	r30, r16
     518:	64 81       	ldd	r22, Z+4	; 0x04
     51a:	75 81       	ldd	r23, Z+5	; 0x05
     51c:	88 27       	eor	r24, r24
     51e:	77 fd       	sbrc	r23, 7
     520:	80 95       	com	r24
     522:	98 2f       	mov	r25, r24
     524:	0e 94 64 09 	call	0x12c8	; 0x12c8 <__floatsisf>
     528:	29 e2       	ldi	r18, 0x29	; 41
     52a:	3c e5       	ldi	r19, 0x5C	; 92
     52c:	4f e0       	ldi	r20, 0x0F	; 15
     52e:	5c e3       	ldi	r21, 0x3C	; 60
     530:	0e 94 1c 0a 	call	0x1438	; 0x1438 <__mulsf3>
     534:	68 87       	std	Y+8, r22	; 0x08
     536:	79 87       	std	Y+9, r23	; 0x09
     538:	8a 87       	std	Y+10, r24	; 0x0a
     53a:	9b 87       	std	Y+11, r25	; 0x0b

}/*read_gyro_values_dps*/
     53c:	df 91       	pop	r29
     53e:	cf 91       	pop	r28
     540:	1f 91       	pop	r17
     542:	0f 91       	pop	r16
     544:	08 95       	ret

00000546 <read_gyro_values_angle>:

void read_gyro_values_angle(struct gyro_data_dps *_gyro_data_dps, struct gyro_data_angle *gyro_data_angle) {
     546:	0f 93       	push	r16
     548:	1f 93       	push	r17
     54a:	cf 93       	push	r28
     54c:	df 93       	push	r29
     54e:	8c 01       	movw	r16, r24
     550:	eb 01       	movw	r28, r22
    gyro_data_angle->x = _gyro_data_dps->x * LOOP_PERIOD;
     552:	2a e0       	ldi	r18, 0x0A	; 10
     554:	37 ed       	ldi	r19, 0xD7	; 215
     556:	43 ea       	ldi	r20, 0xA3	; 163
     558:	5c e3       	ldi	r21, 0x3C	; 60
     55a:	fc 01       	movw	r30, r24
     55c:	60 81       	ld	r22, Z
     55e:	71 81       	ldd	r23, Z+1	; 0x01
     560:	82 81       	ldd	r24, Z+2	; 0x02
     562:	93 81       	ldd	r25, Z+3	; 0x03
     564:	0e 94 1c 0a 	call	0x1438	; 0x1438 <__mulsf3>
     568:	68 83       	st	Y, r22
     56a:	79 83       	std	Y+1, r23	; 0x01
     56c:	8a 83       	std	Y+2, r24	; 0x02
     56e:	9b 83       	std	Y+3, r25	; 0x03
    gyro_data_angle->y = _gyro_data_dps->y * LOOP_PERIOD;
     570:	2a e0       	ldi	r18, 0x0A	; 10
     572:	37 ed       	ldi	r19, 0xD7	; 215
     574:	43 ea       	ldi	r20, 0xA3	; 163
     576:	5c e3       	ldi	r21, 0x3C	; 60
     578:	f8 01       	movw	r30, r16
     57a:	64 81       	ldd	r22, Z+4	; 0x04
     57c:	75 81       	ldd	r23, Z+5	; 0x05
     57e:	86 81       	ldd	r24, Z+6	; 0x06
     580:	97 81       	ldd	r25, Z+7	; 0x07
     582:	0e 94 1c 0a 	call	0x1438	; 0x1438 <__mulsf3>
     586:	6c 83       	std	Y+4, r22	; 0x04
     588:	7d 83       	std	Y+5, r23	; 0x05
     58a:	8e 83       	std	Y+6, r24	; 0x06
     58c:	9f 83       	std	Y+7, r25	; 0x07
    gyro_data_angle->z = _gyro_data_dps->z * LOOP_PERIOD;
     58e:	2a e0       	ldi	r18, 0x0A	; 10
     590:	37 ed       	ldi	r19, 0xD7	; 215
     592:	43 ea       	ldi	r20, 0xA3	; 163
     594:	5c e3       	ldi	r21, 0x3C	; 60
     596:	f8 01       	movw	r30, r16
     598:	60 85       	ldd	r22, Z+8	; 0x08
     59a:	71 85       	ldd	r23, Z+9	; 0x09
     59c:	82 85       	ldd	r24, Z+10	; 0x0a
     59e:	93 85       	ldd	r25, Z+11	; 0x0b
     5a0:	0e 94 1c 0a 	call	0x1438	; 0x1438 <__mulsf3>
     5a4:	68 87       	std	Y+8, r22	; 0x08
     5a6:	79 87       	std	Y+9, r23	; 0x09
     5a8:	8a 87       	std	Y+10, r24	; 0x0a
     5aa:	9b 87       	std	Y+11, r25	; 0x0b

}/*read_gyro_values_angle*/
     5ac:	df 91       	pop	r29
     5ae:	cf 91       	pop	r28
     5b0:	1f 91       	pop	r17
     5b2:	0f 91       	pop	r16
     5b4:	08 95       	ret

000005b6 <init_acc>:
 * (+/- 2 g full scale)
 * (50 Hz ODR); AZEN = AYEN = AXEN = 1 (all axes enabled)
 
 *************************************************************************/
void init_acc(void) {
    write_to_reg(ACC_MAG_SLAVE_ADDRESS, ACC_MAG_CTRL2, 0x00);
     5b6:	40 e0       	ldi	r20, 0x00	; 0
     5b8:	61 e2       	ldi	r22, 0x21	; 33
     5ba:	8d e1       	ldi	r24, 0x1D	; 29
     5bc:	0e 94 04 04 	call	0x808	; 0x808 <write_to_reg>
    write_to_reg(ACC_MAG_SLAVE_ADDRESS, ACC_MAG_CTRL1, 0x57);
     5c0:	47 e5       	ldi	r20, 0x57	; 87
     5c2:	60 e2       	ldi	r22, 0x20	; 32
     5c4:	8d e1       	ldi	r24, 0x1D	; 29
     5c6:	0c 94 04 04 	jmp	0x808	; 0x808 <write_to_reg>

000005ca <init_mag>:
 * (low power mode off); MD = 00 (continuous-conversion mode)
 
 *************************************************************************/

void init_mag(void) {
    write_to_reg(ACC_MAG_SLAVE_ADDRESS, ACC_MAG_CTRL5, 0x64);
     5ca:	44 e6       	ldi	r20, 0x64	; 100
     5cc:	64 e2       	ldi	r22, 0x24	; 36
     5ce:	8d e1       	ldi	r24, 0x1D	; 29
     5d0:	0e 94 04 04 	call	0x808	; 0x808 <write_to_reg>
    write_to_reg(ACC_MAG_SLAVE_ADDRESS, ACC_MAG_CTRL6, 0x20);
     5d4:	40 e2       	ldi	r20, 0x20	; 32
     5d6:	65 e2       	ldi	r22, 0x25	; 37
     5d8:	8d e1       	ldi	r24, 0x1D	; 29
     5da:	0e 94 04 04 	call	0x808	; 0x808 <write_to_reg>
    write_to_reg(ACC_MAG_SLAVE_ADDRESS, ACC_MAG_CTRL7, 0x00);
     5de:	40 e0       	ldi	r20, 0x00	; 0
     5e0:	66 e2       	ldi	r22, 0x26	; 38
     5e2:	8d e1       	ldi	r24, 0x1D	; 29
     5e4:	0c 94 04 04 	jmp	0x808	; 0x808 <write_to_reg>

000005e8 <read_acc_raw>:
/*************************************************************************
 * read_acc_raw values
 
 *************************************************************************/

void read_acc_raw(struct acc_val_raw *_acc_raw_) {
     5e8:	df 92       	push	r13
     5ea:	ef 92       	push	r14
     5ec:	ff 92       	push	r15
     5ee:	0f 93       	push	r16
     5f0:	1f 93       	push	r17
     5f2:	cf 93       	push	r28
     5f4:	df 93       	push	r29
     5f6:	8c 01       	movw	r16, r24
    if (i2c_start(ACC_MAG_SLAVE_ADDRESS << 1) == 0) {
     5f8:	8a e3       	ldi	r24, 0x3A	; 58
     5fa:	0e 94 1b 01 	call	0x236	; 0x236 <i2c_start>
     5fe:	81 11       	cpse	r24, r1
     600:	29 c0       	rjmp	.+82     	; 0x654 <read_acc_raw+0x6c>
        i2c_write(ACC_MAG_OUT_X_L_A | (1 << 7)); //Auto increment registers by writing the MSB high
     602:	88 ea       	ldi	r24, 0xA8	; 168
     604:	0e 94 6e 01 	call	0x2dc	; 0x2dc <i2c_write>

        if (i2c_rep_start(((uint8_t) ACC_MAG_SLAVE_ADDRESS << 1) | 1) == 0) {
     608:	8b e3       	ldi	r24, 0x3B	; 59
     60a:	0e 94 64 01 	call	0x2c8	; 0x2c8 <i2c_rep_start>
     60e:	81 11       	cpse	r24, r1
     610:	21 c0       	rjmp	.+66     	; 0x654 <read_acc_raw+0x6c>
            uint8_t xlg = i2c_read(ACK);
     612:	0e 94 7f 01 	call	0x2fe	; 0x2fe <i2c_readAck>
     616:	f8 2e       	mov	r15, r24
            uint8_t xhg = i2c_read(ACK);
     618:	0e 94 7f 01 	call	0x2fe	; 0x2fe <i2c_readAck>
     61c:	d8 2e       	mov	r13, r24

            uint8_t ylg = i2c_read(ACK);
     61e:	0e 94 7f 01 	call	0x2fe	; 0x2fe <i2c_readAck>
     622:	d8 2f       	mov	r29, r24
            uint8_t yhg = i2c_read(ACK);
     624:	0e 94 7f 01 	call	0x2fe	; 0x2fe <i2c_readAck>
     628:	e8 2e       	mov	r14, r24

            uint8_t zlg = i2c_read(ACK);
     62a:	0e 94 7f 01 	call	0x2fe	; 0x2fe <i2c_readAck>
     62e:	c8 2f       	mov	r28, r24
            uint8_t zhg = i2c_read(NAK);
     630:	0e 94 89 01 	call	0x312	; 0x312 <i2c_readNak>

            _acc_raw_->x = (int16_t) (xhg << 8 | xlg);
     634:	2f 2d       	mov	r18, r15
     636:	30 e0       	ldi	r19, 0x00	; 0
     638:	3d 29       	or	r19, r13
     63a:	f8 01       	movw	r30, r16
     63c:	31 83       	std	Z+1, r19	; 0x01
     63e:	20 83       	st	Z, r18
            _acc_raw_->y = (int16_t) (yhg << 8 | ylg);
     640:	2d 2f       	mov	r18, r29
     642:	30 e0       	ldi	r19, 0x00	; 0
     644:	3e 29       	or	r19, r14
     646:	33 83       	std	Z+3, r19	; 0x03
     648:	22 83       	std	Z+2, r18	; 0x02
            _acc_raw_->z = (int16_t) (zhg << 8 | zlg);
     64a:	2c 2f       	mov	r18, r28
     64c:	30 e0       	ldi	r19, 0x00	; 0
     64e:	38 2b       	or	r19, r24
     650:	35 83       	std	Z+5, r19	; 0x05
     652:	24 83       	std	Z+4, r18	; 0x04

        }
    }

}/*read_acc_raw*/
     654:	df 91       	pop	r29
     656:	cf 91       	pop	r28
     658:	1f 91       	pop	r17
     65a:	0f 91       	pop	r16
     65c:	ff 90       	pop	r15
     65e:	ef 90       	pop	r14
     660:	df 90       	pop	r13
     662:	08 95       	ret

00000664 <read_acc_angel>:
/*************************************************************************
 * read_acc_angles values
 * 
 
 *************************************************************************/
void read_acc_angel(struct acc_val_raw *_acc_raw_, struct acc_val_angle *_acc_angle) {
     664:	8f 92       	push	r8
     666:	9f 92       	push	r9
     668:	af 92       	push	r10
     66a:	bf 92       	push	r11
     66c:	cf 92       	push	r12
     66e:	df 92       	push	r13
     670:	ef 92       	push	r14
     672:	ff 92       	push	r15
     674:	0f 93       	push	r16
     676:	1f 93       	push	r17
     678:	cf 93       	push	r28
     67a:	df 93       	push	r29
     67c:	8c 01       	movw	r16, r24
     67e:	eb 01       	movw	r28, r22
    _acc_angle->x = (float) (atan2(_acc_raw_->y, _acc_raw_->z) + M_PI) * RAD_TO_DEG;
     680:	fc 01       	movw	r30, r24
     682:	64 81       	ldd	r22, Z+4	; 0x04
     684:	75 81       	ldd	r23, Z+5	; 0x05
     686:	88 27       	eor	r24, r24
     688:	77 fd       	sbrc	r23, 7
     68a:	80 95       	com	r24
     68c:	98 2f       	mov	r25, r24
     68e:	0e 94 64 09 	call	0x12c8	; 0x12c8 <__floatsisf>
     692:	6b 01       	movw	r12, r22
     694:	7c 01       	movw	r14, r24
     696:	f8 01       	movw	r30, r16
     698:	62 81       	ldd	r22, Z+2	; 0x02
     69a:	73 81       	ldd	r23, Z+3	; 0x03
     69c:	88 27       	eor	r24, r24
     69e:	77 fd       	sbrc	r23, 7
     6a0:	80 95       	com	r24
     6a2:	98 2f       	mov	r25, r24
     6a4:	0e 94 64 09 	call	0x12c8	; 0x12c8 <__floatsisf>
     6a8:	a7 01       	movw	r20, r14
     6aa:	96 01       	movw	r18, r12
     6ac:	0e 94 76 08 	call	0x10ec	; 0x10ec <atan2>
     6b0:	4b 01       	movw	r8, r22
     6b2:	5c 01       	movw	r10, r24
    _acc_angle->y = (float) (atan2(_acc_raw_->z, _acc_raw_->x) + M_PI) * RAD_TO_DEG;
     6b4:	f8 01       	movw	r30, r16
     6b6:	60 81       	ld	r22, Z
     6b8:	71 81       	ldd	r23, Z+1	; 0x01
     6ba:	88 27       	eor	r24, r24
     6bc:	77 fd       	sbrc	r23, 7
     6be:	80 95       	com	r24
     6c0:	98 2f       	mov	r25, r24
     6c2:	0e 94 64 09 	call	0x12c8	; 0x12c8 <__floatsisf>
     6c6:	9b 01       	movw	r18, r22
     6c8:	ac 01       	movw	r20, r24
     6ca:	c7 01       	movw	r24, r14
     6cc:	b6 01       	movw	r22, r12
     6ce:	0e 94 76 08 	call	0x10ec	; 0x10ec <atan2>
     6d2:	2b ed       	ldi	r18, 0xDB	; 219
     6d4:	3f e0       	ldi	r19, 0x0F	; 15
     6d6:	49 e4       	ldi	r20, 0x49	; 73
     6d8:	50 e4       	ldi	r21, 0x40	; 64
     6da:	0e 94 03 08 	call	0x1006	; 0x1006 <__addsf3>
     6de:	21 ee       	ldi	r18, 0xE1	; 225
     6e0:	3e e2       	ldi	r19, 0x2E	; 46
     6e2:	45 e6       	ldi	r20, 0x65	; 101
     6e4:	52 e4       	ldi	r21, 0x42	; 66
     6e6:	0e 94 1c 0a 	call	0x1438	; 0x1438 <__mulsf3>
     6ea:	0e 94 31 09 	call	0x1262	; 0x1262 <__fixsfsi>
     6ee:	6b 01       	movw	r12, r22
     6f0:	7c 01       	movw	r14, r24
     6f2:	8b 01       	movw	r16, r22
     6f4:	7b 83       	std	Y+3, r23	; 0x03
     6f6:	6a 83       	std	Y+2, r22	; 0x02
 * read_acc_angles values
 * 
 
 *************************************************************************/
void read_acc_angel(struct acc_val_raw *_acc_raw_, struct acc_val_angle *_acc_angle) {
    _acc_angle->x = (float) (atan2(_acc_raw_->y, _acc_raw_->z) + M_PI) * RAD_TO_DEG;
     6f8:	2b ed       	ldi	r18, 0xDB	; 219
     6fa:	3f e0       	ldi	r19, 0x0F	; 15
     6fc:	49 e4       	ldi	r20, 0x49	; 73
     6fe:	50 e4       	ldi	r21, 0x40	; 64
     700:	c5 01       	movw	r24, r10
     702:	b4 01       	movw	r22, r8
     704:	0e 94 03 08 	call	0x1006	; 0x1006 <__addsf3>
     708:	21 ee       	ldi	r18, 0xE1	; 225
     70a:	3e e2       	ldi	r19, 0x2E	; 46
     70c:	45 e6       	ldi	r20, 0x65	; 101
     70e:	52 e4       	ldi	r21, 0x42	; 66
     710:	0e 94 1c 0a 	call	0x1438	; 0x1438 <__mulsf3>
     714:	0e 94 31 09 	call	0x1262	; 0x1262 <__fixsfsi>
    _acc_angle->y = (float) (atan2(_acc_raw_->z, _acc_raw_->x) + M_PI) * RAD_TO_DEG;
    
    _acc_angle->x -= (float) 180.0;
     718:	88 27       	eor	r24, r24
     71a:	77 fd       	sbrc	r23, 7
     71c:	80 95       	com	r24
     71e:	98 2f       	mov	r25, r24
     720:	0e 94 64 09 	call	0x12c8	; 0x12c8 <__floatsisf>
     724:	20 e0       	ldi	r18, 0x00	; 0
     726:	30 e0       	ldi	r19, 0x00	; 0
     728:	44 e3       	ldi	r20, 0x34	; 52
     72a:	53 e4       	ldi	r21, 0x43	; 67
     72c:	0e 94 02 08 	call	0x1004	; 0x1004 <__subsf3>
     730:	0e 94 31 09 	call	0x1262	; 0x1262 <__fixsfsi>
     734:	79 83       	std	Y+1, r23	; 0x01
     736:	68 83       	st	Y, r22
     738:	b6 01       	movw	r22, r12
     73a:	88 27       	eor	r24, r24
     73c:	77 fd       	sbrc	r23, 7
     73e:	80 95       	com	r24
     740:	98 2f       	mov	r25, r24
    if (_acc_angle->y > 90) {
     742:	0b 35       	cpi	r16, 0x5B	; 91
     744:	11 05       	cpc	r17, r1
     746:	4c f0       	brlt	.+18     	; 0x75a <read_acc_angel+0xf6>
        _acc_angle->y -= (float) 270;
     748:	0e 94 64 09 	call	0x12c8	; 0x12c8 <__floatsisf>
     74c:	20 e0       	ldi	r18, 0x00	; 0
     74e:	30 e0       	ldi	r19, 0x00	; 0
     750:	47 e8       	ldi	r20, 0x87	; 135
     752:	53 e4       	ldi	r21, 0x43	; 67
     754:	0e 94 02 08 	call	0x1004	; 0x1004 <__subsf3>
     758:	08 c0       	rjmp	.+16     	; 0x76a <read_acc_angel+0x106>
    } else {
        _acc_angle->y += (float) 90;
     75a:	0e 94 64 09 	call	0x12c8	; 0x12c8 <__floatsisf>
     75e:	20 e0       	ldi	r18, 0x00	; 0
     760:	30 e0       	ldi	r19, 0x00	; 0
     762:	44 eb       	ldi	r20, 0xB4	; 180
     764:	52 e4       	ldi	r21, 0x42	; 66
     766:	0e 94 03 08 	call	0x1006	; 0x1006 <__addsf3>
     76a:	0e 94 31 09 	call	0x1262	; 0x1262 <__fixsfsi>
     76e:	7b 83       	std	Y+3, r23	; 0x03
     770:	6a 83       	std	Y+2, r22	; 0x02
    }


}/*read_acc_angle*/
     772:	df 91       	pop	r29
     774:	cf 91       	pop	r28
     776:	1f 91       	pop	r17
     778:	0f 91       	pop	r16
     77a:	ff 90       	pop	r15
     77c:	ef 90       	pop	r14
     77e:	df 90       	pop	r13
     780:	cf 90       	pop	r12
     782:	bf 90       	pop	r11
     784:	af 90       	pop	r10
     786:	9f 90       	pop	r9
     788:	8f 90       	pop	r8
     78a:	08 95       	ret

0000078c <read_mag_raw>:
 * read_mag_raw values
 * 
 
 *************************************************************************/

void read_mag_raw(struct mag_val_raw *_mag_raw_) {
     78c:	df 92       	push	r13
     78e:	ef 92       	push	r14
     790:	ff 92       	push	r15
     792:	0f 93       	push	r16
     794:	1f 93       	push	r17
     796:	cf 93       	push	r28
     798:	df 93       	push	r29
     79a:	8c 01       	movw	r16, r24
    if (i2c_start(ACC_MAG_SLAVE_ADDRESS << 1) == 0) {
     79c:	8a e3       	ldi	r24, 0x3A	; 58
     79e:	0e 94 1b 01 	call	0x236	; 0x236 <i2c_start>
     7a2:	81 11       	cpse	r24, r1
     7a4:	29 c0       	rjmp	.+82     	; 0x7f8 <read_mag_raw+0x6c>
        i2c_write(ACC_MAG_OUT_X_L_M | (1 << 7)); //Auto increment registers by writing the MSB high
     7a6:	88 e8       	ldi	r24, 0x88	; 136
     7a8:	0e 94 6e 01 	call	0x2dc	; 0x2dc <i2c_write>

        if (i2c_rep_start(((uint8_t) ACC_MAG_SLAVE_ADDRESS << 1) | 1) == 0) {
     7ac:	8b e3       	ldi	r24, 0x3B	; 59
     7ae:	0e 94 64 01 	call	0x2c8	; 0x2c8 <i2c_rep_start>
     7b2:	81 11       	cpse	r24, r1
     7b4:	21 c0       	rjmp	.+66     	; 0x7f8 <read_mag_raw+0x6c>
            uint8_t xlm = i2c_read(ACK);
     7b6:	0e 94 7f 01 	call	0x2fe	; 0x2fe <i2c_readAck>
     7ba:	f8 2e       	mov	r15, r24
            uint8_t xhm = i2c_read(ACK);
     7bc:	0e 94 7f 01 	call	0x2fe	; 0x2fe <i2c_readAck>
     7c0:	d8 2e       	mov	r13, r24

            uint8_t ylm = i2c_read(ACK);
     7c2:	0e 94 7f 01 	call	0x2fe	; 0x2fe <i2c_readAck>
     7c6:	d8 2f       	mov	r29, r24
            uint8_t yhm = i2c_read(ACK);
     7c8:	0e 94 7f 01 	call	0x2fe	; 0x2fe <i2c_readAck>
     7cc:	e8 2e       	mov	r14, r24

            uint8_t zlm = i2c_read(ACK);
     7ce:	0e 94 7f 01 	call	0x2fe	; 0x2fe <i2c_readAck>
     7d2:	c8 2f       	mov	r28, r24
            uint8_t zhm = i2c_read(NAK);
     7d4:	0e 94 89 01 	call	0x312	; 0x312 <i2c_readNak>

            _mag_raw_->x = (int16_t) (xhm << 8 | xlm);
     7d8:	2f 2d       	mov	r18, r15
     7da:	30 e0       	ldi	r19, 0x00	; 0
     7dc:	3d 29       	or	r19, r13
     7de:	f8 01       	movw	r30, r16
     7e0:	31 83       	std	Z+1, r19	; 0x01
     7e2:	20 83       	st	Z, r18
            _mag_raw_->y = (int16_t) (yhm << 8 | ylm);
     7e4:	2d 2f       	mov	r18, r29
     7e6:	30 e0       	ldi	r19, 0x00	; 0
     7e8:	3e 29       	or	r19, r14
     7ea:	33 83       	std	Z+3, r19	; 0x03
     7ec:	22 83       	std	Z+2, r18	; 0x02
            _mag_raw_->z = (int16_t) (zhm << 8 | zlm);
     7ee:	2c 2f       	mov	r18, r28
     7f0:	30 e0       	ldi	r19, 0x00	; 0
     7f2:	38 2b       	or	r19, r24
     7f4:	35 83       	std	Z+5, r19	; 0x05
     7f6:	24 83       	std	Z+4, r18	; 0x04

        }
    }

     7f8:	df 91       	pop	r29
     7fa:	cf 91       	pop	r28
     7fc:	1f 91       	pop	r17
     7fe:	0f 91       	pop	r16
     800:	ff 90       	pop	r15
     802:	ef 90       	pop	r14
     804:	df 90       	pop	r13
     806:	08 95       	ret

00000808 <write_to_reg>:
 Return: 0 if success
         1 if fail
 
*************************************************************************/

uint8_t write_to_reg(unsigned char address_slave,unsigned char reg_slave, uint8_t data){
     808:	0f 93       	push	r16
     80a:	1f 93       	push	r17
     80c:	cf 93       	push	r28
     80e:	df 93       	push	r29
     810:	1f 92       	push	r1
     812:	cd b7       	in	r28, 0x3d	; 61
     814:	de b7       	in	r29, 0x3e	; 62
     816:	04 2f       	mov	r16, r20
     if (i2c_start(address_slave << 1) == 0) {
     818:	88 0f       	add	r24, r24
     81a:	69 83       	std	Y+1, r22	; 0x01
     81c:	0e 94 1b 01 	call	0x236	; 0x236 <i2c_start>
     820:	18 2f       	mov	r17, r24
     822:	69 81       	ldd	r22, Y+1	; 0x01
     824:	81 11       	cpse	r24, r1
     826:	09 c0       	rjmp	.+18     	; 0x83a <write_to_reg+0x32>
        i2c_write(reg_slave);
     828:	86 2f       	mov	r24, r22
     82a:	0e 94 6e 01 	call	0x2dc	; 0x2dc <i2c_write>
        i2c_write(data);
     82e:	80 2f       	mov	r24, r16
     830:	0e 94 6e 01 	call	0x2dc	; 0x2dc <i2c_write>
        i2c_stop();
     834:	0e 94 66 01 	call	0x2cc	; 0x2cc <i2c_stop>
        return 0;
     838:	01 c0       	rjmp	.+2      	; 0x83c <write_to_reg+0x34>
    } else {
        return 1;
     83a:	11 e0       	ldi	r17, 0x01	; 1
    }
}/*write_to_reg*/
     83c:	81 2f       	mov	r24, r17
     83e:	0f 90       	pop	r0
     840:	df 91       	pop	r29
     842:	cf 91       	pop	r28
     844:	1f 91       	pop	r17
     846:	0f 91       	pop	r16
     848:	08 95       	ret

0000084a <read_from_reg>:
 
 Return: Byte if success
         1 if fail
 
*************************************************************************/
uint8_t read_from_reg(unsigned char address_slave,unsigned reg_slave){
     84a:	1f 93       	push	r17
     84c:	cf 93       	push	r28
     84e:	df 93       	push	r29
     850:	1f 92       	push	r1
     852:	cd b7       	in	r28, 0x3d	; 61
     854:	de b7       	in	r29, 0x3e	; 62
     856:	18 2f       	mov	r17, r24
      if (i2c_start(address_slave << 1) == 0) {
     858:	88 0f       	add	r24, r24
     85a:	69 83       	std	Y+1, r22	; 0x01
     85c:	0e 94 1b 01 	call	0x236	; 0x236 <i2c_start>
     860:	69 81       	ldd	r22, Y+1	; 0x01
     862:	81 11       	cpse	r24, r1
     864:	10 c0       	rjmp	.+32     	; 0x886 <read_from_reg+0x3c>
        i2c_write(reg_slave);
     866:	86 2f       	mov	r24, r22
     868:	0e 94 6e 01 	call	0x2dc	; 0x2dc <i2c_write>
        if (i2c_rep_start(((uint8_t) address_slave << 1) | 1) == 0) {
     86c:	81 2f       	mov	r24, r17
     86e:	88 0f       	add	r24, r24
     870:	81 60       	ori	r24, 0x01	; 1
     872:	0e 94 64 01 	call	0x2c8	; 0x2c8 <i2c_rep_start>
     876:	81 11       	cpse	r24, r1
     878:	06 c0       	rjmp	.+12     	; 0x886 <read_from_reg+0x3c>
            return i2c_read(NAK);
        }
    }
    return 1;
}/*read_from_reg*/
     87a:	0f 90       	pop	r0
     87c:	df 91       	pop	r29
     87e:	cf 91       	pop	r28
     880:	1f 91       	pop	r17
*************************************************************************/
uint8_t read_from_reg(unsigned char address_slave,unsigned reg_slave){
      if (i2c_start(address_slave << 1) == 0) {
        i2c_write(reg_slave);
        if (i2c_rep_start(((uint8_t) address_slave << 1) | 1) == 0) {
            return i2c_read(NAK);
     882:	0c 94 89 01 	jmp	0x312	; 0x312 <i2c_readNak>
        }
    }
    return 1;
}/*read_from_reg*/
     886:	81 e0       	ldi	r24, 0x01	; 1
     888:	0f 90       	pop	r0
     88a:	df 91       	pop	r29
     88c:	cf 91       	pop	r28
     88e:	1f 91       	pop	r17
     890:	08 95       	ret

00000892 <timer1_init>:
     892:	e1 e8       	ldi	r30, 0x81	; 129
     894:	f0 e0       	ldi	r31, 0x00	; 0
     896:	80 81       	ld	r24, Z
     898:	82 60       	ori	r24, 0x02	; 2
     89a:	80 83       	st	Z, r24
     89c:	10 92 85 00 	sts	0x0085, r1
     8a0:	10 92 84 00 	sts	0x0084, r1
     8a4:	08 95       	ret

000008a6 <main>:
 * 
 *  
 */


int main(void) {
     8a6:	cf 93       	push	r28
     8a8:	df 93       	push	r29
     8aa:	cd b7       	in	r28, 0x3d	; 61
     8ac:	de b7       	in	r29, 0x3e	; 62
     8ae:	2e 97       	sbiw	r28, 0x0e	; 14
     8b0:	0f b6       	in	r0, 0x3f	; 63
     8b2:	f8 94       	cli
     8b4:	de bf       	out	0x3e, r29	; 62
     8b6:	0f be       	out	0x3f, r0	; 63
     8b8:	cd bf       	out	0x3d, r28	; 61
    USART0Init();
     8ba:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <USART0Init>
    TWIInit();
     8be:	0e 94 12 01 	call	0x224	; 0x224 <TWIInit>
    Acc_angle acc_angel;
    
    Mag_raw mag_raw;

    //Set stream pointer
    FILE usart0_str = FDEV_SETUP_STREAM(USART0SendByte, USART0ReceiveByte, _FDEV_SETUP_RW);
     8c2:	fe 01       	movw	r30, r28
     8c4:	31 96       	adiw	r30, 0x01	; 1
     8c6:	8e e0       	ldi	r24, 0x0E	; 14
     8c8:	df 01       	movw	r26, r30
     8ca:	1d 92       	st	X+, r1
     8cc:	8a 95       	dec	r24
     8ce:	e9 f7       	brne	.-6      	; 0x8ca <main+0x24>
     8d0:	83 e0       	ldi	r24, 0x03	; 3
     8d2:	8c 83       	std	Y+4, r24	; 0x04
     8d4:	80 ef       	ldi	r24, 0xF0	; 240
     8d6:	90 e0       	ldi	r25, 0x00	; 0
     8d8:	9a 87       	std	Y+10, r25	; 0x0a
     8da:	89 87       	std	Y+9, r24	; 0x09
     8dc:	83 e0       	ldi	r24, 0x03	; 3
     8de:	91 e0       	ldi	r25, 0x01	; 1
     8e0:	9c 87       	std	Y+12, r25	; 0x0c
     8e2:	8b 87       	std	Y+11, r24	; 0x0b
    //assign our stream to standart I/O streams, cause why re-invent the wheel? Great for debuging :-) Don't forget to exclude later on.!!!!!!!!!!!!!!!
    stdin = stdout = &usart0_str;
     8e4:	f0 93 03 01 	sts	0x0103, r31
     8e8:	e0 93 02 01 	sts	0x0102, r30
     8ec:	f0 93 01 01 	sts	0x0101, r31
     8f0:	e0 93 00 01 	sts	0x0100, r30
    /*gyro*/
            init_gyro();
     8f4:	0e 94 09 02 	call	0x412	; 0x412 <init_gyro>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     8f8:	bf ef       	ldi	r27, 0xFF	; 255
     8fa:	29 e6       	ldi	r18, 0x69	; 105
     8fc:	88 e1       	ldi	r24, 0x18	; 24
     8fe:	b1 50       	subi	r27, 0x01	; 1
     900:	20 40       	sbci	r18, 0x00	; 0
     902:	80 40       	sbci	r24, 0x00	; 0
     904:	e1 f7       	brne	.-8      	; 0x8fe <main+0x58>
     906:	00 c0       	rjmp	.+0      	; 0x908 <__stack+0x9>
     908:	00 00       	nop
     90a:	f6 cf       	rjmp	.-20     	; 0x8f8 <main+0x52>

0000090c <vfprintf>:
     90c:	a3 e1       	ldi	r26, 0x13	; 19
     90e:	b0 e0       	ldi	r27, 0x00	; 0
     910:	ec e8       	ldi	r30, 0x8C	; 140
     912:	f4 e0       	ldi	r31, 0x04	; 4
     914:	0c 94 82 0a 	jmp	0x1504	; 0x1504 <__prologue_saves__>
     918:	6c 01       	movw	r12, r24
     91a:	4b 01       	movw	r8, r22
     91c:	2a 01       	movw	r4, r20
     91e:	fc 01       	movw	r30, r24
     920:	17 82       	std	Z+7, r1	; 0x07
     922:	16 82       	std	Z+6, r1	; 0x06
     924:	83 81       	ldd	r24, Z+3	; 0x03
     926:	81 ff       	sbrs	r24, 1
     928:	43 c3       	rjmp	.+1670   	; 0xfb0 <vfprintf+0x6a4>
     92a:	ae 01       	movw	r20, r28
     92c:	4f 5f       	subi	r20, 0xFF	; 255
     92e:	5f 4f       	sbci	r21, 0xFF	; 255
     930:	3a 01       	movw	r6, r20
     932:	f6 01       	movw	r30, r12
     934:	93 81       	ldd	r25, Z+3	; 0x03
     936:	f4 01       	movw	r30, r8
     938:	93 fd       	sbrc	r25, 3
     93a:	85 91       	lpm	r24, Z+
     93c:	93 ff       	sbrs	r25, 3
     93e:	81 91       	ld	r24, Z+
     940:	4f 01       	movw	r8, r30
     942:	88 23       	and	r24, r24
     944:	09 f4       	brne	.+2      	; 0x948 <vfprintf+0x3c>
     946:	30 c3       	rjmp	.+1632   	; 0xfa8 <vfprintf+0x69c>
     948:	85 32       	cpi	r24, 0x25	; 37
     94a:	39 f4       	brne	.+14     	; 0x95a <vfprintf+0x4e>
     94c:	93 fd       	sbrc	r25, 3
     94e:	85 91       	lpm	r24, Z+
     950:	93 ff       	sbrs	r25, 3
     952:	81 91       	ld	r24, Z+
     954:	4f 01       	movw	r8, r30
     956:	85 32       	cpi	r24, 0x25	; 37
     958:	39 f4       	brne	.+14     	; 0x968 <vfprintf+0x5c>
     95a:	b6 01       	movw	r22, r12
     95c:	90 e0       	ldi	r25, 0x00	; 0
     95e:	0e 94 a7 0b 	call	0x174e	; 0x174e <fputc>
     962:	52 01       	movw	r10, r4
     964:	25 01       	movw	r4, r10
     966:	e5 cf       	rjmp	.-54     	; 0x932 <vfprintf+0x26>
     968:	10 e0       	ldi	r17, 0x00	; 0
     96a:	f1 2c       	mov	r15, r1
     96c:	20 e0       	ldi	r18, 0x00	; 0
     96e:	20 32       	cpi	r18, 0x20	; 32
     970:	a0 f4       	brcc	.+40     	; 0x99a <vfprintf+0x8e>
     972:	8b 32       	cpi	r24, 0x2B	; 43
     974:	69 f0       	breq	.+26     	; 0x990 <vfprintf+0x84>
     976:	30 f4       	brcc	.+12     	; 0x984 <vfprintf+0x78>
     978:	80 32       	cpi	r24, 0x20	; 32
     97a:	59 f0       	breq	.+22     	; 0x992 <vfprintf+0x86>
     97c:	83 32       	cpi	r24, 0x23	; 35
     97e:	69 f4       	brne	.+26     	; 0x99a <vfprintf+0x8e>
     980:	20 61       	ori	r18, 0x10	; 16
     982:	2c c0       	rjmp	.+88     	; 0x9dc <vfprintf+0xd0>
     984:	8d 32       	cpi	r24, 0x2D	; 45
     986:	39 f0       	breq	.+14     	; 0x996 <vfprintf+0x8a>
     988:	80 33       	cpi	r24, 0x30	; 48
     98a:	39 f4       	brne	.+14     	; 0x99a <vfprintf+0x8e>
     98c:	21 60       	ori	r18, 0x01	; 1
     98e:	26 c0       	rjmp	.+76     	; 0x9dc <vfprintf+0xd0>
     990:	22 60       	ori	r18, 0x02	; 2
     992:	24 60       	ori	r18, 0x04	; 4
     994:	23 c0       	rjmp	.+70     	; 0x9dc <vfprintf+0xd0>
     996:	28 60       	ori	r18, 0x08	; 8
     998:	21 c0       	rjmp	.+66     	; 0x9dc <vfprintf+0xd0>
     99a:	27 fd       	sbrc	r18, 7
     99c:	27 c0       	rjmp	.+78     	; 0x9ec <vfprintf+0xe0>
     99e:	30 ed       	ldi	r19, 0xD0	; 208
     9a0:	38 0f       	add	r19, r24
     9a2:	3a 30       	cpi	r19, 0x0A	; 10
     9a4:	78 f4       	brcc	.+30     	; 0x9c4 <vfprintf+0xb8>
     9a6:	26 ff       	sbrs	r18, 6
     9a8:	06 c0       	rjmp	.+12     	; 0x9b6 <vfprintf+0xaa>
     9aa:	fa e0       	ldi	r31, 0x0A	; 10
     9ac:	1f 9f       	mul	r17, r31
     9ae:	30 0d       	add	r19, r0
     9b0:	11 24       	eor	r1, r1
     9b2:	13 2f       	mov	r17, r19
     9b4:	13 c0       	rjmp	.+38     	; 0x9dc <vfprintf+0xd0>
     9b6:	4a e0       	ldi	r20, 0x0A	; 10
     9b8:	f4 9e       	mul	r15, r20
     9ba:	30 0d       	add	r19, r0
     9bc:	11 24       	eor	r1, r1
     9be:	f3 2e       	mov	r15, r19
     9c0:	20 62       	ori	r18, 0x20	; 32
     9c2:	0c c0       	rjmp	.+24     	; 0x9dc <vfprintf+0xd0>
     9c4:	8e 32       	cpi	r24, 0x2E	; 46
     9c6:	21 f4       	brne	.+8      	; 0x9d0 <vfprintf+0xc4>
     9c8:	26 fd       	sbrc	r18, 6
     9ca:	ee c2       	rjmp	.+1500   	; 0xfa8 <vfprintf+0x69c>
     9cc:	20 64       	ori	r18, 0x40	; 64
     9ce:	06 c0       	rjmp	.+12     	; 0x9dc <vfprintf+0xd0>
     9d0:	8c 36       	cpi	r24, 0x6C	; 108
     9d2:	11 f4       	brne	.+4      	; 0x9d8 <vfprintf+0xcc>
     9d4:	20 68       	ori	r18, 0x80	; 128
     9d6:	02 c0       	rjmp	.+4      	; 0x9dc <vfprintf+0xd0>
     9d8:	88 36       	cpi	r24, 0x68	; 104
     9da:	41 f4       	brne	.+16     	; 0x9ec <vfprintf+0xe0>
     9dc:	f4 01       	movw	r30, r8
     9de:	93 fd       	sbrc	r25, 3
     9e0:	85 91       	lpm	r24, Z+
     9e2:	93 ff       	sbrs	r25, 3
     9e4:	81 91       	ld	r24, Z+
     9e6:	4f 01       	movw	r8, r30
     9e8:	81 11       	cpse	r24, r1
     9ea:	c1 cf       	rjmp	.-126    	; 0x96e <vfprintf+0x62>
     9ec:	9b eb       	ldi	r25, 0xBB	; 187
     9ee:	98 0f       	add	r25, r24
     9f0:	93 30       	cpi	r25, 0x03	; 3
     9f2:	18 f4       	brcc	.+6      	; 0x9fa <vfprintf+0xee>
     9f4:	20 61       	ori	r18, 0x10	; 16
     9f6:	80 5e       	subi	r24, 0xE0	; 224
     9f8:	06 c0       	rjmp	.+12     	; 0xa06 <vfprintf+0xfa>
     9fa:	9b e9       	ldi	r25, 0x9B	; 155
     9fc:	98 0f       	add	r25, r24
     9fe:	93 30       	cpi	r25, 0x03	; 3
     a00:	08 f0       	brcs	.+2      	; 0xa04 <vfprintf+0xf8>
     a02:	71 c1       	rjmp	.+738    	; 0xce6 <vfprintf+0x3da>
     a04:	2f 7e       	andi	r18, 0xEF	; 239
     a06:	26 ff       	sbrs	r18, 6
     a08:	16 e0       	ldi	r17, 0x06	; 6
     a0a:	2f 73       	andi	r18, 0x3F	; 63
     a0c:	32 2e       	mov	r3, r18
     a0e:	85 36       	cpi	r24, 0x65	; 101
     a10:	19 f4       	brne	.+6      	; 0xa18 <vfprintf+0x10c>
     a12:	20 64       	ori	r18, 0x40	; 64
     a14:	32 2e       	mov	r3, r18
     a16:	08 c0       	rjmp	.+16     	; 0xa28 <vfprintf+0x11c>
     a18:	86 36       	cpi	r24, 0x66	; 102
     a1a:	21 f4       	brne	.+8      	; 0xa24 <vfprintf+0x118>
     a1c:	f2 2f       	mov	r31, r18
     a1e:	f0 68       	ori	r31, 0x80	; 128
     a20:	3f 2e       	mov	r3, r31
     a22:	02 c0       	rjmp	.+4      	; 0xa28 <vfprintf+0x11c>
     a24:	11 11       	cpse	r17, r1
     a26:	11 50       	subi	r17, 0x01	; 1
     a28:	37 fe       	sbrs	r3, 7
     a2a:	07 c0       	rjmp	.+14     	; 0xa3a <vfprintf+0x12e>
     a2c:	1c 33       	cpi	r17, 0x3C	; 60
     a2e:	50 f4       	brcc	.+20     	; 0xa44 <vfprintf+0x138>
     a30:	ee 24       	eor	r14, r14
     a32:	e3 94       	inc	r14
     a34:	e1 0e       	add	r14, r17
     a36:	27 e0       	ldi	r18, 0x07	; 7
     a38:	0b c0       	rjmp	.+22     	; 0xa50 <vfprintf+0x144>
     a3a:	18 30       	cpi	r17, 0x08	; 8
     a3c:	38 f0       	brcs	.+14     	; 0xa4c <vfprintf+0x140>
     a3e:	27 e0       	ldi	r18, 0x07	; 7
     a40:	17 e0       	ldi	r17, 0x07	; 7
     a42:	05 c0       	rjmp	.+10     	; 0xa4e <vfprintf+0x142>
     a44:	27 e0       	ldi	r18, 0x07	; 7
     a46:	4c e3       	ldi	r20, 0x3C	; 60
     a48:	e4 2e       	mov	r14, r20
     a4a:	02 c0       	rjmp	.+4      	; 0xa50 <vfprintf+0x144>
     a4c:	21 2f       	mov	r18, r17
     a4e:	e1 2c       	mov	r14, r1
     a50:	52 01       	movw	r10, r4
     a52:	44 e0       	ldi	r20, 0x04	; 4
     a54:	a4 0e       	add	r10, r20
     a56:	b1 1c       	adc	r11, r1
     a58:	f2 01       	movw	r30, r4
     a5a:	60 81       	ld	r22, Z
     a5c:	71 81       	ldd	r23, Z+1	; 0x01
     a5e:	82 81       	ldd	r24, Z+2	; 0x02
     a60:	93 81       	ldd	r25, Z+3	; 0x03
     a62:	0e 2d       	mov	r16, r14
     a64:	a3 01       	movw	r20, r6
     a66:	0e 94 b9 0a 	call	0x1572	; 0x1572 <__ftoa_engine>
     a6a:	2c 01       	movw	r4, r24
     a6c:	09 81       	ldd	r16, Y+1	; 0x01
     a6e:	00 ff       	sbrs	r16, 0
     a70:	02 c0       	rjmp	.+4      	; 0xa76 <vfprintf+0x16a>
     a72:	03 ff       	sbrs	r16, 3
     a74:	07 c0       	rjmp	.+14     	; 0xa84 <vfprintf+0x178>
     a76:	31 fc       	sbrc	r3, 1
     a78:	08 c0       	rjmp	.+16     	; 0xa8a <vfprintf+0x17e>
     a7a:	32 fe       	sbrs	r3, 2
     a7c:	09 c0       	rjmp	.+18     	; 0xa90 <vfprintf+0x184>
     a7e:	30 e2       	ldi	r19, 0x20	; 32
     a80:	23 2e       	mov	r2, r19
     a82:	07 c0       	rjmp	.+14     	; 0xa92 <vfprintf+0x186>
     a84:	2d e2       	ldi	r18, 0x2D	; 45
     a86:	22 2e       	mov	r2, r18
     a88:	04 c0       	rjmp	.+8      	; 0xa92 <vfprintf+0x186>
     a8a:	9b e2       	ldi	r25, 0x2B	; 43
     a8c:	29 2e       	mov	r2, r25
     a8e:	01 c0       	rjmp	.+2      	; 0xa92 <vfprintf+0x186>
     a90:	21 2c       	mov	r2, r1
     a92:	80 2f       	mov	r24, r16
     a94:	8c 70       	andi	r24, 0x0C	; 12
     a96:	19 f0       	breq	.+6      	; 0xa9e <vfprintf+0x192>
     a98:	21 10       	cpse	r2, r1
     a9a:	68 c2       	rjmp	.+1232   	; 0xf6c <vfprintf+0x660>
     a9c:	a8 c2       	rjmp	.+1360   	; 0xfee <vfprintf+0x6e2>
     a9e:	37 fe       	sbrs	r3, 7
     aa0:	0f c0       	rjmp	.+30     	; 0xac0 <vfprintf+0x1b4>
     aa2:	e4 0c       	add	r14, r4
     aa4:	04 ff       	sbrs	r16, 4
     aa6:	04 c0       	rjmp	.+8      	; 0xab0 <vfprintf+0x1a4>
     aa8:	8a 81       	ldd	r24, Y+2	; 0x02
     aaa:	81 33       	cpi	r24, 0x31	; 49
     aac:	09 f4       	brne	.+2      	; 0xab0 <vfprintf+0x1a4>
     aae:	ea 94       	dec	r14
     ab0:	1e 14       	cp	r1, r14
     ab2:	74 f5       	brge	.+92     	; 0xb10 <vfprintf+0x204>
     ab4:	f8 e0       	ldi	r31, 0x08	; 8
     ab6:	fe 15       	cp	r31, r14
     ab8:	78 f5       	brcc	.+94     	; 0xb18 <vfprintf+0x20c>
     aba:	88 e0       	ldi	r24, 0x08	; 8
     abc:	e8 2e       	mov	r14, r24
     abe:	2c c0       	rjmp	.+88     	; 0xb18 <vfprintf+0x20c>
     ac0:	36 fc       	sbrc	r3, 6
     ac2:	2a c0       	rjmp	.+84     	; 0xb18 <vfprintf+0x20c>
     ac4:	81 2f       	mov	r24, r17
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	84 15       	cp	r24, r4
     aca:	95 05       	cpc	r25, r5
     acc:	9c f0       	brlt	.+38     	; 0xaf4 <vfprintf+0x1e8>
     ace:	2c ef       	ldi	r18, 0xFC	; 252
     ad0:	42 16       	cp	r4, r18
     ad2:	2f ef       	ldi	r18, 0xFF	; 255
     ad4:	52 06       	cpc	r5, r18
     ad6:	74 f0       	brlt	.+28     	; 0xaf4 <vfprintf+0x1e8>
     ad8:	43 2d       	mov	r20, r3
     ada:	40 68       	ori	r20, 0x80	; 128
     adc:	34 2e       	mov	r3, r20
     ade:	0a c0       	rjmp	.+20     	; 0xaf4 <vfprintf+0x1e8>
     ae0:	e2 e0       	ldi	r30, 0x02	; 2
     ae2:	f0 e0       	ldi	r31, 0x00	; 0
     ae4:	ec 0f       	add	r30, r28
     ae6:	fd 1f       	adc	r31, r29
     ae8:	e1 0f       	add	r30, r17
     aea:	f1 1d       	adc	r31, r1
     aec:	80 81       	ld	r24, Z
     aee:	80 33       	cpi	r24, 0x30	; 48
     af0:	19 f4       	brne	.+6      	; 0xaf8 <vfprintf+0x1ec>
     af2:	11 50       	subi	r17, 0x01	; 1
     af4:	11 11       	cpse	r17, r1
     af6:	f4 cf       	rjmp	.-24     	; 0xae0 <vfprintf+0x1d4>
     af8:	37 fe       	sbrs	r3, 7
     afa:	0e c0       	rjmp	.+28     	; 0xb18 <vfprintf+0x20c>
     afc:	ee 24       	eor	r14, r14
     afe:	e3 94       	inc	r14
     b00:	e1 0e       	add	r14, r17
     b02:	81 2f       	mov	r24, r17
     b04:	90 e0       	ldi	r25, 0x00	; 0
     b06:	48 16       	cp	r4, r24
     b08:	59 06       	cpc	r5, r25
     b0a:	2c f4       	brge	.+10     	; 0xb16 <vfprintf+0x20a>
     b0c:	14 19       	sub	r17, r4
     b0e:	04 c0       	rjmp	.+8      	; 0xb18 <vfprintf+0x20c>
     b10:	ee 24       	eor	r14, r14
     b12:	e3 94       	inc	r14
     b14:	01 c0       	rjmp	.+2      	; 0xb18 <vfprintf+0x20c>
     b16:	10 e0       	ldi	r17, 0x00	; 0
     b18:	37 fe       	sbrs	r3, 7
     b1a:	06 c0       	rjmp	.+12     	; 0xb28 <vfprintf+0x21c>
     b1c:	14 14       	cp	r1, r4
     b1e:	15 04       	cpc	r1, r5
     b20:	34 f4       	brge	.+12     	; 0xb2e <vfprintf+0x222>
     b22:	c2 01       	movw	r24, r4
     b24:	01 96       	adiw	r24, 0x01	; 1
     b26:	05 c0       	rjmp	.+10     	; 0xb32 <vfprintf+0x226>
     b28:	85 e0       	ldi	r24, 0x05	; 5
     b2a:	90 e0       	ldi	r25, 0x00	; 0
     b2c:	02 c0       	rjmp	.+4      	; 0xb32 <vfprintf+0x226>
     b2e:	81 e0       	ldi	r24, 0x01	; 1
     b30:	90 e0       	ldi	r25, 0x00	; 0
     b32:	21 10       	cpse	r2, r1
     b34:	01 96       	adiw	r24, 0x01	; 1
     b36:	11 23       	and	r17, r17
     b38:	31 f0       	breq	.+12     	; 0xb46 <vfprintf+0x23a>
     b3a:	21 2f       	mov	r18, r17
     b3c:	30 e0       	ldi	r19, 0x00	; 0
     b3e:	2f 5f       	subi	r18, 0xFF	; 255
     b40:	3f 4f       	sbci	r19, 0xFF	; 255
     b42:	82 0f       	add	r24, r18
     b44:	93 1f       	adc	r25, r19
     b46:	2f 2d       	mov	r18, r15
     b48:	30 e0       	ldi	r19, 0x00	; 0
     b4a:	82 17       	cp	r24, r18
     b4c:	93 07       	cpc	r25, r19
     b4e:	14 f4       	brge	.+4      	; 0xb54 <vfprintf+0x248>
     b50:	f8 1a       	sub	r15, r24
     b52:	01 c0       	rjmp	.+2      	; 0xb56 <vfprintf+0x24a>
     b54:	f1 2c       	mov	r15, r1
     b56:	83 2d       	mov	r24, r3
     b58:	89 70       	andi	r24, 0x09	; 9
     b5a:	49 f4       	brne	.+18     	; 0xb6e <vfprintf+0x262>
     b5c:	ff 20       	and	r15, r15
     b5e:	39 f0       	breq	.+14     	; 0xb6e <vfprintf+0x262>
     b60:	b6 01       	movw	r22, r12
     b62:	80 e2       	ldi	r24, 0x20	; 32
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	0e 94 a7 0b 	call	0x174e	; 0x174e <fputc>
     b6a:	fa 94       	dec	r15
     b6c:	f7 cf       	rjmp	.-18     	; 0xb5c <vfprintf+0x250>
     b6e:	22 20       	and	r2, r2
     b70:	29 f0       	breq	.+10     	; 0xb7c <vfprintf+0x270>
     b72:	b6 01       	movw	r22, r12
     b74:	82 2d       	mov	r24, r2
     b76:	90 e0       	ldi	r25, 0x00	; 0
     b78:	0e 94 a7 0b 	call	0x174e	; 0x174e <fputc>
     b7c:	33 fc       	sbrc	r3, 3
     b7e:	09 c0       	rjmp	.+18     	; 0xb92 <vfprintf+0x286>
     b80:	ff 20       	and	r15, r15
     b82:	39 f0       	breq	.+14     	; 0xb92 <vfprintf+0x286>
     b84:	b6 01       	movw	r22, r12
     b86:	80 e3       	ldi	r24, 0x30	; 48
     b88:	90 e0       	ldi	r25, 0x00	; 0
     b8a:	0e 94 a7 0b 	call	0x174e	; 0x174e <fputc>
     b8e:	fa 94       	dec	r15
     b90:	f7 cf       	rjmp	.-18     	; 0xb80 <vfprintf+0x274>
     b92:	37 fe       	sbrs	r3, 7
     b94:	5a c0       	rjmp	.+180    	; 0xc4a <vfprintf+0x33e>
     b96:	94 2d       	mov	r25, r4
     b98:	85 2d       	mov	r24, r5
     b9a:	57 fe       	sbrs	r5, 7
     b9c:	02 c0       	rjmp	.+4      	; 0xba2 <vfprintf+0x296>
     b9e:	90 e0       	ldi	r25, 0x00	; 0
     ba0:	80 e0       	ldi	r24, 0x00	; 0
     ba2:	29 2e       	mov	r2, r25
     ba4:	38 2e       	mov	r3, r24
     ba6:	20 e0       	ldi	r18, 0x00	; 0
     ba8:	30 e0       	ldi	r19, 0x00	; 0
     baa:	a2 01       	movw	r20, r4
     bac:	4e 19       	sub	r20, r14
     bae:	51 09       	sbc	r21, r1
     bb0:	5d 87       	std	Y+13, r21	; 0x0d
     bb2:	4c 87       	std	Y+12, r20	; 0x0c
     bb4:	a2 01       	movw	r20, r4
     bb6:	42 19       	sub	r20, r2
     bb8:	53 09       	sbc	r21, r3
     bba:	5f 87       	std	Y+15, r21	; 0x0f
     bbc:	4e 87       	std	Y+14, r20	; 0x0e
     bbe:	61 2f       	mov	r22, r17
     bc0:	70 e0       	ldi	r23, 0x00	; 0
     bc2:	44 27       	eor	r20, r20
     bc4:	55 27       	eor	r21, r21
     bc6:	46 1b       	sub	r20, r22
     bc8:	57 0b       	sbc	r21, r23
     bca:	59 8b       	std	Y+17, r21	; 0x11
     bcc:	48 8b       	std	Y+16, r20	; 0x10
     bce:	5f ef       	ldi	r21, 0xFF	; 255
     bd0:	25 16       	cp	r2, r21
     bd2:	35 06       	cpc	r3, r21
     bd4:	49 f4       	brne	.+18     	; 0xbe8 <vfprintf+0x2dc>
     bd6:	b6 01       	movw	r22, r12
     bd8:	8e e2       	ldi	r24, 0x2E	; 46
     bda:	90 e0       	ldi	r25, 0x00	; 0
     bdc:	2a 8b       	std	Y+18, r18	; 0x12
     bde:	3b 8b       	std	Y+19, r19	; 0x13
     be0:	0e 94 a7 0b 	call	0x174e	; 0x174e <fputc>
     be4:	3b 89       	ldd	r19, Y+19	; 0x13
     be6:	2a 89       	ldd	r18, Y+18	; 0x12
     be8:	42 14       	cp	r4, r2
     bea:	53 04       	cpc	r5, r3
     bec:	6c f0       	brlt	.+26     	; 0xc08 <vfprintf+0x2fc>
     bee:	4c 85       	ldd	r20, Y+12	; 0x0c
     bf0:	5d 85       	ldd	r21, Y+13	; 0x0d
     bf2:	42 15       	cp	r20, r2
     bf4:	53 05       	cpc	r21, r3
     bf6:	44 f4       	brge	.+16     	; 0xc08 <vfprintf+0x2fc>
     bf8:	ee 85       	ldd	r30, Y+14	; 0x0e
     bfa:	ff 85       	ldd	r31, Y+15	; 0x0f
     bfc:	e2 0f       	add	r30, r18
     bfe:	f3 1f       	adc	r31, r19
     c00:	e6 0d       	add	r30, r6
     c02:	f7 1d       	adc	r31, r7
     c04:	81 81       	ldd	r24, Z+1	; 0x01
     c06:	01 c0       	rjmp	.+2      	; 0xc0a <vfprintf+0x2fe>
     c08:	80 e3       	ldi	r24, 0x30	; 48
     c0a:	51 e0       	ldi	r21, 0x01	; 1
     c0c:	25 1a       	sub	r2, r21
     c0e:	31 08       	sbc	r3, r1
     c10:	2f 5f       	subi	r18, 0xFF	; 255
     c12:	3f 4f       	sbci	r19, 0xFF	; 255
     c14:	48 89       	ldd	r20, Y+16	; 0x10
     c16:	59 89       	ldd	r21, Y+17	; 0x11
     c18:	24 16       	cp	r2, r20
     c1a:	35 06       	cpc	r3, r21
     c1c:	4c f0       	brlt	.+18     	; 0xc30 <vfprintf+0x324>
     c1e:	b6 01       	movw	r22, r12
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	2a 8b       	std	Y+18, r18	; 0x12
     c24:	3b 8b       	std	Y+19, r19	; 0x13
     c26:	0e 94 a7 0b 	call	0x174e	; 0x174e <fputc>
     c2a:	2a 89       	ldd	r18, Y+18	; 0x12
     c2c:	3b 89       	ldd	r19, Y+19	; 0x13
     c2e:	cf cf       	rjmp	.-98     	; 0xbce <vfprintf+0x2c2>
     c30:	24 14       	cp	r2, r4
     c32:	35 04       	cpc	r3, r5
     c34:	39 f4       	brne	.+14     	; 0xc44 <vfprintf+0x338>
     c36:	9a 81       	ldd	r25, Y+2	; 0x02
     c38:	96 33       	cpi	r25, 0x36	; 54
     c3a:	18 f4       	brcc	.+6      	; 0xc42 <vfprintf+0x336>
     c3c:	95 33       	cpi	r25, 0x35	; 53
     c3e:	11 f4       	brne	.+4      	; 0xc44 <vfprintf+0x338>
     c40:	04 ff       	sbrs	r16, 4
     c42:	81 e3       	ldi	r24, 0x31	; 49
     c44:	b6 01       	movw	r22, r12
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	4b c0       	rjmp	.+150    	; 0xce0 <vfprintf+0x3d4>
     c4a:	8a 81       	ldd	r24, Y+2	; 0x02
     c4c:	81 33       	cpi	r24, 0x31	; 49
     c4e:	09 f0       	breq	.+2      	; 0xc52 <vfprintf+0x346>
     c50:	0f 7e       	andi	r16, 0xEF	; 239
     c52:	b6 01       	movw	r22, r12
     c54:	90 e0       	ldi	r25, 0x00	; 0
     c56:	0e 94 a7 0b 	call	0x174e	; 0x174e <fputc>
     c5a:	11 11       	cpse	r17, r1
     c5c:	05 c0       	rjmp	.+10     	; 0xc68 <vfprintf+0x35c>
     c5e:	34 fc       	sbrc	r3, 4
     c60:	18 c0       	rjmp	.+48     	; 0xc92 <vfprintf+0x386>
     c62:	85 e6       	ldi	r24, 0x65	; 101
     c64:	90 e0       	ldi	r25, 0x00	; 0
     c66:	17 c0       	rjmp	.+46     	; 0xc96 <vfprintf+0x38a>
     c68:	b6 01       	movw	r22, r12
     c6a:	8e e2       	ldi	r24, 0x2E	; 46
     c6c:	90 e0       	ldi	r25, 0x00	; 0
     c6e:	0e 94 a7 0b 	call	0x174e	; 0x174e <fputc>
     c72:	82 e0       	ldi	r24, 0x02	; 2
     c74:	ee 24       	eor	r14, r14
     c76:	e3 94       	inc	r14
     c78:	e8 0e       	add	r14, r24
     c7a:	f3 01       	movw	r30, r6
     c7c:	e8 0f       	add	r30, r24
     c7e:	f1 1d       	adc	r31, r1
     c80:	80 81       	ld	r24, Z
     c82:	b6 01       	movw	r22, r12
     c84:	90 e0       	ldi	r25, 0x00	; 0
     c86:	0e 94 a7 0b 	call	0x174e	; 0x174e <fputc>
     c8a:	11 50       	subi	r17, 0x01	; 1
     c8c:	8e 2d       	mov	r24, r14
     c8e:	91 f7       	brne	.-28     	; 0xc74 <vfprintf+0x368>
     c90:	e6 cf       	rjmp	.-52     	; 0xc5e <vfprintf+0x352>
     c92:	85 e4       	ldi	r24, 0x45	; 69
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	b6 01       	movw	r22, r12
     c98:	0e 94 a7 0b 	call	0x174e	; 0x174e <fputc>
     c9c:	57 fc       	sbrc	r5, 7
     c9e:	05 c0       	rjmp	.+10     	; 0xcaa <vfprintf+0x39e>
     ca0:	41 14       	cp	r4, r1
     ca2:	51 04       	cpc	r5, r1
     ca4:	39 f4       	brne	.+14     	; 0xcb4 <vfprintf+0x3a8>
     ca6:	04 ff       	sbrs	r16, 4
     ca8:	05 c0       	rjmp	.+10     	; 0xcb4 <vfprintf+0x3a8>
     caa:	51 94       	neg	r5
     cac:	41 94       	neg	r4
     cae:	51 08       	sbc	r5, r1
     cb0:	8d e2       	ldi	r24, 0x2D	; 45
     cb2:	01 c0       	rjmp	.+2      	; 0xcb6 <vfprintf+0x3aa>
     cb4:	8b e2       	ldi	r24, 0x2B	; 43
     cb6:	b6 01       	movw	r22, r12
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	0e 94 a7 0b 	call	0x174e	; 0x174e <fputc>
     cbe:	80 e3       	ldi	r24, 0x30	; 48
     cc0:	9a e0       	ldi	r25, 0x0A	; 10
     cc2:	49 16       	cp	r4, r25
     cc4:	51 04       	cpc	r5, r1
     cc6:	2c f0       	brlt	.+10     	; 0xcd2 <vfprintf+0x3c6>
     cc8:	8f 5f       	subi	r24, 0xFF	; 255
     cca:	5a e0       	ldi	r21, 0x0A	; 10
     ccc:	45 1a       	sub	r4, r21
     cce:	51 08       	sbc	r5, r1
     cd0:	f7 cf       	rjmp	.-18     	; 0xcc0 <vfprintf+0x3b4>
     cd2:	b6 01       	movw	r22, r12
     cd4:	90 e0       	ldi	r25, 0x00	; 0
     cd6:	0e 94 a7 0b 	call	0x174e	; 0x174e <fputc>
     cda:	b6 01       	movw	r22, r12
     cdc:	c2 01       	movw	r24, r4
     cde:	c0 96       	adiw	r24, 0x30	; 48
     ce0:	0e 94 a7 0b 	call	0x174e	; 0x174e <fputc>
     ce4:	57 c1       	rjmp	.+686    	; 0xf94 <vfprintf+0x688>
     ce6:	83 36       	cpi	r24, 0x63	; 99
     ce8:	31 f0       	breq	.+12     	; 0xcf6 <vfprintf+0x3ea>
     cea:	83 37       	cpi	r24, 0x73	; 115
     cec:	79 f0       	breq	.+30     	; 0xd0c <vfprintf+0x400>
     cee:	83 35       	cpi	r24, 0x53	; 83
     cf0:	09 f0       	breq	.+2      	; 0xcf4 <vfprintf+0x3e8>
     cf2:	58 c0       	rjmp	.+176    	; 0xda4 <vfprintf+0x498>
     cf4:	21 c0       	rjmp	.+66     	; 0xd38 <vfprintf+0x42c>
     cf6:	52 01       	movw	r10, r4
     cf8:	e2 e0       	ldi	r30, 0x02	; 2
     cfa:	ae 0e       	add	r10, r30
     cfc:	b1 1c       	adc	r11, r1
     cfe:	f2 01       	movw	r30, r4
     d00:	80 81       	ld	r24, Z
     d02:	89 83       	std	Y+1, r24	; 0x01
     d04:	01 e0       	ldi	r16, 0x01	; 1
     d06:	10 e0       	ldi	r17, 0x00	; 0
     d08:	23 01       	movw	r4, r6
     d0a:	14 c0       	rjmp	.+40     	; 0xd34 <vfprintf+0x428>
     d0c:	52 01       	movw	r10, r4
     d0e:	f2 e0       	ldi	r31, 0x02	; 2
     d10:	af 0e       	add	r10, r31
     d12:	b1 1c       	adc	r11, r1
     d14:	f2 01       	movw	r30, r4
     d16:	40 80       	ld	r4, Z
     d18:	51 80       	ldd	r5, Z+1	; 0x01
     d1a:	26 ff       	sbrs	r18, 6
     d1c:	03 c0       	rjmp	.+6      	; 0xd24 <vfprintf+0x418>
     d1e:	61 2f       	mov	r22, r17
     d20:	70 e0       	ldi	r23, 0x00	; 0
     d22:	02 c0       	rjmp	.+4      	; 0xd28 <vfprintf+0x41c>
     d24:	6f ef       	ldi	r22, 0xFF	; 255
     d26:	7f ef       	ldi	r23, 0xFF	; 255
     d28:	c2 01       	movw	r24, r4
     d2a:	2a 8b       	std	Y+18, r18	; 0x12
     d2c:	0e 94 9c 0b 	call	0x1738	; 0x1738 <strnlen>
     d30:	8c 01       	movw	r16, r24
     d32:	2a 89       	ldd	r18, Y+18	; 0x12
     d34:	2f 77       	andi	r18, 0x7F	; 127
     d36:	15 c0       	rjmp	.+42     	; 0xd62 <vfprintf+0x456>
     d38:	52 01       	movw	r10, r4
     d3a:	f2 e0       	ldi	r31, 0x02	; 2
     d3c:	af 0e       	add	r10, r31
     d3e:	b1 1c       	adc	r11, r1
     d40:	f2 01       	movw	r30, r4
     d42:	40 80       	ld	r4, Z
     d44:	51 80       	ldd	r5, Z+1	; 0x01
     d46:	26 ff       	sbrs	r18, 6
     d48:	03 c0       	rjmp	.+6      	; 0xd50 <vfprintf+0x444>
     d4a:	61 2f       	mov	r22, r17
     d4c:	70 e0       	ldi	r23, 0x00	; 0
     d4e:	02 c0       	rjmp	.+4      	; 0xd54 <vfprintf+0x448>
     d50:	6f ef       	ldi	r22, 0xFF	; 255
     d52:	7f ef       	ldi	r23, 0xFF	; 255
     d54:	c2 01       	movw	r24, r4
     d56:	2a 8b       	std	Y+18, r18	; 0x12
     d58:	0e 94 91 0b 	call	0x1722	; 0x1722 <strnlen_P>
     d5c:	8c 01       	movw	r16, r24
     d5e:	2a 89       	ldd	r18, Y+18	; 0x12
     d60:	20 68       	ori	r18, 0x80	; 128
     d62:	32 2e       	mov	r3, r18
     d64:	23 fd       	sbrc	r18, 3
     d66:	1a c0       	rjmp	.+52     	; 0xd9c <vfprintf+0x490>
     d68:	8f 2d       	mov	r24, r15
     d6a:	90 e0       	ldi	r25, 0x00	; 0
     d6c:	08 17       	cp	r16, r24
     d6e:	19 07       	cpc	r17, r25
     d70:	a8 f4       	brcc	.+42     	; 0xd9c <vfprintf+0x490>
     d72:	b6 01       	movw	r22, r12
     d74:	80 e2       	ldi	r24, 0x20	; 32
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	0e 94 a7 0b 	call	0x174e	; 0x174e <fputc>
     d7c:	fa 94       	dec	r15
     d7e:	f4 cf       	rjmp	.-24     	; 0xd68 <vfprintf+0x45c>
     d80:	f2 01       	movw	r30, r4
     d82:	37 fc       	sbrc	r3, 7
     d84:	85 91       	lpm	r24, Z+
     d86:	37 fe       	sbrs	r3, 7
     d88:	81 91       	ld	r24, Z+
     d8a:	2f 01       	movw	r4, r30
     d8c:	b6 01       	movw	r22, r12
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	0e 94 a7 0b 	call	0x174e	; 0x174e <fputc>
     d94:	f1 10       	cpse	r15, r1
     d96:	fa 94       	dec	r15
     d98:	01 50       	subi	r16, 0x01	; 1
     d9a:	11 09       	sbc	r17, r1
     d9c:	01 15       	cp	r16, r1
     d9e:	11 05       	cpc	r17, r1
     da0:	79 f7       	brne	.-34     	; 0xd80 <vfprintf+0x474>
     da2:	f8 c0       	rjmp	.+496    	; 0xf94 <vfprintf+0x688>
     da4:	84 36       	cpi	r24, 0x64	; 100
     da6:	11 f0       	breq	.+4      	; 0xdac <vfprintf+0x4a0>
     da8:	89 36       	cpi	r24, 0x69	; 105
     daa:	59 f5       	brne	.+86     	; 0xe02 <vfprintf+0x4f6>
     dac:	52 01       	movw	r10, r4
     dae:	27 ff       	sbrs	r18, 7
     db0:	09 c0       	rjmp	.+18     	; 0xdc4 <vfprintf+0x4b8>
     db2:	f4 e0       	ldi	r31, 0x04	; 4
     db4:	af 0e       	add	r10, r31
     db6:	b1 1c       	adc	r11, r1
     db8:	f2 01       	movw	r30, r4
     dba:	60 81       	ld	r22, Z
     dbc:	71 81       	ldd	r23, Z+1	; 0x01
     dbe:	82 81       	ldd	r24, Z+2	; 0x02
     dc0:	93 81       	ldd	r25, Z+3	; 0x03
     dc2:	0a c0       	rjmp	.+20     	; 0xdd8 <vfprintf+0x4cc>
     dc4:	f2 e0       	ldi	r31, 0x02	; 2
     dc6:	af 0e       	add	r10, r31
     dc8:	b1 1c       	adc	r11, r1
     dca:	f2 01       	movw	r30, r4
     dcc:	60 81       	ld	r22, Z
     dce:	71 81       	ldd	r23, Z+1	; 0x01
     dd0:	88 27       	eor	r24, r24
     dd2:	77 fd       	sbrc	r23, 7
     dd4:	80 95       	com	r24
     dd6:	98 2f       	mov	r25, r24
     dd8:	2f 76       	andi	r18, 0x6F	; 111
     dda:	32 2e       	mov	r3, r18
     ddc:	97 ff       	sbrs	r25, 7
     dde:	09 c0       	rjmp	.+18     	; 0xdf2 <vfprintf+0x4e6>
     de0:	90 95       	com	r25
     de2:	80 95       	com	r24
     de4:	70 95       	com	r23
     de6:	61 95       	neg	r22
     de8:	7f 4f       	sbci	r23, 0xFF	; 255
     dea:	8f 4f       	sbci	r24, 0xFF	; 255
     dec:	9f 4f       	sbci	r25, 0xFF	; 255
     dee:	20 68       	ori	r18, 0x80	; 128
     df0:	32 2e       	mov	r3, r18
     df2:	2a e0       	ldi	r18, 0x0A	; 10
     df4:	30 e0       	ldi	r19, 0x00	; 0
     df6:	a3 01       	movw	r20, r6
     df8:	0e 94 df 0b 	call	0x17be	; 0x17be <__ultoa_invert>
     dfc:	e8 2e       	mov	r14, r24
     dfe:	e6 18       	sub	r14, r6
     e00:	3f c0       	rjmp	.+126    	; 0xe80 <vfprintf+0x574>
     e02:	02 2f       	mov	r16, r18
     e04:	85 37       	cpi	r24, 0x75	; 117
     e06:	21 f4       	brne	.+8      	; 0xe10 <vfprintf+0x504>
     e08:	0f 7e       	andi	r16, 0xEF	; 239
     e0a:	2a e0       	ldi	r18, 0x0A	; 10
     e0c:	30 e0       	ldi	r19, 0x00	; 0
     e0e:	1d c0       	rjmp	.+58     	; 0xe4a <vfprintf+0x53e>
     e10:	09 7f       	andi	r16, 0xF9	; 249
     e12:	8f 36       	cpi	r24, 0x6F	; 111
     e14:	91 f0       	breq	.+36     	; 0xe3a <vfprintf+0x52e>
     e16:	18 f4       	brcc	.+6      	; 0xe1e <vfprintf+0x512>
     e18:	88 35       	cpi	r24, 0x58	; 88
     e1a:	59 f0       	breq	.+22     	; 0xe32 <vfprintf+0x526>
     e1c:	c5 c0       	rjmp	.+394    	; 0xfa8 <vfprintf+0x69c>
     e1e:	80 37       	cpi	r24, 0x70	; 112
     e20:	19 f0       	breq	.+6      	; 0xe28 <vfprintf+0x51c>
     e22:	88 37       	cpi	r24, 0x78	; 120
     e24:	11 f0       	breq	.+4      	; 0xe2a <vfprintf+0x51e>
     e26:	c0 c0       	rjmp	.+384    	; 0xfa8 <vfprintf+0x69c>
     e28:	00 61       	ori	r16, 0x10	; 16
     e2a:	04 ff       	sbrs	r16, 4
     e2c:	09 c0       	rjmp	.+18     	; 0xe40 <vfprintf+0x534>
     e2e:	04 60       	ori	r16, 0x04	; 4
     e30:	07 c0       	rjmp	.+14     	; 0xe40 <vfprintf+0x534>
     e32:	24 ff       	sbrs	r18, 4
     e34:	08 c0       	rjmp	.+16     	; 0xe46 <vfprintf+0x53a>
     e36:	06 60       	ori	r16, 0x06	; 6
     e38:	06 c0       	rjmp	.+12     	; 0xe46 <vfprintf+0x53a>
     e3a:	28 e0       	ldi	r18, 0x08	; 8
     e3c:	30 e0       	ldi	r19, 0x00	; 0
     e3e:	05 c0       	rjmp	.+10     	; 0xe4a <vfprintf+0x53e>
     e40:	20 e1       	ldi	r18, 0x10	; 16
     e42:	30 e0       	ldi	r19, 0x00	; 0
     e44:	02 c0       	rjmp	.+4      	; 0xe4a <vfprintf+0x53e>
     e46:	20 e1       	ldi	r18, 0x10	; 16
     e48:	32 e0       	ldi	r19, 0x02	; 2
     e4a:	52 01       	movw	r10, r4
     e4c:	07 ff       	sbrs	r16, 7
     e4e:	09 c0       	rjmp	.+18     	; 0xe62 <vfprintf+0x556>
     e50:	f4 e0       	ldi	r31, 0x04	; 4
     e52:	af 0e       	add	r10, r31
     e54:	b1 1c       	adc	r11, r1
     e56:	f2 01       	movw	r30, r4
     e58:	60 81       	ld	r22, Z
     e5a:	71 81       	ldd	r23, Z+1	; 0x01
     e5c:	82 81       	ldd	r24, Z+2	; 0x02
     e5e:	93 81       	ldd	r25, Z+3	; 0x03
     e60:	08 c0       	rjmp	.+16     	; 0xe72 <vfprintf+0x566>
     e62:	f2 e0       	ldi	r31, 0x02	; 2
     e64:	af 0e       	add	r10, r31
     e66:	b1 1c       	adc	r11, r1
     e68:	f2 01       	movw	r30, r4
     e6a:	60 81       	ld	r22, Z
     e6c:	71 81       	ldd	r23, Z+1	; 0x01
     e6e:	80 e0       	ldi	r24, 0x00	; 0
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	a3 01       	movw	r20, r6
     e74:	0e 94 df 0b 	call	0x17be	; 0x17be <__ultoa_invert>
     e78:	e8 2e       	mov	r14, r24
     e7a:	e6 18       	sub	r14, r6
     e7c:	0f 77       	andi	r16, 0x7F	; 127
     e7e:	30 2e       	mov	r3, r16
     e80:	36 fe       	sbrs	r3, 6
     e82:	0b c0       	rjmp	.+22     	; 0xe9a <vfprintf+0x58e>
     e84:	33 2d       	mov	r19, r3
     e86:	3e 7f       	andi	r19, 0xFE	; 254
     e88:	e1 16       	cp	r14, r17
     e8a:	50 f4       	brcc	.+20     	; 0xea0 <vfprintf+0x594>
     e8c:	34 fe       	sbrs	r3, 4
     e8e:	0a c0       	rjmp	.+20     	; 0xea4 <vfprintf+0x598>
     e90:	32 fc       	sbrc	r3, 2
     e92:	08 c0       	rjmp	.+16     	; 0xea4 <vfprintf+0x598>
     e94:	33 2d       	mov	r19, r3
     e96:	3e 7e       	andi	r19, 0xEE	; 238
     e98:	05 c0       	rjmp	.+10     	; 0xea4 <vfprintf+0x598>
     e9a:	0e 2d       	mov	r16, r14
     e9c:	33 2d       	mov	r19, r3
     e9e:	03 c0       	rjmp	.+6      	; 0xea6 <vfprintf+0x59a>
     ea0:	0e 2d       	mov	r16, r14
     ea2:	01 c0       	rjmp	.+2      	; 0xea6 <vfprintf+0x59a>
     ea4:	01 2f       	mov	r16, r17
     ea6:	34 ff       	sbrs	r19, 4
     ea8:	0c c0       	rjmp	.+24     	; 0xec2 <vfprintf+0x5b6>
     eaa:	fe 01       	movw	r30, r28
     eac:	ee 0d       	add	r30, r14
     eae:	f1 1d       	adc	r31, r1
     eb0:	80 81       	ld	r24, Z
     eb2:	80 33       	cpi	r24, 0x30	; 48
     eb4:	11 f4       	brne	.+4      	; 0xeba <vfprintf+0x5ae>
     eb6:	39 7e       	andi	r19, 0xE9	; 233
     eb8:	08 c0       	rjmp	.+16     	; 0xeca <vfprintf+0x5be>
     eba:	32 ff       	sbrs	r19, 2
     ebc:	05 c0       	rjmp	.+10     	; 0xec8 <vfprintf+0x5bc>
     ebe:	0e 5f       	subi	r16, 0xFE	; 254
     ec0:	04 c0       	rjmp	.+8      	; 0xeca <vfprintf+0x5be>
     ec2:	83 2f       	mov	r24, r19
     ec4:	86 78       	andi	r24, 0x86	; 134
     ec6:	09 f0       	breq	.+2      	; 0xeca <vfprintf+0x5be>
     ec8:	0f 5f       	subi	r16, 0xFF	; 255
     eca:	33 fd       	sbrc	r19, 3
     ecc:	13 c0       	rjmp	.+38     	; 0xef4 <vfprintf+0x5e8>
     ece:	30 ff       	sbrs	r19, 0
     ed0:	06 c0       	rjmp	.+12     	; 0xede <vfprintf+0x5d2>
     ed2:	1e 2d       	mov	r17, r14
     ed4:	0f 15       	cp	r16, r15
     ed6:	18 f4       	brcc	.+6      	; 0xede <vfprintf+0x5d2>
     ed8:	1f 0d       	add	r17, r15
     eda:	10 1b       	sub	r17, r16
     edc:	0f 2d       	mov	r16, r15
     ede:	0f 15       	cp	r16, r15
     ee0:	68 f4       	brcc	.+26     	; 0xefc <vfprintf+0x5f0>
     ee2:	b6 01       	movw	r22, r12
     ee4:	80 e2       	ldi	r24, 0x20	; 32
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	3b 8b       	std	Y+19, r19	; 0x13
     eea:	0e 94 a7 0b 	call	0x174e	; 0x174e <fputc>
     eee:	0f 5f       	subi	r16, 0xFF	; 255
     ef0:	3b 89       	ldd	r19, Y+19	; 0x13
     ef2:	f5 cf       	rjmp	.-22     	; 0xede <vfprintf+0x5d2>
     ef4:	0f 15       	cp	r16, r15
     ef6:	10 f4       	brcc	.+4      	; 0xefc <vfprintf+0x5f0>
     ef8:	f0 1a       	sub	r15, r16
     efa:	01 c0       	rjmp	.+2      	; 0xefe <vfprintf+0x5f2>
     efc:	f1 2c       	mov	r15, r1
     efe:	34 ff       	sbrs	r19, 4
     f00:	12 c0       	rjmp	.+36     	; 0xf26 <vfprintf+0x61a>
     f02:	b6 01       	movw	r22, r12
     f04:	80 e3       	ldi	r24, 0x30	; 48
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	3b 8b       	std	Y+19, r19	; 0x13
     f0a:	0e 94 a7 0b 	call	0x174e	; 0x174e <fputc>
     f0e:	3b 89       	ldd	r19, Y+19	; 0x13
     f10:	32 ff       	sbrs	r19, 2
     f12:	17 c0       	rjmp	.+46     	; 0xf42 <vfprintf+0x636>
     f14:	31 fd       	sbrc	r19, 1
     f16:	03 c0       	rjmp	.+6      	; 0xf1e <vfprintf+0x612>
     f18:	88 e7       	ldi	r24, 0x78	; 120
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	02 c0       	rjmp	.+4      	; 0xf22 <vfprintf+0x616>
     f1e:	88 e5       	ldi	r24, 0x58	; 88
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	b6 01       	movw	r22, r12
     f24:	0c c0       	rjmp	.+24     	; 0xf3e <vfprintf+0x632>
     f26:	83 2f       	mov	r24, r19
     f28:	86 78       	andi	r24, 0x86	; 134
     f2a:	59 f0       	breq	.+22     	; 0xf42 <vfprintf+0x636>
     f2c:	31 ff       	sbrs	r19, 1
     f2e:	02 c0       	rjmp	.+4      	; 0xf34 <vfprintf+0x628>
     f30:	8b e2       	ldi	r24, 0x2B	; 43
     f32:	01 c0       	rjmp	.+2      	; 0xf36 <vfprintf+0x62a>
     f34:	80 e2       	ldi	r24, 0x20	; 32
     f36:	37 fd       	sbrc	r19, 7
     f38:	8d e2       	ldi	r24, 0x2D	; 45
     f3a:	b6 01       	movw	r22, r12
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	0e 94 a7 0b 	call	0x174e	; 0x174e <fputc>
     f42:	e1 16       	cp	r14, r17
     f44:	38 f4       	brcc	.+14     	; 0xf54 <vfprintf+0x648>
     f46:	b6 01       	movw	r22, r12
     f48:	80 e3       	ldi	r24, 0x30	; 48
     f4a:	90 e0       	ldi	r25, 0x00	; 0
     f4c:	0e 94 a7 0b 	call	0x174e	; 0x174e <fputc>
     f50:	11 50       	subi	r17, 0x01	; 1
     f52:	f7 cf       	rjmp	.-18     	; 0xf42 <vfprintf+0x636>
     f54:	ea 94       	dec	r14
     f56:	f3 01       	movw	r30, r6
     f58:	ee 0d       	add	r30, r14
     f5a:	f1 1d       	adc	r31, r1
     f5c:	80 81       	ld	r24, Z
     f5e:	b6 01       	movw	r22, r12
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	0e 94 a7 0b 	call	0x174e	; 0x174e <fputc>
     f66:	e1 10       	cpse	r14, r1
     f68:	f5 cf       	rjmp	.-22     	; 0xf54 <vfprintf+0x648>
     f6a:	14 c0       	rjmp	.+40     	; 0xf94 <vfprintf+0x688>
     f6c:	f4 e0       	ldi	r31, 0x04	; 4
     f6e:	ff 15       	cp	r31, r15
     f70:	58 f5       	brcc	.+86     	; 0xfc8 <vfprintf+0x6bc>
     f72:	84 e0       	ldi	r24, 0x04	; 4
     f74:	f8 1a       	sub	r15, r24
     f76:	33 fe       	sbrs	r3, 3
     f78:	1e c0       	rjmp	.+60     	; 0xfb6 <vfprintf+0x6aa>
     f7a:	21 10       	cpse	r2, r1
     f7c:	26 c0       	rjmp	.+76     	; 0xfca <vfprintf+0x6be>
     f7e:	03 ff       	sbrs	r16, 3
     f80:	2a c0       	rjmp	.+84     	; 0xfd6 <vfprintf+0x6ca>
     f82:	06 e9       	ldi	r16, 0x96	; 150
     f84:	10 e0       	ldi	r17, 0x00	; 0
     f86:	f3 2d       	mov	r31, r3
     f88:	f0 71       	andi	r31, 0x10	; 16
     f8a:	3f 2e       	mov	r3, r31
     f8c:	f8 01       	movw	r30, r16
     f8e:	84 91       	lpm	r24, Z
     f90:	81 11       	cpse	r24, r1
     f92:	24 c0       	rjmp	.+72     	; 0xfdc <vfprintf+0x6d0>
     f94:	ff 20       	and	r15, r15
     f96:	09 f4       	brne	.+2      	; 0xf9a <vfprintf+0x68e>
     f98:	e5 cc       	rjmp	.-1590   	; 0x964 <vfprintf+0x58>
     f9a:	b6 01       	movw	r22, r12
     f9c:	80 e2       	ldi	r24, 0x20	; 32
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	0e 94 a7 0b 	call	0x174e	; 0x174e <fputc>
     fa4:	fa 94       	dec	r15
     fa6:	f6 cf       	rjmp	.-20     	; 0xf94 <vfprintf+0x688>
     fa8:	f6 01       	movw	r30, r12
     faa:	86 81       	ldd	r24, Z+6	; 0x06
     fac:	97 81       	ldd	r25, Z+7	; 0x07
     fae:	26 c0       	rjmp	.+76     	; 0xffc <vfprintf+0x6f0>
     fb0:	8f ef       	ldi	r24, 0xFF	; 255
     fb2:	9f ef       	ldi	r25, 0xFF	; 255
     fb4:	23 c0       	rjmp	.+70     	; 0xffc <vfprintf+0x6f0>
     fb6:	b6 01       	movw	r22, r12
     fb8:	80 e2       	ldi	r24, 0x20	; 32
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	0e 94 a7 0b 	call	0x174e	; 0x174e <fputc>
     fc0:	fa 94       	dec	r15
     fc2:	f1 10       	cpse	r15, r1
     fc4:	f8 cf       	rjmp	.-16     	; 0xfb6 <vfprintf+0x6aa>
     fc6:	d9 cf       	rjmp	.-78     	; 0xf7a <vfprintf+0x66e>
     fc8:	f1 2c       	mov	r15, r1
     fca:	b6 01       	movw	r22, r12
     fcc:	82 2d       	mov	r24, r2
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	0e 94 a7 0b 	call	0x174e	; 0x174e <fputc>
     fd4:	d4 cf       	rjmp	.-88     	; 0xf7e <vfprintf+0x672>
     fd6:	0a e9       	ldi	r16, 0x9A	; 154
     fd8:	10 e0       	ldi	r17, 0x00	; 0
     fda:	d5 cf       	rjmp	.-86     	; 0xf86 <vfprintf+0x67a>
     fdc:	31 10       	cpse	r3, r1
     fde:	80 52       	subi	r24, 0x20	; 32
     fe0:	b6 01       	movw	r22, r12
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	0e 94 a7 0b 	call	0x174e	; 0x174e <fputc>
     fe8:	0f 5f       	subi	r16, 0xFF	; 255
     fea:	1f 4f       	sbci	r17, 0xFF	; 255
     fec:	cf cf       	rjmp	.-98     	; 0xf8c <vfprintf+0x680>
     fee:	23 e0       	ldi	r18, 0x03	; 3
     ff0:	2f 15       	cp	r18, r15
     ff2:	10 f4       	brcc	.+4      	; 0xff8 <vfprintf+0x6ec>
     ff4:	83 e0       	ldi	r24, 0x03	; 3
     ff6:	be cf       	rjmp	.-132    	; 0xf74 <vfprintf+0x668>
     ff8:	f1 2c       	mov	r15, r1
     ffa:	c1 cf       	rjmp	.-126    	; 0xf7e <vfprintf+0x672>
     ffc:	63 96       	adiw	r28, 0x13	; 19
     ffe:	e2 e1       	ldi	r30, 0x12	; 18
    1000:	0c 94 9e 0a 	jmp	0x153c	; 0x153c <__epilogue_restores__>

00001004 <__subsf3>:
    1004:	50 58       	subi	r21, 0x80	; 128

00001006 <__addsf3>:
    1006:	bb 27       	eor	r27, r27
    1008:	aa 27       	eor	r26, r26
    100a:	0e d0       	rcall	.+28     	; 0x1028 <__addsf3x>
    100c:	d4 c1       	rjmp	.+936    	; 0x13b6 <__fp_round>
    100e:	c5 d1       	rcall	.+906    	; 0x139a <__fp_pscA>
    1010:	30 f0       	brcs	.+12     	; 0x101e <__addsf3+0x18>
    1012:	ca d1       	rcall	.+916    	; 0x13a8 <__fp_pscB>
    1014:	20 f0       	brcs	.+8      	; 0x101e <__addsf3+0x18>
    1016:	31 f4       	brne	.+12     	; 0x1024 <__addsf3+0x1e>
    1018:	9f 3f       	cpi	r25, 0xFF	; 255
    101a:	11 f4       	brne	.+4      	; 0x1020 <__addsf3+0x1a>
    101c:	1e f4       	brtc	.+6      	; 0x1024 <__addsf3+0x1e>
    101e:	95 c1       	rjmp	.+810    	; 0x134a <__fp_nan>
    1020:	0e f4       	brtc	.+2      	; 0x1024 <__addsf3+0x1e>
    1022:	e0 95       	com	r30
    1024:	e7 fb       	bst	r30, 7
    1026:	8b c1       	rjmp	.+790    	; 0x133e <__fp_inf>

00001028 <__addsf3x>:
    1028:	e9 2f       	mov	r30, r25
    102a:	d6 d1       	rcall	.+940    	; 0x13d8 <__fp_split3>
    102c:	80 f3       	brcs	.-32     	; 0x100e <__addsf3+0x8>
    102e:	ba 17       	cp	r27, r26
    1030:	62 07       	cpc	r22, r18
    1032:	73 07       	cpc	r23, r19
    1034:	84 07       	cpc	r24, r20
    1036:	95 07       	cpc	r25, r21
    1038:	18 f0       	brcs	.+6      	; 0x1040 <__addsf3x+0x18>
    103a:	71 f4       	brne	.+28     	; 0x1058 <__addsf3x+0x30>
    103c:	9e f5       	brtc	.+102    	; 0x10a4 <__addsf3x+0x7c>
    103e:	ee c1       	rjmp	.+988    	; 0x141c <__fp_zero>
    1040:	0e f4       	brtc	.+2      	; 0x1044 <__addsf3x+0x1c>
    1042:	e0 95       	com	r30
    1044:	0b 2e       	mov	r0, r27
    1046:	ba 2f       	mov	r27, r26
    1048:	a0 2d       	mov	r26, r0
    104a:	0b 01       	movw	r0, r22
    104c:	b9 01       	movw	r22, r18
    104e:	90 01       	movw	r18, r0
    1050:	0c 01       	movw	r0, r24
    1052:	ca 01       	movw	r24, r20
    1054:	a0 01       	movw	r20, r0
    1056:	11 24       	eor	r1, r1
    1058:	ff 27       	eor	r31, r31
    105a:	59 1b       	sub	r21, r25
    105c:	99 f0       	breq	.+38     	; 0x1084 <__addsf3x+0x5c>
    105e:	59 3f       	cpi	r21, 0xF9	; 249
    1060:	50 f4       	brcc	.+20     	; 0x1076 <__addsf3x+0x4e>
    1062:	50 3e       	cpi	r21, 0xE0	; 224
    1064:	68 f1       	brcs	.+90     	; 0x10c0 <__addsf3x+0x98>
    1066:	1a 16       	cp	r1, r26
    1068:	f0 40       	sbci	r31, 0x00	; 0
    106a:	a2 2f       	mov	r26, r18
    106c:	23 2f       	mov	r18, r19
    106e:	34 2f       	mov	r19, r20
    1070:	44 27       	eor	r20, r20
    1072:	58 5f       	subi	r21, 0xF8	; 248
    1074:	f3 cf       	rjmp	.-26     	; 0x105c <__addsf3x+0x34>
    1076:	46 95       	lsr	r20
    1078:	37 95       	ror	r19
    107a:	27 95       	ror	r18
    107c:	a7 95       	ror	r26
    107e:	f0 40       	sbci	r31, 0x00	; 0
    1080:	53 95       	inc	r21
    1082:	c9 f7       	brne	.-14     	; 0x1076 <__addsf3x+0x4e>
    1084:	7e f4       	brtc	.+30     	; 0x10a4 <__addsf3x+0x7c>
    1086:	1f 16       	cp	r1, r31
    1088:	ba 0b       	sbc	r27, r26
    108a:	62 0b       	sbc	r22, r18
    108c:	73 0b       	sbc	r23, r19
    108e:	84 0b       	sbc	r24, r20
    1090:	ba f0       	brmi	.+46     	; 0x10c0 <__addsf3x+0x98>
    1092:	91 50       	subi	r25, 0x01	; 1
    1094:	a1 f0       	breq	.+40     	; 0x10be <__addsf3x+0x96>
    1096:	ff 0f       	add	r31, r31
    1098:	bb 1f       	adc	r27, r27
    109a:	66 1f       	adc	r22, r22
    109c:	77 1f       	adc	r23, r23
    109e:	88 1f       	adc	r24, r24
    10a0:	c2 f7       	brpl	.-16     	; 0x1092 <__addsf3x+0x6a>
    10a2:	0e c0       	rjmp	.+28     	; 0x10c0 <__addsf3x+0x98>
    10a4:	ba 0f       	add	r27, r26
    10a6:	62 1f       	adc	r22, r18
    10a8:	73 1f       	adc	r23, r19
    10aa:	84 1f       	adc	r24, r20
    10ac:	48 f4       	brcc	.+18     	; 0x10c0 <__addsf3x+0x98>
    10ae:	87 95       	ror	r24
    10b0:	77 95       	ror	r23
    10b2:	67 95       	ror	r22
    10b4:	b7 95       	ror	r27
    10b6:	f7 95       	ror	r31
    10b8:	9e 3f       	cpi	r25, 0xFE	; 254
    10ba:	08 f0       	brcs	.+2      	; 0x10be <__addsf3x+0x96>
    10bc:	b3 cf       	rjmp	.-154    	; 0x1024 <__addsf3+0x1e>
    10be:	93 95       	inc	r25
    10c0:	88 0f       	add	r24, r24
    10c2:	08 f0       	brcs	.+2      	; 0x10c6 <__addsf3x+0x9e>
    10c4:	99 27       	eor	r25, r25
    10c6:	ee 0f       	add	r30, r30
    10c8:	97 95       	ror	r25
    10ca:	87 95       	ror	r24
    10cc:	08 95       	ret
    10ce:	65 d1       	rcall	.+714    	; 0x139a <__fp_pscA>
    10d0:	58 f0       	brcs	.+22     	; 0x10e8 <__addsf3x+0xc0>
    10d2:	80 e8       	ldi	r24, 0x80	; 128
    10d4:	91 e0       	ldi	r25, 0x01	; 1
    10d6:	09 f4       	brne	.+2      	; 0x10da <__addsf3x+0xb2>
    10d8:	9e ef       	ldi	r25, 0xFE	; 254
    10da:	66 d1       	rcall	.+716    	; 0x13a8 <__fp_pscB>
    10dc:	28 f0       	brcs	.+10     	; 0x10e8 <__addsf3x+0xc0>
    10de:	40 e8       	ldi	r20, 0x80	; 128
    10e0:	51 e0       	ldi	r21, 0x01	; 1
    10e2:	59 f4       	brne	.+22     	; 0x10fa <atan2+0xe>
    10e4:	5e ef       	ldi	r21, 0xFE	; 254
    10e6:	09 c0       	rjmp	.+18     	; 0x10fa <atan2+0xe>
    10e8:	30 c1       	rjmp	.+608    	; 0x134a <__fp_nan>
    10ea:	98 c1       	rjmp	.+816    	; 0x141c <__fp_zero>

000010ec <atan2>:
    10ec:	e9 2f       	mov	r30, r25
    10ee:	e0 78       	andi	r30, 0x80	; 128
    10f0:	73 d1       	rcall	.+742    	; 0x13d8 <__fp_split3>
    10f2:	68 f3       	brcs	.-38     	; 0x10ce <__addsf3x+0xa6>
    10f4:	09 2e       	mov	r0, r25
    10f6:	05 2a       	or	r0, r21
    10f8:	c1 f3       	breq	.-16     	; 0x10ea <__addsf3x+0xc2>
    10fa:	26 17       	cp	r18, r22
    10fc:	37 07       	cpc	r19, r23
    10fe:	48 07       	cpc	r20, r24
    1100:	59 07       	cpc	r21, r25
    1102:	38 f0       	brcs	.+14     	; 0x1112 <atan2+0x26>
    1104:	0e 2e       	mov	r0, r30
    1106:	07 f8       	bld	r0, 7
    1108:	e0 25       	eor	r30, r0
    110a:	69 f0       	breq	.+26     	; 0x1126 <atan2+0x3a>
    110c:	e0 25       	eor	r30, r0
    110e:	e0 64       	ori	r30, 0x40	; 64
    1110:	0a c0       	rjmp	.+20     	; 0x1126 <atan2+0x3a>
    1112:	ef 63       	ori	r30, 0x3F	; 63
    1114:	07 f8       	bld	r0, 7
    1116:	00 94       	com	r0
    1118:	07 fa       	bst	r0, 7
    111a:	db 01       	movw	r26, r22
    111c:	b9 01       	movw	r22, r18
    111e:	9d 01       	movw	r18, r26
    1120:	dc 01       	movw	r26, r24
    1122:	ca 01       	movw	r24, r20
    1124:	ad 01       	movw	r20, r26
    1126:	ef 93       	push	r30
    1128:	43 d0       	rcall	.+134    	; 0x11b0 <__divsf3_pse>
    112a:	45 d1       	rcall	.+650    	; 0x13b6 <__fp_round>
    112c:	0a d0       	rcall	.+20     	; 0x1142 <atan>
    112e:	5f 91       	pop	r21
    1130:	55 23       	and	r21, r21
    1132:	31 f0       	breq	.+12     	; 0x1140 <atan2+0x54>
    1134:	2b ed       	ldi	r18, 0xDB	; 219
    1136:	3f e0       	ldi	r19, 0x0F	; 15
    1138:	49 e4       	ldi	r20, 0x49	; 73
    113a:	50 fd       	sbrc	r21, 0
    113c:	49 ec       	ldi	r20, 0xC9	; 201
    113e:	63 cf       	rjmp	.-314    	; 0x1006 <__addsf3>
    1140:	08 95       	ret

00001142 <atan>:
    1142:	df 93       	push	r29
    1144:	dd 27       	eor	r29, r29
    1146:	b9 2f       	mov	r27, r25
    1148:	bf 77       	andi	r27, 0x7F	; 127
    114a:	40 e8       	ldi	r20, 0x80	; 128
    114c:	5f e3       	ldi	r21, 0x3F	; 63
    114e:	16 16       	cp	r1, r22
    1150:	17 06       	cpc	r1, r23
    1152:	48 07       	cpc	r20, r24
    1154:	5b 07       	cpc	r21, r27
    1156:	10 f4       	brcc	.+4      	; 0x115c <atan+0x1a>
    1158:	d9 2f       	mov	r29, r25
    115a:	67 d1       	rcall	.+718    	; 0x142a <inverse>
    115c:	9f 93       	push	r25
    115e:	8f 93       	push	r24
    1160:	7f 93       	push	r23
    1162:	6f 93       	push	r22
    1164:	cc d1       	rcall	.+920    	; 0x14fe <square>
    1166:	e8 e6       	ldi	r30, 0x68	; 104
    1168:	f0 e0       	ldi	r31, 0x00	; 0
    116a:	f2 d0       	rcall	.+484    	; 0x1350 <__fp_powser>
    116c:	24 d1       	rcall	.+584    	; 0x13b6 <__fp_round>
    116e:	2f 91       	pop	r18
    1170:	3f 91       	pop	r19
    1172:	4f 91       	pop	r20
    1174:	5f 91       	pop	r21
    1176:	6c d1       	rcall	.+728    	; 0x1450 <__mulsf3x>
    1178:	dd 23       	and	r29, r29
    117a:	49 f0       	breq	.+18     	; 0x118e <atan+0x4c>
    117c:	90 58       	subi	r25, 0x80	; 128
    117e:	a2 ea       	ldi	r26, 0xA2	; 162
    1180:	2a ed       	ldi	r18, 0xDA	; 218
    1182:	3f e0       	ldi	r19, 0x0F	; 15
    1184:	49 ec       	ldi	r20, 0xC9	; 201
    1186:	5f e3       	ldi	r21, 0x3F	; 63
    1188:	d0 78       	andi	r29, 0x80	; 128
    118a:	5d 27       	eor	r21, r29
    118c:	4d df       	rcall	.-358    	; 0x1028 <__addsf3x>
    118e:	df 91       	pop	r29
    1190:	12 c1       	rjmp	.+548    	; 0x13b6 <__fp_round>

00001192 <__divsf3>:
    1192:	0c d0       	rcall	.+24     	; 0x11ac <__divsf3x>
    1194:	10 c1       	rjmp	.+544    	; 0x13b6 <__fp_round>
    1196:	08 d1       	rcall	.+528    	; 0x13a8 <__fp_pscB>
    1198:	40 f0       	brcs	.+16     	; 0x11aa <__divsf3+0x18>
    119a:	ff d0       	rcall	.+510    	; 0x139a <__fp_pscA>
    119c:	30 f0       	brcs	.+12     	; 0x11aa <__divsf3+0x18>
    119e:	21 f4       	brne	.+8      	; 0x11a8 <__divsf3+0x16>
    11a0:	5f 3f       	cpi	r21, 0xFF	; 255
    11a2:	19 f0       	breq	.+6      	; 0x11aa <__divsf3+0x18>
    11a4:	cc c0       	rjmp	.+408    	; 0x133e <__fp_inf>
    11a6:	51 11       	cpse	r21, r1
    11a8:	3a c1       	rjmp	.+628    	; 0x141e <__fp_szero>
    11aa:	cf c0       	rjmp	.+414    	; 0x134a <__fp_nan>

000011ac <__divsf3x>:
    11ac:	15 d1       	rcall	.+554    	; 0x13d8 <__fp_split3>
    11ae:	98 f3       	brcs	.-26     	; 0x1196 <__divsf3+0x4>

000011b0 <__divsf3_pse>:
    11b0:	99 23       	and	r25, r25
    11b2:	c9 f3       	breq	.-14     	; 0x11a6 <__divsf3+0x14>
    11b4:	55 23       	and	r21, r21
    11b6:	b1 f3       	breq	.-20     	; 0x11a4 <__divsf3+0x12>
    11b8:	95 1b       	sub	r25, r21
    11ba:	55 0b       	sbc	r21, r21
    11bc:	bb 27       	eor	r27, r27
    11be:	aa 27       	eor	r26, r26
    11c0:	62 17       	cp	r22, r18
    11c2:	73 07       	cpc	r23, r19
    11c4:	84 07       	cpc	r24, r20
    11c6:	38 f0       	brcs	.+14     	; 0x11d6 <__divsf3_pse+0x26>
    11c8:	9f 5f       	subi	r25, 0xFF	; 255
    11ca:	5f 4f       	sbci	r21, 0xFF	; 255
    11cc:	22 0f       	add	r18, r18
    11ce:	33 1f       	adc	r19, r19
    11d0:	44 1f       	adc	r20, r20
    11d2:	aa 1f       	adc	r26, r26
    11d4:	a9 f3       	breq	.-22     	; 0x11c0 <__divsf3_pse+0x10>
    11d6:	33 d0       	rcall	.+102    	; 0x123e <__divsf3_pse+0x8e>
    11d8:	0e 2e       	mov	r0, r30
    11da:	3a f0       	brmi	.+14     	; 0x11ea <__divsf3_pse+0x3a>
    11dc:	e0 e8       	ldi	r30, 0x80	; 128
    11de:	30 d0       	rcall	.+96     	; 0x1240 <__divsf3_pse+0x90>
    11e0:	91 50       	subi	r25, 0x01	; 1
    11e2:	50 40       	sbci	r21, 0x00	; 0
    11e4:	e6 95       	lsr	r30
    11e6:	00 1c       	adc	r0, r0
    11e8:	ca f7       	brpl	.-14     	; 0x11dc <__divsf3_pse+0x2c>
    11ea:	29 d0       	rcall	.+82     	; 0x123e <__divsf3_pse+0x8e>
    11ec:	fe 2f       	mov	r31, r30
    11ee:	27 d0       	rcall	.+78     	; 0x123e <__divsf3_pse+0x8e>
    11f0:	66 0f       	add	r22, r22
    11f2:	77 1f       	adc	r23, r23
    11f4:	88 1f       	adc	r24, r24
    11f6:	bb 1f       	adc	r27, r27
    11f8:	26 17       	cp	r18, r22
    11fa:	37 07       	cpc	r19, r23
    11fc:	48 07       	cpc	r20, r24
    11fe:	ab 07       	cpc	r26, r27
    1200:	b0 e8       	ldi	r27, 0x80	; 128
    1202:	09 f0       	breq	.+2      	; 0x1206 <__divsf3_pse+0x56>
    1204:	bb 0b       	sbc	r27, r27
    1206:	80 2d       	mov	r24, r0
    1208:	bf 01       	movw	r22, r30
    120a:	ff 27       	eor	r31, r31
    120c:	93 58       	subi	r25, 0x83	; 131
    120e:	5f 4f       	sbci	r21, 0xFF	; 255
    1210:	2a f0       	brmi	.+10     	; 0x121c <__divsf3_pse+0x6c>
    1212:	9e 3f       	cpi	r25, 0xFE	; 254
    1214:	51 05       	cpc	r21, r1
    1216:	68 f0       	brcs	.+26     	; 0x1232 <__divsf3_pse+0x82>
    1218:	92 c0       	rjmp	.+292    	; 0x133e <__fp_inf>
    121a:	01 c1       	rjmp	.+514    	; 0x141e <__fp_szero>
    121c:	5f 3f       	cpi	r21, 0xFF	; 255
    121e:	ec f3       	brlt	.-6      	; 0x121a <__divsf3_pse+0x6a>
    1220:	98 3e       	cpi	r25, 0xE8	; 232
    1222:	dc f3       	brlt	.-10     	; 0x121a <__divsf3_pse+0x6a>
    1224:	86 95       	lsr	r24
    1226:	77 95       	ror	r23
    1228:	67 95       	ror	r22
    122a:	b7 95       	ror	r27
    122c:	f7 95       	ror	r31
    122e:	9f 5f       	subi	r25, 0xFF	; 255
    1230:	c9 f7       	brne	.-14     	; 0x1224 <__divsf3_pse+0x74>
    1232:	88 0f       	add	r24, r24
    1234:	91 1d       	adc	r25, r1
    1236:	96 95       	lsr	r25
    1238:	87 95       	ror	r24
    123a:	97 f9       	bld	r25, 7
    123c:	08 95       	ret
    123e:	e1 e0       	ldi	r30, 0x01	; 1
    1240:	66 0f       	add	r22, r22
    1242:	77 1f       	adc	r23, r23
    1244:	88 1f       	adc	r24, r24
    1246:	bb 1f       	adc	r27, r27
    1248:	62 17       	cp	r22, r18
    124a:	73 07       	cpc	r23, r19
    124c:	84 07       	cpc	r24, r20
    124e:	ba 07       	cpc	r27, r26
    1250:	20 f0       	brcs	.+8      	; 0x125a <__divsf3_pse+0xaa>
    1252:	62 1b       	sub	r22, r18
    1254:	73 0b       	sbc	r23, r19
    1256:	84 0b       	sbc	r24, r20
    1258:	ba 0b       	sbc	r27, r26
    125a:	ee 1f       	adc	r30, r30
    125c:	88 f7       	brcc	.-30     	; 0x1240 <__divsf3_pse+0x90>
    125e:	e0 95       	com	r30
    1260:	08 95       	ret

00001262 <__fixsfsi>:
    1262:	04 d0       	rcall	.+8      	; 0x126c <__fixunssfsi>
    1264:	68 94       	set
    1266:	b1 11       	cpse	r27, r1
    1268:	da c0       	rjmp	.+436    	; 0x141e <__fp_szero>
    126a:	08 95       	ret

0000126c <__fixunssfsi>:
    126c:	bd d0       	rcall	.+378    	; 0x13e8 <__fp_splitA>
    126e:	88 f0       	brcs	.+34     	; 0x1292 <__fixunssfsi+0x26>
    1270:	9f 57       	subi	r25, 0x7F	; 127
    1272:	90 f0       	brcs	.+36     	; 0x1298 <__fixunssfsi+0x2c>
    1274:	b9 2f       	mov	r27, r25
    1276:	99 27       	eor	r25, r25
    1278:	b7 51       	subi	r27, 0x17	; 23
    127a:	a0 f0       	brcs	.+40     	; 0x12a4 <__fixunssfsi+0x38>
    127c:	d1 f0       	breq	.+52     	; 0x12b2 <__fixunssfsi+0x46>
    127e:	66 0f       	add	r22, r22
    1280:	77 1f       	adc	r23, r23
    1282:	88 1f       	adc	r24, r24
    1284:	99 1f       	adc	r25, r25
    1286:	1a f0       	brmi	.+6      	; 0x128e <__fixunssfsi+0x22>
    1288:	ba 95       	dec	r27
    128a:	c9 f7       	brne	.-14     	; 0x127e <__fixunssfsi+0x12>
    128c:	12 c0       	rjmp	.+36     	; 0x12b2 <__fixunssfsi+0x46>
    128e:	b1 30       	cpi	r27, 0x01	; 1
    1290:	81 f0       	breq	.+32     	; 0x12b2 <__fixunssfsi+0x46>
    1292:	c4 d0       	rcall	.+392    	; 0x141c <__fp_zero>
    1294:	b1 e0       	ldi	r27, 0x01	; 1
    1296:	08 95       	ret
    1298:	c1 c0       	rjmp	.+386    	; 0x141c <__fp_zero>
    129a:	67 2f       	mov	r22, r23
    129c:	78 2f       	mov	r23, r24
    129e:	88 27       	eor	r24, r24
    12a0:	b8 5f       	subi	r27, 0xF8	; 248
    12a2:	39 f0       	breq	.+14     	; 0x12b2 <__fixunssfsi+0x46>
    12a4:	b9 3f       	cpi	r27, 0xF9	; 249
    12a6:	cc f3       	brlt	.-14     	; 0x129a <__fixunssfsi+0x2e>
    12a8:	86 95       	lsr	r24
    12aa:	77 95       	ror	r23
    12ac:	67 95       	ror	r22
    12ae:	b3 95       	inc	r27
    12b0:	d9 f7       	brne	.-10     	; 0x12a8 <__fixunssfsi+0x3c>
    12b2:	3e f4       	brtc	.+14     	; 0x12c2 <__fixunssfsi+0x56>
    12b4:	90 95       	com	r25
    12b6:	80 95       	com	r24
    12b8:	70 95       	com	r23
    12ba:	61 95       	neg	r22
    12bc:	7f 4f       	sbci	r23, 0xFF	; 255
    12be:	8f 4f       	sbci	r24, 0xFF	; 255
    12c0:	9f 4f       	sbci	r25, 0xFF	; 255
    12c2:	08 95       	ret

000012c4 <__floatunsisf>:
    12c4:	e8 94       	clt
    12c6:	09 c0       	rjmp	.+18     	; 0x12da <__floatsisf+0x12>

000012c8 <__floatsisf>:
    12c8:	97 fb       	bst	r25, 7
    12ca:	3e f4       	brtc	.+14     	; 0x12da <__floatsisf+0x12>
    12cc:	90 95       	com	r25
    12ce:	80 95       	com	r24
    12d0:	70 95       	com	r23
    12d2:	61 95       	neg	r22
    12d4:	7f 4f       	sbci	r23, 0xFF	; 255
    12d6:	8f 4f       	sbci	r24, 0xFF	; 255
    12d8:	9f 4f       	sbci	r25, 0xFF	; 255
    12da:	99 23       	and	r25, r25
    12dc:	a9 f0       	breq	.+42     	; 0x1308 <__floatsisf+0x40>
    12de:	f9 2f       	mov	r31, r25
    12e0:	96 e9       	ldi	r25, 0x96	; 150
    12e2:	bb 27       	eor	r27, r27
    12e4:	93 95       	inc	r25
    12e6:	f6 95       	lsr	r31
    12e8:	87 95       	ror	r24
    12ea:	77 95       	ror	r23
    12ec:	67 95       	ror	r22
    12ee:	b7 95       	ror	r27
    12f0:	f1 11       	cpse	r31, r1
    12f2:	f8 cf       	rjmp	.-16     	; 0x12e4 <__floatsisf+0x1c>
    12f4:	fa f4       	brpl	.+62     	; 0x1334 <__floatsisf+0x6c>
    12f6:	bb 0f       	add	r27, r27
    12f8:	11 f4       	brne	.+4      	; 0x12fe <__floatsisf+0x36>
    12fa:	60 ff       	sbrs	r22, 0
    12fc:	1b c0       	rjmp	.+54     	; 0x1334 <__floatsisf+0x6c>
    12fe:	6f 5f       	subi	r22, 0xFF	; 255
    1300:	7f 4f       	sbci	r23, 0xFF	; 255
    1302:	8f 4f       	sbci	r24, 0xFF	; 255
    1304:	9f 4f       	sbci	r25, 0xFF	; 255
    1306:	16 c0       	rjmp	.+44     	; 0x1334 <__floatsisf+0x6c>
    1308:	88 23       	and	r24, r24
    130a:	11 f0       	breq	.+4      	; 0x1310 <__floatsisf+0x48>
    130c:	96 e9       	ldi	r25, 0x96	; 150
    130e:	11 c0       	rjmp	.+34     	; 0x1332 <__floatsisf+0x6a>
    1310:	77 23       	and	r23, r23
    1312:	21 f0       	breq	.+8      	; 0x131c <__floatsisf+0x54>
    1314:	9e e8       	ldi	r25, 0x8E	; 142
    1316:	87 2f       	mov	r24, r23
    1318:	76 2f       	mov	r23, r22
    131a:	05 c0       	rjmp	.+10     	; 0x1326 <__floatsisf+0x5e>
    131c:	66 23       	and	r22, r22
    131e:	71 f0       	breq	.+28     	; 0x133c <__floatsisf+0x74>
    1320:	96 e8       	ldi	r25, 0x86	; 134
    1322:	86 2f       	mov	r24, r22
    1324:	70 e0       	ldi	r23, 0x00	; 0
    1326:	60 e0       	ldi	r22, 0x00	; 0
    1328:	2a f0       	brmi	.+10     	; 0x1334 <__floatsisf+0x6c>
    132a:	9a 95       	dec	r25
    132c:	66 0f       	add	r22, r22
    132e:	77 1f       	adc	r23, r23
    1330:	88 1f       	adc	r24, r24
    1332:	da f7       	brpl	.-10     	; 0x132a <__floatsisf+0x62>
    1334:	88 0f       	add	r24, r24
    1336:	96 95       	lsr	r25
    1338:	87 95       	ror	r24
    133a:	97 f9       	bld	r25, 7
    133c:	08 95       	ret

0000133e <__fp_inf>:
    133e:	97 f9       	bld	r25, 7
    1340:	9f 67       	ori	r25, 0x7F	; 127
    1342:	80 e8       	ldi	r24, 0x80	; 128
    1344:	70 e0       	ldi	r23, 0x00	; 0
    1346:	60 e0       	ldi	r22, 0x00	; 0
    1348:	08 95       	ret

0000134a <__fp_nan>:
    134a:	9f ef       	ldi	r25, 0xFF	; 255
    134c:	80 ec       	ldi	r24, 0xC0	; 192
    134e:	08 95       	ret

00001350 <__fp_powser>:
    1350:	df 93       	push	r29
    1352:	cf 93       	push	r28
    1354:	1f 93       	push	r17
    1356:	0f 93       	push	r16
    1358:	ff 92       	push	r15
    135a:	ef 92       	push	r14
    135c:	df 92       	push	r13
    135e:	7b 01       	movw	r14, r22
    1360:	8c 01       	movw	r16, r24
    1362:	68 94       	set
    1364:	05 c0       	rjmp	.+10     	; 0x1370 <__fp_powser+0x20>
    1366:	da 2e       	mov	r13, r26
    1368:	ef 01       	movw	r28, r30
    136a:	72 d0       	rcall	.+228    	; 0x1450 <__mulsf3x>
    136c:	fe 01       	movw	r30, r28
    136e:	e8 94       	clt
    1370:	a5 91       	lpm	r26, Z+
    1372:	25 91       	lpm	r18, Z+
    1374:	35 91       	lpm	r19, Z+
    1376:	45 91       	lpm	r20, Z+
    1378:	55 91       	lpm	r21, Z+
    137a:	ae f3       	brts	.-22     	; 0x1366 <__fp_powser+0x16>
    137c:	ef 01       	movw	r28, r30
    137e:	54 de       	rcall	.-856    	; 0x1028 <__addsf3x>
    1380:	fe 01       	movw	r30, r28
    1382:	97 01       	movw	r18, r14
    1384:	a8 01       	movw	r20, r16
    1386:	da 94       	dec	r13
    1388:	79 f7       	brne	.-34     	; 0x1368 <__fp_powser+0x18>
    138a:	df 90       	pop	r13
    138c:	ef 90       	pop	r14
    138e:	ff 90       	pop	r15
    1390:	0f 91       	pop	r16
    1392:	1f 91       	pop	r17
    1394:	cf 91       	pop	r28
    1396:	df 91       	pop	r29
    1398:	08 95       	ret

0000139a <__fp_pscA>:
    139a:	00 24       	eor	r0, r0
    139c:	0a 94       	dec	r0
    139e:	16 16       	cp	r1, r22
    13a0:	17 06       	cpc	r1, r23
    13a2:	18 06       	cpc	r1, r24
    13a4:	09 06       	cpc	r0, r25
    13a6:	08 95       	ret

000013a8 <__fp_pscB>:
    13a8:	00 24       	eor	r0, r0
    13aa:	0a 94       	dec	r0
    13ac:	12 16       	cp	r1, r18
    13ae:	13 06       	cpc	r1, r19
    13b0:	14 06       	cpc	r1, r20
    13b2:	05 06       	cpc	r0, r21
    13b4:	08 95       	ret

000013b6 <__fp_round>:
    13b6:	09 2e       	mov	r0, r25
    13b8:	03 94       	inc	r0
    13ba:	00 0c       	add	r0, r0
    13bc:	11 f4       	brne	.+4      	; 0x13c2 <__fp_round+0xc>
    13be:	88 23       	and	r24, r24
    13c0:	52 f0       	brmi	.+20     	; 0x13d6 <__fp_round+0x20>
    13c2:	bb 0f       	add	r27, r27
    13c4:	40 f4       	brcc	.+16     	; 0x13d6 <__fp_round+0x20>
    13c6:	bf 2b       	or	r27, r31
    13c8:	11 f4       	brne	.+4      	; 0x13ce <__fp_round+0x18>
    13ca:	60 ff       	sbrs	r22, 0
    13cc:	04 c0       	rjmp	.+8      	; 0x13d6 <__fp_round+0x20>
    13ce:	6f 5f       	subi	r22, 0xFF	; 255
    13d0:	7f 4f       	sbci	r23, 0xFF	; 255
    13d2:	8f 4f       	sbci	r24, 0xFF	; 255
    13d4:	9f 4f       	sbci	r25, 0xFF	; 255
    13d6:	08 95       	ret

000013d8 <__fp_split3>:
    13d8:	57 fd       	sbrc	r21, 7
    13da:	90 58       	subi	r25, 0x80	; 128
    13dc:	44 0f       	add	r20, r20
    13de:	55 1f       	adc	r21, r21
    13e0:	59 f0       	breq	.+22     	; 0x13f8 <__fp_splitA+0x10>
    13e2:	5f 3f       	cpi	r21, 0xFF	; 255
    13e4:	71 f0       	breq	.+28     	; 0x1402 <__fp_splitA+0x1a>
    13e6:	47 95       	ror	r20

000013e8 <__fp_splitA>:
    13e8:	88 0f       	add	r24, r24
    13ea:	97 fb       	bst	r25, 7
    13ec:	99 1f       	adc	r25, r25
    13ee:	61 f0       	breq	.+24     	; 0x1408 <__fp_splitA+0x20>
    13f0:	9f 3f       	cpi	r25, 0xFF	; 255
    13f2:	79 f0       	breq	.+30     	; 0x1412 <__fp_splitA+0x2a>
    13f4:	87 95       	ror	r24
    13f6:	08 95       	ret
    13f8:	12 16       	cp	r1, r18
    13fa:	13 06       	cpc	r1, r19
    13fc:	14 06       	cpc	r1, r20
    13fe:	55 1f       	adc	r21, r21
    1400:	f2 cf       	rjmp	.-28     	; 0x13e6 <__fp_split3+0xe>
    1402:	46 95       	lsr	r20
    1404:	f1 df       	rcall	.-30     	; 0x13e8 <__fp_splitA>
    1406:	08 c0       	rjmp	.+16     	; 0x1418 <__fp_splitA+0x30>
    1408:	16 16       	cp	r1, r22
    140a:	17 06       	cpc	r1, r23
    140c:	18 06       	cpc	r1, r24
    140e:	99 1f       	adc	r25, r25
    1410:	f1 cf       	rjmp	.-30     	; 0x13f4 <__fp_splitA+0xc>
    1412:	86 95       	lsr	r24
    1414:	71 05       	cpc	r23, r1
    1416:	61 05       	cpc	r22, r1
    1418:	08 94       	sec
    141a:	08 95       	ret

0000141c <__fp_zero>:
    141c:	e8 94       	clt

0000141e <__fp_szero>:
    141e:	bb 27       	eor	r27, r27
    1420:	66 27       	eor	r22, r22
    1422:	77 27       	eor	r23, r23
    1424:	cb 01       	movw	r24, r22
    1426:	97 f9       	bld	r25, 7
    1428:	08 95       	ret

0000142a <inverse>:
    142a:	9b 01       	movw	r18, r22
    142c:	ac 01       	movw	r20, r24
    142e:	60 e0       	ldi	r22, 0x00	; 0
    1430:	70 e0       	ldi	r23, 0x00	; 0
    1432:	80 e8       	ldi	r24, 0x80	; 128
    1434:	9f e3       	ldi	r25, 0x3F	; 63
    1436:	ad ce       	rjmp	.-678    	; 0x1192 <__divsf3>

00001438 <__mulsf3>:
    1438:	0b d0       	rcall	.+22     	; 0x1450 <__mulsf3x>
    143a:	bd cf       	rjmp	.-134    	; 0x13b6 <__fp_round>
    143c:	ae df       	rcall	.-164    	; 0x139a <__fp_pscA>
    143e:	28 f0       	brcs	.+10     	; 0x144a <__mulsf3+0x12>
    1440:	b3 df       	rcall	.-154    	; 0x13a8 <__fp_pscB>
    1442:	18 f0       	brcs	.+6      	; 0x144a <__mulsf3+0x12>
    1444:	95 23       	and	r25, r21
    1446:	09 f0       	breq	.+2      	; 0x144a <__mulsf3+0x12>
    1448:	7a cf       	rjmp	.-268    	; 0x133e <__fp_inf>
    144a:	7f cf       	rjmp	.-258    	; 0x134a <__fp_nan>
    144c:	11 24       	eor	r1, r1
    144e:	e7 cf       	rjmp	.-50     	; 0x141e <__fp_szero>

00001450 <__mulsf3x>:
    1450:	c3 df       	rcall	.-122    	; 0x13d8 <__fp_split3>
    1452:	a0 f3       	brcs	.-24     	; 0x143c <__mulsf3+0x4>

00001454 <__mulsf3_pse>:
    1454:	95 9f       	mul	r25, r21
    1456:	d1 f3       	breq	.-12     	; 0x144c <__mulsf3+0x14>
    1458:	95 0f       	add	r25, r21
    145a:	50 e0       	ldi	r21, 0x00	; 0
    145c:	55 1f       	adc	r21, r21
    145e:	62 9f       	mul	r22, r18
    1460:	f0 01       	movw	r30, r0
    1462:	72 9f       	mul	r23, r18
    1464:	bb 27       	eor	r27, r27
    1466:	f0 0d       	add	r31, r0
    1468:	b1 1d       	adc	r27, r1
    146a:	63 9f       	mul	r22, r19
    146c:	aa 27       	eor	r26, r26
    146e:	f0 0d       	add	r31, r0
    1470:	b1 1d       	adc	r27, r1
    1472:	aa 1f       	adc	r26, r26
    1474:	64 9f       	mul	r22, r20
    1476:	66 27       	eor	r22, r22
    1478:	b0 0d       	add	r27, r0
    147a:	a1 1d       	adc	r26, r1
    147c:	66 1f       	adc	r22, r22
    147e:	82 9f       	mul	r24, r18
    1480:	22 27       	eor	r18, r18
    1482:	b0 0d       	add	r27, r0
    1484:	a1 1d       	adc	r26, r1
    1486:	62 1f       	adc	r22, r18
    1488:	73 9f       	mul	r23, r19
    148a:	b0 0d       	add	r27, r0
    148c:	a1 1d       	adc	r26, r1
    148e:	62 1f       	adc	r22, r18
    1490:	83 9f       	mul	r24, r19
    1492:	a0 0d       	add	r26, r0
    1494:	61 1d       	adc	r22, r1
    1496:	22 1f       	adc	r18, r18
    1498:	74 9f       	mul	r23, r20
    149a:	33 27       	eor	r19, r19
    149c:	a0 0d       	add	r26, r0
    149e:	61 1d       	adc	r22, r1
    14a0:	23 1f       	adc	r18, r19
    14a2:	84 9f       	mul	r24, r20
    14a4:	60 0d       	add	r22, r0
    14a6:	21 1d       	adc	r18, r1
    14a8:	82 2f       	mov	r24, r18
    14aa:	76 2f       	mov	r23, r22
    14ac:	6a 2f       	mov	r22, r26
    14ae:	11 24       	eor	r1, r1
    14b0:	9f 57       	subi	r25, 0x7F	; 127
    14b2:	50 40       	sbci	r21, 0x00	; 0
    14b4:	8a f0       	brmi	.+34     	; 0x14d8 <__mulsf3_pse+0x84>
    14b6:	e1 f0       	breq	.+56     	; 0x14f0 <__mulsf3_pse+0x9c>
    14b8:	88 23       	and	r24, r24
    14ba:	4a f0       	brmi	.+18     	; 0x14ce <__mulsf3_pse+0x7a>
    14bc:	ee 0f       	add	r30, r30
    14be:	ff 1f       	adc	r31, r31
    14c0:	bb 1f       	adc	r27, r27
    14c2:	66 1f       	adc	r22, r22
    14c4:	77 1f       	adc	r23, r23
    14c6:	88 1f       	adc	r24, r24
    14c8:	91 50       	subi	r25, 0x01	; 1
    14ca:	50 40       	sbci	r21, 0x00	; 0
    14cc:	a9 f7       	brne	.-22     	; 0x14b8 <__mulsf3_pse+0x64>
    14ce:	9e 3f       	cpi	r25, 0xFE	; 254
    14d0:	51 05       	cpc	r21, r1
    14d2:	70 f0       	brcs	.+28     	; 0x14f0 <__mulsf3_pse+0x9c>
    14d4:	34 cf       	rjmp	.-408    	; 0x133e <__fp_inf>
    14d6:	a3 cf       	rjmp	.-186    	; 0x141e <__fp_szero>
    14d8:	5f 3f       	cpi	r21, 0xFF	; 255
    14da:	ec f3       	brlt	.-6      	; 0x14d6 <__mulsf3_pse+0x82>
    14dc:	98 3e       	cpi	r25, 0xE8	; 232
    14de:	dc f3       	brlt	.-10     	; 0x14d6 <__mulsf3_pse+0x82>
    14e0:	86 95       	lsr	r24
    14e2:	77 95       	ror	r23
    14e4:	67 95       	ror	r22
    14e6:	b7 95       	ror	r27
    14e8:	f7 95       	ror	r31
    14ea:	e7 95       	ror	r30
    14ec:	9f 5f       	subi	r25, 0xFF	; 255
    14ee:	c1 f7       	brne	.-16     	; 0x14e0 <__mulsf3_pse+0x8c>
    14f0:	fe 2b       	or	r31, r30
    14f2:	88 0f       	add	r24, r24
    14f4:	91 1d       	adc	r25, r1
    14f6:	96 95       	lsr	r25
    14f8:	87 95       	ror	r24
    14fa:	97 f9       	bld	r25, 7
    14fc:	08 95       	ret

000014fe <square>:
    14fe:	9b 01       	movw	r18, r22
    1500:	ac 01       	movw	r20, r24
    1502:	9a cf       	rjmp	.-204    	; 0x1438 <__mulsf3>

00001504 <__prologue_saves__>:
    1504:	2f 92       	push	r2
    1506:	3f 92       	push	r3
    1508:	4f 92       	push	r4
    150a:	5f 92       	push	r5
    150c:	6f 92       	push	r6
    150e:	7f 92       	push	r7
    1510:	8f 92       	push	r8
    1512:	9f 92       	push	r9
    1514:	af 92       	push	r10
    1516:	bf 92       	push	r11
    1518:	cf 92       	push	r12
    151a:	df 92       	push	r13
    151c:	ef 92       	push	r14
    151e:	ff 92       	push	r15
    1520:	0f 93       	push	r16
    1522:	1f 93       	push	r17
    1524:	cf 93       	push	r28
    1526:	df 93       	push	r29
    1528:	cd b7       	in	r28, 0x3d	; 61
    152a:	de b7       	in	r29, 0x3e	; 62
    152c:	ca 1b       	sub	r28, r26
    152e:	db 0b       	sbc	r29, r27
    1530:	0f b6       	in	r0, 0x3f	; 63
    1532:	f8 94       	cli
    1534:	de bf       	out	0x3e, r29	; 62
    1536:	0f be       	out	0x3f, r0	; 63
    1538:	cd bf       	out	0x3d, r28	; 61
    153a:	09 94       	ijmp

0000153c <__epilogue_restores__>:
    153c:	2a 88       	ldd	r2, Y+18	; 0x12
    153e:	39 88       	ldd	r3, Y+17	; 0x11
    1540:	48 88       	ldd	r4, Y+16	; 0x10
    1542:	5f 84       	ldd	r5, Y+15	; 0x0f
    1544:	6e 84       	ldd	r6, Y+14	; 0x0e
    1546:	7d 84       	ldd	r7, Y+13	; 0x0d
    1548:	8c 84       	ldd	r8, Y+12	; 0x0c
    154a:	9b 84       	ldd	r9, Y+11	; 0x0b
    154c:	aa 84       	ldd	r10, Y+10	; 0x0a
    154e:	b9 84       	ldd	r11, Y+9	; 0x09
    1550:	c8 84       	ldd	r12, Y+8	; 0x08
    1552:	df 80       	ldd	r13, Y+7	; 0x07
    1554:	ee 80       	ldd	r14, Y+6	; 0x06
    1556:	fd 80       	ldd	r15, Y+5	; 0x05
    1558:	0c 81       	ldd	r16, Y+4	; 0x04
    155a:	1b 81       	ldd	r17, Y+3	; 0x03
    155c:	aa 81       	ldd	r26, Y+2	; 0x02
    155e:	b9 81       	ldd	r27, Y+1	; 0x01
    1560:	ce 0f       	add	r28, r30
    1562:	d1 1d       	adc	r29, r1
    1564:	0f b6       	in	r0, 0x3f	; 63
    1566:	f8 94       	cli
    1568:	de bf       	out	0x3e, r29	; 62
    156a:	0f be       	out	0x3f, r0	; 63
    156c:	cd bf       	out	0x3d, r28	; 61
    156e:	ed 01       	movw	r28, r26
    1570:	08 95       	ret

00001572 <__ftoa_engine>:
    1572:	28 30       	cpi	r18, 0x08	; 8
    1574:	08 f0       	brcs	.+2      	; 0x1578 <__ftoa_engine+0x6>
    1576:	27 e0       	ldi	r18, 0x07	; 7
    1578:	33 27       	eor	r19, r19
    157a:	da 01       	movw	r26, r20
    157c:	99 0f       	add	r25, r25
    157e:	31 1d       	adc	r19, r1
    1580:	87 fd       	sbrc	r24, 7
    1582:	91 60       	ori	r25, 0x01	; 1
    1584:	00 96       	adiw	r24, 0x00	; 0
    1586:	61 05       	cpc	r22, r1
    1588:	71 05       	cpc	r23, r1
    158a:	39 f4       	brne	.+14     	; 0x159a <__ftoa_engine+0x28>
    158c:	32 60       	ori	r19, 0x02	; 2
    158e:	2e 5f       	subi	r18, 0xFE	; 254
    1590:	3d 93       	st	X+, r19
    1592:	30 e3       	ldi	r19, 0x30	; 48
    1594:	2a 95       	dec	r18
    1596:	e1 f7       	brne	.-8      	; 0x1590 <__ftoa_engine+0x1e>
    1598:	08 95       	ret
    159a:	9f 3f       	cpi	r25, 0xFF	; 255
    159c:	30 f0       	brcs	.+12     	; 0x15aa <__ftoa_engine+0x38>
    159e:	80 38       	cpi	r24, 0x80	; 128
    15a0:	71 05       	cpc	r23, r1
    15a2:	61 05       	cpc	r22, r1
    15a4:	09 f0       	breq	.+2      	; 0x15a8 <__ftoa_engine+0x36>
    15a6:	3c 5f       	subi	r19, 0xFC	; 252
    15a8:	3c 5f       	subi	r19, 0xFC	; 252
    15aa:	3d 93       	st	X+, r19
    15ac:	91 30       	cpi	r25, 0x01	; 1
    15ae:	08 f0       	brcs	.+2      	; 0x15b2 <__ftoa_engine+0x40>
    15b0:	80 68       	ori	r24, 0x80	; 128
    15b2:	91 1d       	adc	r25, r1
    15b4:	df 93       	push	r29
    15b6:	cf 93       	push	r28
    15b8:	1f 93       	push	r17
    15ba:	0f 93       	push	r16
    15bc:	ff 92       	push	r15
    15be:	ef 92       	push	r14
    15c0:	19 2f       	mov	r17, r25
    15c2:	98 7f       	andi	r25, 0xF8	; 248
    15c4:	96 95       	lsr	r25
    15c6:	e9 2f       	mov	r30, r25
    15c8:	96 95       	lsr	r25
    15ca:	96 95       	lsr	r25
    15cc:	e9 0f       	add	r30, r25
    15ce:	ff 27       	eor	r31, r31
    15d0:	e8 50       	subi	r30, 0x08	; 8
    15d2:	ff 4f       	sbci	r31, 0xFF	; 255
    15d4:	99 27       	eor	r25, r25
    15d6:	33 27       	eor	r19, r19
    15d8:	ee 24       	eor	r14, r14
    15da:	ff 24       	eor	r15, r15
    15dc:	a7 01       	movw	r20, r14
    15de:	e7 01       	movw	r28, r14
    15e0:	05 90       	lpm	r0, Z+
    15e2:	08 94       	sec
    15e4:	07 94       	ror	r0
    15e6:	28 f4       	brcc	.+10     	; 0x15f2 <__ftoa_engine+0x80>
    15e8:	36 0f       	add	r19, r22
    15ea:	e7 1e       	adc	r14, r23
    15ec:	f8 1e       	adc	r15, r24
    15ee:	49 1f       	adc	r20, r25
    15f0:	51 1d       	adc	r21, r1
    15f2:	66 0f       	add	r22, r22
    15f4:	77 1f       	adc	r23, r23
    15f6:	88 1f       	adc	r24, r24
    15f8:	99 1f       	adc	r25, r25
    15fa:	06 94       	lsr	r0
    15fc:	a1 f7       	brne	.-24     	; 0x15e6 <__ftoa_engine+0x74>
    15fe:	05 90       	lpm	r0, Z+
    1600:	07 94       	ror	r0
    1602:	28 f4       	brcc	.+10     	; 0x160e <__ftoa_engine+0x9c>
    1604:	e7 0e       	add	r14, r23
    1606:	f8 1e       	adc	r15, r24
    1608:	49 1f       	adc	r20, r25
    160a:	56 1f       	adc	r21, r22
    160c:	c1 1d       	adc	r28, r1
    160e:	77 0f       	add	r23, r23
    1610:	88 1f       	adc	r24, r24
    1612:	99 1f       	adc	r25, r25
    1614:	66 1f       	adc	r22, r22
    1616:	06 94       	lsr	r0
    1618:	a1 f7       	brne	.-24     	; 0x1602 <__ftoa_engine+0x90>
    161a:	05 90       	lpm	r0, Z+
    161c:	07 94       	ror	r0
    161e:	28 f4       	brcc	.+10     	; 0x162a <__ftoa_engine+0xb8>
    1620:	f8 0e       	add	r15, r24
    1622:	49 1f       	adc	r20, r25
    1624:	56 1f       	adc	r21, r22
    1626:	c7 1f       	adc	r28, r23
    1628:	d1 1d       	adc	r29, r1
    162a:	88 0f       	add	r24, r24
    162c:	99 1f       	adc	r25, r25
    162e:	66 1f       	adc	r22, r22
    1630:	77 1f       	adc	r23, r23
    1632:	06 94       	lsr	r0
    1634:	a1 f7       	brne	.-24     	; 0x161e <__ftoa_engine+0xac>
    1636:	05 90       	lpm	r0, Z+
    1638:	07 94       	ror	r0
    163a:	20 f4       	brcc	.+8      	; 0x1644 <__ftoa_engine+0xd2>
    163c:	49 0f       	add	r20, r25
    163e:	56 1f       	adc	r21, r22
    1640:	c7 1f       	adc	r28, r23
    1642:	d8 1f       	adc	r29, r24
    1644:	99 0f       	add	r25, r25
    1646:	66 1f       	adc	r22, r22
    1648:	77 1f       	adc	r23, r23
    164a:	88 1f       	adc	r24, r24
    164c:	06 94       	lsr	r0
    164e:	a9 f7       	brne	.-22     	; 0x163a <__ftoa_engine+0xc8>
    1650:	84 91       	lpm	r24, Z
    1652:	10 95       	com	r17
    1654:	17 70       	andi	r17, 0x07	; 7
    1656:	41 f0       	breq	.+16     	; 0x1668 <__ftoa_engine+0xf6>
    1658:	d6 95       	lsr	r29
    165a:	c7 95       	ror	r28
    165c:	57 95       	ror	r21
    165e:	47 95       	ror	r20
    1660:	f7 94       	ror	r15
    1662:	e7 94       	ror	r14
    1664:	1a 95       	dec	r17
    1666:	c1 f7       	brne	.-16     	; 0x1658 <__ftoa_engine+0xe6>
    1668:	ee e9       	ldi	r30, 0x9E	; 158
    166a:	f0 e0       	ldi	r31, 0x00	; 0
    166c:	68 94       	set
    166e:	15 90       	lpm	r1, Z+
    1670:	15 91       	lpm	r17, Z+
    1672:	35 91       	lpm	r19, Z+
    1674:	65 91       	lpm	r22, Z+
    1676:	95 91       	lpm	r25, Z+
    1678:	05 90       	lpm	r0, Z+
    167a:	7f e2       	ldi	r23, 0x2F	; 47
    167c:	73 95       	inc	r23
    167e:	e1 18       	sub	r14, r1
    1680:	f1 0a       	sbc	r15, r17
    1682:	43 0b       	sbc	r20, r19
    1684:	56 0b       	sbc	r21, r22
    1686:	c9 0b       	sbc	r28, r25
    1688:	d0 09       	sbc	r29, r0
    168a:	c0 f7       	brcc	.-16     	; 0x167c <__ftoa_engine+0x10a>
    168c:	e1 0c       	add	r14, r1
    168e:	f1 1e       	adc	r15, r17
    1690:	43 1f       	adc	r20, r19
    1692:	56 1f       	adc	r21, r22
    1694:	c9 1f       	adc	r28, r25
    1696:	d0 1d       	adc	r29, r0
    1698:	7e f4       	brtc	.+30     	; 0x16b8 <__ftoa_engine+0x146>
    169a:	70 33       	cpi	r23, 0x30	; 48
    169c:	11 f4       	brne	.+4      	; 0x16a2 <__ftoa_engine+0x130>
    169e:	8a 95       	dec	r24
    16a0:	e6 cf       	rjmp	.-52     	; 0x166e <__ftoa_engine+0xfc>
    16a2:	e8 94       	clt
    16a4:	01 50       	subi	r16, 0x01	; 1
    16a6:	30 f0       	brcs	.+12     	; 0x16b4 <__ftoa_engine+0x142>
    16a8:	08 0f       	add	r16, r24
    16aa:	0a f4       	brpl	.+2      	; 0x16ae <__ftoa_engine+0x13c>
    16ac:	00 27       	eor	r16, r16
    16ae:	02 17       	cp	r16, r18
    16b0:	08 f4       	brcc	.+2      	; 0x16b4 <__ftoa_engine+0x142>
    16b2:	20 2f       	mov	r18, r16
    16b4:	23 95       	inc	r18
    16b6:	02 2f       	mov	r16, r18
    16b8:	7a 33       	cpi	r23, 0x3A	; 58
    16ba:	28 f0       	brcs	.+10     	; 0x16c6 <__ftoa_engine+0x154>
    16bc:	79 e3       	ldi	r23, 0x39	; 57
    16be:	7d 93       	st	X+, r23
    16c0:	2a 95       	dec	r18
    16c2:	e9 f7       	brne	.-6      	; 0x16be <__ftoa_engine+0x14c>
    16c4:	10 c0       	rjmp	.+32     	; 0x16e6 <__ftoa_engine+0x174>
    16c6:	7d 93       	st	X+, r23
    16c8:	2a 95       	dec	r18
    16ca:	89 f6       	brne	.-94     	; 0x166e <__ftoa_engine+0xfc>
    16cc:	06 94       	lsr	r0
    16ce:	97 95       	ror	r25
    16d0:	67 95       	ror	r22
    16d2:	37 95       	ror	r19
    16d4:	17 95       	ror	r17
    16d6:	17 94       	ror	r1
    16d8:	e1 18       	sub	r14, r1
    16da:	f1 0a       	sbc	r15, r17
    16dc:	43 0b       	sbc	r20, r19
    16de:	56 0b       	sbc	r21, r22
    16e0:	c9 0b       	sbc	r28, r25
    16e2:	d0 09       	sbc	r29, r0
    16e4:	98 f0       	brcs	.+38     	; 0x170c <__ftoa_engine+0x19a>
    16e6:	23 95       	inc	r18
    16e8:	7e 91       	ld	r23, -X
    16ea:	73 95       	inc	r23
    16ec:	7a 33       	cpi	r23, 0x3A	; 58
    16ee:	08 f0       	brcs	.+2      	; 0x16f2 <__ftoa_engine+0x180>
    16f0:	70 e3       	ldi	r23, 0x30	; 48
    16f2:	7c 93       	st	X, r23
    16f4:	20 13       	cpse	r18, r16
    16f6:	b8 f7       	brcc	.-18     	; 0x16e6 <__ftoa_engine+0x174>
    16f8:	7e 91       	ld	r23, -X
    16fa:	70 61       	ori	r23, 0x10	; 16
    16fc:	7d 93       	st	X+, r23
    16fe:	30 f0       	brcs	.+12     	; 0x170c <__ftoa_engine+0x19a>
    1700:	83 95       	inc	r24
    1702:	71 e3       	ldi	r23, 0x31	; 49
    1704:	7d 93       	st	X+, r23
    1706:	70 e3       	ldi	r23, 0x30	; 48
    1708:	2a 95       	dec	r18
    170a:	e1 f7       	brne	.-8      	; 0x1704 <__ftoa_engine+0x192>
    170c:	11 24       	eor	r1, r1
    170e:	ef 90       	pop	r14
    1710:	ff 90       	pop	r15
    1712:	0f 91       	pop	r16
    1714:	1f 91       	pop	r17
    1716:	cf 91       	pop	r28
    1718:	df 91       	pop	r29
    171a:	99 27       	eor	r25, r25
    171c:	87 fd       	sbrc	r24, 7
    171e:	90 95       	com	r25
    1720:	08 95       	ret

00001722 <strnlen_P>:
    1722:	fc 01       	movw	r30, r24
    1724:	05 90       	lpm	r0, Z+
    1726:	61 50       	subi	r22, 0x01	; 1
    1728:	70 40       	sbci	r23, 0x00	; 0
    172a:	01 10       	cpse	r0, r1
    172c:	d8 f7       	brcc	.-10     	; 0x1724 <strnlen_P+0x2>
    172e:	80 95       	com	r24
    1730:	90 95       	com	r25
    1732:	8e 0f       	add	r24, r30
    1734:	9f 1f       	adc	r25, r31
    1736:	08 95       	ret

00001738 <strnlen>:
    1738:	fc 01       	movw	r30, r24
    173a:	61 50       	subi	r22, 0x01	; 1
    173c:	70 40       	sbci	r23, 0x00	; 0
    173e:	01 90       	ld	r0, Z+
    1740:	01 10       	cpse	r0, r1
    1742:	d8 f7       	brcc	.-10     	; 0x173a <strnlen+0x2>
    1744:	80 95       	com	r24
    1746:	90 95       	com	r25
    1748:	8e 0f       	add	r24, r30
    174a:	9f 1f       	adc	r25, r31
    174c:	08 95       	ret

0000174e <fputc>:
    174e:	0f 93       	push	r16
    1750:	1f 93       	push	r17
    1752:	cf 93       	push	r28
    1754:	df 93       	push	r29
    1756:	fb 01       	movw	r30, r22
    1758:	23 81       	ldd	r18, Z+3	; 0x03
    175a:	21 fd       	sbrc	r18, 1
    175c:	03 c0       	rjmp	.+6      	; 0x1764 <fputc+0x16>
    175e:	8f ef       	ldi	r24, 0xFF	; 255
    1760:	9f ef       	ldi	r25, 0xFF	; 255
    1762:	28 c0       	rjmp	.+80     	; 0x17b4 <fputc+0x66>
    1764:	22 ff       	sbrs	r18, 2
    1766:	16 c0       	rjmp	.+44     	; 0x1794 <fputc+0x46>
    1768:	46 81       	ldd	r20, Z+6	; 0x06
    176a:	57 81       	ldd	r21, Z+7	; 0x07
    176c:	24 81       	ldd	r18, Z+4	; 0x04
    176e:	35 81       	ldd	r19, Z+5	; 0x05
    1770:	42 17       	cp	r20, r18
    1772:	53 07       	cpc	r21, r19
    1774:	44 f4       	brge	.+16     	; 0x1786 <fputc+0x38>
    1776:	a0 81       	ld	r26, Z
    1778:	b1 81       	ldd	r27, Z+1	; 0x01
    177a:	9d 01       	movw	r18, r26
    177c:	2f 5f       	subi	r18, 0xFF	; 255
    177e:	3f 4f       	sbci	r19, 0xFF	; 255
    1780:	31 83       	std	Z+1, r19	; 0x01
    1782:	20 83       	st	Z, r18
    1784:	8c 93       	st	X, r24
    1786:	26 81       	ldd	r18, Z+6	; 0x06
    1788:	37 81       	ldd	r19, Z+7	; 0x07
    178a:	2f 5f       	subi	r18, 0xFF	; 255
    178c:	3f 4f       	sbci	r19, 0xFF	; 255
    178e:	37 83       	std	Z+7, r19	; 0x07
    1790:	26 83       	std	Z+6, r18	; 0x06
    1792:	10 c0       	rjmp	.+32     	; 0x17b4 <fputc+0x66>
    1794:	eb 01       	movw	r28, r22
    1796:	09 2f       	mov	r16, r25
    1798:	18 2f       	mov	r17, r24
    179a:	00 84       	ldd	r0, Z+8	; 0x08
    179c:	f1 85       	ldd	r31, Z+9	; 0x09
    179e:	e0 2d       	mov	r30, r0
    17a0:	09 95       	icall
    17a2:	89 2b       	or	r24, r25
    17a4:	e1 f6       	brne	.-72     	; 0x175e <fputc+0x10>
    17a6:	8e 81       	ldd	r24, Y+6	; 0x06
    17a8:	9f 81       	ldd	r25, Y+7	; 0x07
    17aa:	01 96       	adiw	r24, 0x01	; 1
    17ac:	9f 83       	std	Y+7, r25	; 0x07
    17ae:	8e 83       	std	Y+6, r24	; 0x06
    17b0:	81 2f       	mov	r24, r17
    17b2:	90 2f       	mov	r25, r16
    17b4:	df 91       	pop	r29
    17b6:	cf 91       	pop	r28
    17b8:	1f 91       	pop	r17
    17ba:	0f 91       	pop	r16
    17bc:	08 95       	ret

000017be <__ultoa_invert>:
    17be:	fa 01       	movw	r30, r20
    17c0:	aa 27       	eor	r26, r26
    17c2:	28 30       	cpi	r18, 0x08	; 8
    17c4:	51 f1       	breq	.+84     	; 0x181a <__ultoa_invert+0x5c>
    17c6:	20 31       	cpi	r18, 0x10	; 16
    17c8:	81 f1       	breq	.+96     	; 0x182a <__ultoa_invert+0x6c>
    17ca:	e8 94       	clt
    17cc:	6f 93       	push	r22
    17ce:	6e 7f       	andi	r22, 0xFE	; 254
    17d0:	6e 5f       	subi	r22, 0xFE	; 254
    17d2:	7f 4f       	sbci	r23, 0xFF	; 255
    17d4:	8f 4f       	sbci	r24, 0xFF	; 255
    17d6:	9f 4f       	sbci	r25, 0xFF	; 255
    17d8:	af 4f       	sbci	r26, 0xFF	; 255
    17da:	b1 e0       	ldi	r27, 0x01	; 1
    17dc:	3e d0       	rcall	.+124    	; 0x185a <__ultoa_invert+0x9c>
    17de:	b4 e0       	ldi	r27, 0x04	; 4
    17e0:	3c d0       	rcall	.+120    	; 0x185a <__ultoa_invert+0x9c>
    17e2:	67 0f       	add	r22, r23
    17e4:	78 1f       	adc	r23, r24
    17e6:	89 1f       	adc	r24, r25
    17e8:	9a 1f       	adc	r25, r26
    17ea:	a1 1d       	adc	r26, r1
    17ec:	68 0f       	add	r22, r24
    17ee:	79 1f       	adc	r23, r25
    17f0:	8a 1f       	adc	r24, r26
    17f2:	91 1d       	adc	r25, r1
    17f4:	a1 1d       	adc	r26, r1
    17f6:	6a 0f       	add	r22, r26
    17f8:	71 1d       	adc	r23, r1
    17fa:	81 1d       	adc	r24, r1
    17fc:	91 1d       	adc	r25, r1
    17fe:	a1 1d       	adc	r26, r1
    1800:	20 d0       	rcall	.+64     	; 0x1842 <__ultoa_invert+0x84>
    1802:	09 f4       	brne	.+2      	; 0x1806 <__ultoa_invert+0x48>
    1804:	68 94       	set
    1806:	3f 91       	pop	r19
    1808:	2a e0       	ldi	r18, 0x0A	; 10
    180a:	26 9f       	mul	r18, r22
    180c:	11 24       	eor	r1, r1
    180e:	30 19       	sub	r19, r0
    1810:	30 5d       	subi	r19, 0xD0	; 208
    1812:	31 93       	st	Z+, r19
    1814:	de f6       	brtc	.-74     	; 0x17cc <__ultoa_invert+0xe>
    1816:	cf 01       	movw	r24, r30
    1818:	08 95       	ret
    181a:	46 2f       	mov	r20, r22
    181c:	47 70       	andi	r20, 0x07	; 7
    181e:	40 5d       	subi	r20, 0xD0	; 208
    1820:	41 93       	st	Z+, r20
    1822:	b3 e0       	ldi	r27, 0x03	; 3
    1824:	0f d0       	rcall	.+30     	; 0x1844 <__ultoa_invert+0x86>
    1826:	c9 f7       	brne	.-14     	; 0x181a <__ultoa_invert+0x5c>
    1828:	f6 cf       	rjmp	.-20     	; 0x1816 <__ultoa_invert+0x58>
    182a:	46 2f       	mov	r20, r22
    182c:	4f 70       	andi	r20, 0x0F	; 15
    182e:	40 5d       	subi	r20, 0xD0	; 208
    1830:	4a 33       	cpi	r20, 0x3A	; 58
    1832:	18 f0       	brcs	.+6      	; 0x183a <__ultoa_invert+0x7c>
    1834:	49 5d       	subi	r20, 0xD9	; 217
    1836:	31 fd       	sbrc	r19, 1
    1838:	40 52       	subi	r20, 0x20	; 32
    183a:	41 93       	st	Z+, r20
    183c:	02 d0       	rcall	.+4      	; 0x1842 <__ultoa_invert+0x84>
    183e:	a9 f7       	brne	.-22     	; 0x182a <__ultoa_invert+0x6c>
    1840:	ea cf       	rjmp	.-44     	; 0x1816 <__ultoa_invert+0x58>
    1842:	b4 e0       	ldi	r27, 0x04	; 4
    1844:	a6 95       	lsr	r26
    1846:	97 95       	ror	r25
    1848:	87 95       	ror	r24
    184a:	77 95       	ror	r23
    184c:	67 95       	ror	r22
    184e:	ba 95       	dec	r27
    1850:	c9 f7       	brne	.-14     	; 0x1844 <__ultoa_invert+0x86>
    1852:	00 97       	sbiw	r24, 0x00	; 0
    1854:	61 05       	cpc	r22, r1
    1856:	71 05       	cpc	r23, r1
    1858:	08 95       	ret
    185a:	9b 01       	movw	r18, r22
    185c:	ac 01       	movw	r20, r24
    185e:	0a 2e       	mov	r0, r26
    1860:	06 94       	lsr	r0
    1862:	57 95       	ror	r21
    1864:	47 95       	ror	r20
    1866:	37 95       	ror	r19
    1868:	27 95       	ror	r18
    186a:	ba 95       	dec	r27
    186c:	c9 f7       	brne	.-14     	; 0x1860 <__ultoa_invert+0xa2>
    186e:	62 0f       	add	r22, r18
    1870:	73 1f       	adc	r23, r19
    1872:	84 1f       	adc	r24, r20
    1874:	95 1f       	adc	r25, r21
    1876:	a0 1d       	adc	r26, r0
    1878:	08 95       	ret

0000187a <_exit>:
    187a:	f8 94       	cli

0000187c <__stop_program>:
    187c:	ff cf       	rjmp	.-2      	; 0x187c <__stop_program>
