
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  0000195a  000019ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000195a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800116  00800116  00001a04  2**0
                  ALLOC
  3 .stab         000026ac  00000000  00000000  00001a04  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000014d1  00000000  00000000  000040b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000027  00000000  00000000  00005581  2**0
                  CONTENTS, READONLY
  6 .debug_info   000005f4  00000000  00000000  000055a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005a2  00000000  00000000  00005b9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001d  00000000  00000000  0000613e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  0000615b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 cc 00 	jmp	0x198	; 0x198 <__ctors_end>
       4:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
       8:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
       c:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      10:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      14:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      18:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      1c:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      20:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      24:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      28:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      2c:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      30:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      34:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      38:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      3c:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      40:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      44:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      48:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      4c:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      50:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      54:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      58:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      5c:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      60:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      64:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      68:	08 4a       	sbci	r16, 0xA8	; 168
      6a:	d7 3b       	cpi	r29, 0xB7	; 183
      6c:	3b ce       	rjmp	.-906    	; 0xfffffce4 <__eeprom_end+0xff7efce4>
      6e:	01 6e       	ori	r16, 0xE1	; 225
      70:	84 bc       	out	0x24, r8	; 36
      72:	bf fd       	.word	0xfdbf	; ????
      74:	c1 2f       	mov	r28, r17
      76:	3d 6c       	ori	r19, 0xCD	; 205
      78:	74 31       	cpi	r23, 0x14	; 20
      7a:	9a bd       	out	0x2a, r25	; 42
      7c:	56 83       	std	Z+6, r21	; 0x06
      7e:	3d da       	rcall	.-2950   	; 0xfffff4fa <__eeprom_end+0xff7ef4fa>
      80:	3d 00       	.word	0x003d	; ????
      82:	c7 7f       	andi	r28, 0xF7	; 247
      84:	11 be       	out	0x31, r1	; 49
      86:	d9 e4       	ldi	r29, 0x49	; 73
      88:	bb 4c       	sbci	r27, 0xCB	; 203
      8a:	3e 91       	ld	r19, -X
      8c:	6b aa       	std	Y+51, r6	; 0x33
      8e:	aa be       	out	0x3a, r10	; 58
      90:	00 00       	nop
      92:	00 80       	ld	r0, Z
      94:	3f 00       	.word	0x003f	; ????

00000096 <__trampolines_end>:
      96:	6e 61       	ori	r22, 0x1E	; 30
      98:	6e 00       	.word	0x006e	; ????

0000009a <__c.2240>:
      9a:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      aa:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      ba:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      ca:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
      da:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
      ea:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
      fa:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     10a:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     11a:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     12a:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     13a:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     14a:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     15a:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     16a:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     17a:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     18a:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000198 <__ctors_end>:
     198:	11 24       	eor	r1, r1
     19a:	1f be       	out	0x3f, r1	; 63
     19c:	cf ef       	ldi	r28, 0xFF	; 255
     19e:	d8 e0       	ldi	r29, 0x08	; 8
     1a0:	de bf       	out	0x3e, r29	; 62
     1a2:	cd bf       	out	0x3d, r28	; 61

000001a4 <__do_copy_data>:
     1a4:	11 e0       	ldi	r17, 0x01	; 1
     1a6:	a0 e0       	ldi	r26, 0x00	; 0
     1a8:	b1 e0       	ldi	r27, 0x01	; 1
     1aa:	ea e5       	ldi	r30, 0x5A	; 90
     1ac:	f9 e1       	ldi	r31, 0x19	; 25
     1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <__do_copy_data+0x10>
     1b0:	05 90       	lpm	r0, Z+
     1b2:	0d 92       	st	X+, r0
     1b4:	a6 31       	cpi	r26, 0x16	; 22
     1b6:	b1 07       	cpc	r27, r17
     1b8:	d9 f7       	brne	.-10     	; 0x1b0 <__do_copy_data+0xc>

000001ba <__do_clear_bss>:
     1ba:	11 e0       	ldi	r17, 0x01	; 1
     1bc:	a6 e1       	ldi	r26, 0x16	; 22
     1be:	b1 e0       	ldi	r27, 0x01	; 1
     1c0:	01 c0       	rjmp	.+2      	; 0x1c4 <.do_clear_bss_start>

000001c2 <.do_clear_bss_loop>:
     1c2:	1d 92       	st	X+, r1

000001c4 <.do_clear_bss_start>:
     1c4:	ac 31       	cpi	r26, 0x1C	; 28
     1c6:	b1 07       	cpc	r27, r17
     1c8:	e1 f7       	brne	.-8      	; 0x1c2 <.do_clear_bss_loop>
     1ca:	0e 94 76 04 	call	0x8ec	; 0x8ec <main>
     1ce:	0c 94 ab 0c 	jmp	0x1956	; 0x1956 <_exit>

000001d2 <__bad_interrupt>:
     1d2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001d6 <USART0Init>:
#include "usart.h"
#include <avr/io.h>

void USART0Init(void) {
    // Set baud rate
    UBRR0H = (uint8_t) (UBRR_VALUE >> 8);
     1d6:	10 92 c5 00 	sts	0x00C5, r1
    UBRR0L = (uint8_t) UBRR_VALUE;
     1da:	87 e6       	ldi	r24, 0x67	; 103
     1dc:	80 93 c4 00 	sts	0x00C4, r24
    // Set frame format to 8 data bits, no parity, 1 stop bit
    UCSR0C |= (1 << UCSZ01) | (1 << UCSZ00);
     1e0:	e2 ec       	ldi	r30, 0xC2	; 194
     1e2:	f0 e0       	ldi	r31, 0x00	; 0
     1e4:	80 81       	ld	r24, Z
     1e6:	86 60       	ori	r24, 0x06	; 6
     1e8:	80 83       	st	Z, r24
    //enable transmission and reception
    UCSR0B |= (1 << RXEN0) | (1 << TXEN0);
     1ea:	e1 ec       	ldi	r30, 0xC1	; 193
     1ec:	f0 e0       	ldi	r31, 0x00	; 0
     1ee:	80 81       	ld	r24, Z
     1f0:	88 61       	ori	r24, 0x18	; 24
     1f2:	80 83       	st	Z, r24
     1f4:	08 95       	ret

000001f6 <USART0SendByte>:
}

int USART0SendByte(char u8Data, FILE *stream) {
     1f6:	cf 93       	push	r28
     1f8:	c8 2f       	mov	r28, r24
    if (u8Data == '\n') {
     1fa:	8a 30       	cpi	r24, 0x0A	; 10
     1fc:	29 f4       	brne	.+10     	; 0x208 <USART0SendByte+0x12>
        USART0SendByte('\r', 0);
     1fe:	60 e0       	ldi	r22, 0x00	; 0
     200:	70 e0       	ldi	r23, 0x00	; 0
     202:	8d e0       	ldi	r24, 0x0D	; 13
     204:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <USART0SendByte>
    }
    //wait while previous byte is completed
    while (!(UCSR0A & (1 << UDRE0))) {
     208:	80 91 c0 00 	lds	r24, 0x00C0
     20c:	85 ff       	sbrs	r24, 5
     20e:	fc cf       	rjmp	.-8      	; 0x208 <USART0SendByte+0x12>
    };
    // Transmit data
    UDR0 = u8Data;
     210:	c0 93 c6 00 	sts	0x00C6, r28
    return 0;
}
     214:	80 e0       	ldi	r24, 0x00	; 0
     216:	90 e0       	ldi	r25, 0x00	; 0
     218:	cf 91       	pop	r28
     21a:	08 95       	ret

0000021c <USART0ReceiveByte>:
int USART0ReceiveByte(FILE *stream) {
     21c:	cf 93       	push	r28
    uint8_t u8Data;
    // Wait for byte to be received
    while (!(UCSR0A & (1 << RXC0))) {
     21e:	20 91 c0 00 	lds	r18, 0x00C0
     222:	27 ff       	sbrs	r18, 7
     224:	fc cf       	rjmp	.-8      	; 0x21e <USART0ReceiveByte+0x2>
    };
    u8Data = UDR0;
     226:	c0 91 c6 00 	lds	r28, 0x00C6
    //echo input data
    USART0SendByte(u8Data, stream);
     22a:	bc 01       	movw	r22, r24
     22c:	8c 2f       	mov	r24, r28
     22e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <USART0SendByte>
    // Return received data
    return u8Data;
}
     232:	8c 2f       	mov	r24, r28
     234:	90 e0       	ldi	r25, 0x00	; 0
     236:	cf 91       	pop	r28
     238:	08 95       	ret

0000023a <TWIInit>:
#include <compat/twi.h>
#include <util/delay.h>
void TWIInit(void)
{
    //set SCL to 400kHz
    TWSR = 0x00;
     23a:	10 92 b9 00 	sts	0x00B9, r1
    TWBR = 0x0C;
     23e:	8c e0       	ldi	r24, 0x0C	; 12
     240:	80 93 b8 00 	sts	0x00B8, r24
    //enable TWI
    TWCR = (1<<TWEN);
     244:	84 e0       	ldi	r24, 0x04	; 4
     246:	80 93 bc 00 	sts	0x00BC, r24
     24a:	08 95       	ret

0000024c <i2c_start>:
uint8_t i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     24c:	94 ea       	ldi	r25, 0xA4	; 164
     24e:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
     252:	90 91 bc 00 	lds	r25, 0x00BC
     256:	97 ff       	sbrs	r25, 7
     258:	fc cf       	rjmp	.-8      	; 0x252 <i2c_start+0x6>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
     25a:	90 91 b9 00 	lds	r25, 0x00B9
     25e:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
     260:	98 30       	cpi	r25, 0x08	; 8
     262:	21 f0       	breq	.+8      	; 0x26c <i2c_start+0x20>
     264:	90 31       	cpi	r25, 0x10	; 16
     266:	11 f0       	breq	.+4      	; 0x26c <i2c_start+0x20>
     268:	81 e0       	ldi	r24, 0x01	; 1
     26a:	08 95       	ret

	// send device address
	TWDR = address;
     26c:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
     270:	84 e8       	ldi	r24, 0x84	; 132
     272:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
     276:	80 91 bc 00 	lds	r24, 0x00BC
     27a:	87 ff       	sbrs	r24, 7
     27c:	fc cf       	rjmp	.-8      	; 0x276 <i2c_start+0x2a>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
     27e:	80 91 b9 00 	lds	r24, 0x00B9
     282:	88 7f       	andi	r24, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
     284:	88 31       	cpi	r24, 0x18	; 24
     286:	11 f0       	breq	.+4      	; 0x28c <i2c_start+0x40>
     288:	80 34       	cpi	r24, 0x40	; 64
     28a:	71 f7       	brne	.-36     	; 0x268 <i2c_start+0x1c>

	return 0;
     28c:	80 e0       	ldi	r24, 0x00	; 0

}
     28e:	08 95       	ret

00000290 <i2c_start_wait>:


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     290:	24 ea       	ldi	r18, 0xA4	; 164
    	twst = TW_STATUS & 0xF8;
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
    	TWCR = (1<<TWINT) | (1<<TWEN);
     292:	34 e8       	ldi	r19, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     294:	44 e9       	ldi	r20, 0x94	; 148


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     296:	20 93 bc 00 	sts	0x00BC, r18
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
     29a:	90 91 bc 00 	lds	r25, 0x00BC
     29e:	97 ff       	sbrs	r25, 7
     2a0:	fc cf       	rjmp	.-8      	; 0x29a <i2c_start_wait+0xa>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
     2a2:	90 91 b9 00 	lds	r25, 0x00B9
     2a6:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
     2a8:	98 30       	cpi	r25, 0x08	; 8
     2aa:	11 f0       	breq	.+4      	; 0x2b0 <i2c_start_wait+0x20>
     2ac:	90 31       	cpi	r25, 0x10	; 16
     2ae:	99 f7       	brne	.-26     	; 0x296 <i2c_start_wait+0x6>
    
    	// send device address
    	TWDR = address;
     2b0:	80 93 bb 00 	sts	0x00BB, r24
    	TWCR = (1<<TWINT) | (1<<TWEN);
     2b4:	30 93 bc 00 	sts	0x00BC, r19
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
     2b8:	90 91 bc 00 	lds	r25, 0x00BC
     2bc:	97 ff       	sbrs	r25, 7
     2be:	fc cf       	rjmp	.-8      	; 0x2b8 <i2c_start_wait+0x28>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
     2c0:	90 91 b9 00 	lds	r25, 0x00B9
     2c4:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
     2c6:	90 32       	cpi	r25, 0x20	; 32
     2c8:	11 f0       	breq	.+4      	; 0x2ce <i2c_start_wait+0x3e>
     2ca:	98 35       	cpi	r25, 0x58	; 88
     2cc:	39 f4       	brne	.+14     	; 0x2dc <i2c_start_wait+0x4c>
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     2ce:	40 93 bc 00 	sts	0x00BC, r20
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
     2d2:	90 91 bc 00 	lds	r25, 0x00BC
     2d6:	94 fd       	sbrc	r25, 4
     2d8:	fc cf       	rjmp	.-8      	; 0x2d2 <i2c_start_wait+0x42>
     2da:	dd cf       	rjmp	.-70     	; 0x296 <i2c_start_wait+0x6>
     2dc:	08 95       	ret

000002de <i2c_rep_start>:
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
uint8_t i2c_rep_start(unsigned char address)
{
    return i2c_start( address );
     2de:	0c 94 26 01 	jmp	0x24c	; 0x24c <i2c_start>

000002e2 <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     2e2:	84 e9       	ldi	r24, 0x94	; 148
     2e4:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
     2e8:	80 91 bc 00 	lds	r24, 0x00BC
     2ec:	84 fd       	sbrc	r24, 4
     2ee:	fc cf       	rjmp	.-8      	; 0x2e8 <i2c_stop+0x6>

}
     2f0:	08 95       	ret

000002f2 <i2c_write>:
uint8_t i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
     2f2:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
     2f6:	84 e8       	ldi	r24, 0x84	; 132
     2f8:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
     2fc:	80 91 bc 00 	lds	r24, 0x00BC
     300:	87 ff       	sbrs	r24, 7
     302:	fc cf       	rjmp	.-8      	; 0x2fc <i2c_write+0xa>

	// check value of TWI Status Register. Mask prescaler bits only need the top 5 bits
	twst = TW_STATUS & 0xF8;
     304:	90 91 b9 00 	lds	r25, 0x00B9
     308:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
     30a:	81 e0       	ldi	r24, 0x01	; 1
     30c:	98 32       	cpi	r25, 0x28	; 40
     30e:	09 f4       	brne	.+2      	; 0x312 <i2c_write+0x20>
     310:	80 e0       	ldi	r24, 0x00	; 0
	return 0;

}
     312:	08 95       	ret

00000314 <i2c_readAck>:
 
 Return:  byte read from I2C device
*************************************************************************/
uint8_t i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
     314:	84 ec       	ldi	r24, 0xC4	; 196
     316:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));    
     31a:	80 91 bc 00 	lds	r24, 0x00BC
     31e:	87 ff       	sbrs	r24, 7
     320:	fc cf       	rjmp	.-8      	; 0x31a <i2c_readAck+0x6>

    return TWDR;
     322:	80 91 bb 00 	lds	r24, 0x00BB

}
     326:	08 95       	ret

00000328 <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
uint8_t i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
     328:	84 e8       	ldi	r24, 0x84	; 132
     32a:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
     32e:	80 91 bc 00 	lds	r24, 0x00BC
     332:	87 ff       	sbrs	r24, 7
     334:	fc cf       	rjmp	.-8      	; 0x32e <i2c_readNak+0x6>
	
    return TWDR;
     336:	80 91 bb 00 	lds	r24, 0x00BB

     33a:	08 95       	ret

0000033c <read_temp_celsius>:
 
 Return: float value in Celsius
 
*************************************************************************/

float read_temp_celsius(void) {
     33c:	cf 93       	push	r28
    if (i2c_start(BAR_SLAVE_ADDRESS << 1) == 0) {
     33e:	8a eb       	ldi	r24, 0xBA	; 186
     340:	0e 94 26 01 	call	0x24c	; 0x24c <i2c_start>
     344:	88 23       	and	r24, r24
     346:	29 f0       	breq	.+10     	; 0x352 <read_temp_celsius+0x16>
            return (45.5 + ((float) temp) / 480); //To Celsius

        }

    }
    return 1;
     348:	60 e0       	ldi	r22, 0x00	; 0
     34a:	70 e0       	ldi	r23, 0x00	; 0
     34c:	80 e8       	ldi	r24, 0x80	; 128
     34e:	9f e3       	ldi	r25, 0x3F	; 63
     350:	22 c0       	rjmp	.+68     	; 0x396 <read_temp_celsius+0x5a>
 
*************************************************************************/

float read_temp_celsius(void) {
    if (i2c_start(BAR_SLAVE_ADDRESS << 1) == 0) {
        i2c_write(BAR_TEMP_OUT_L | (1 << 7));
     352:	8b ea       	ldi	r24, 0xAB	; 171
     354:	0e 94 79 01 	call	0x2f2	; 0x2f2 <i2c_write>

        if (i2c_rep_start(((uint8_t) BAR_SLAVE_ADDRESS << 1) | 1) == 0) {
     358:	8b eb       	ldi	r24, 0xBB	; 187
     35a:	0e 94 6f 01 	call	0x2de	; 0x2de <i2c_rep_start>
     35e:	81 11       	cpse	r24, r1
     360:	f3 cf       	rjmp	.-26     	; 0x348 <read_temp_celsius+0xc>
            uint8_t tl = i2c_read(ACK);
     362:	0e 94 8a 01 	call	0x314	; 0x314 <i2c_readAck>
     366:	c8 2f       	mov	r28, r24
            uint8_t th = i2c_read(NAK);
     368:	0e 94 94 01 	call	0x328	; 0x328 <i2c_readNak>
            int16_t temp = (int16_t) (th << 8 | tl);
     36c:	6c 2f       	mov	r22, r28
     36e:	70 e0       	ldi	r23, 0x00	; 0
     370:	78 2b       	or	r23, r24
            return (45.5 + ((float) temp) / 480); //To Celsius
     372:	88 27       	eor	r24, r24
     374:	77 fd       	sbrc	r23, 7
     376:	80 95       	com	r24
     378:	98 2f       	mov	r25, r24
     37a:	0e 94 bc 09 	call	0x1378	; 0x1378 <__floatsisf>
     37e:	20 e0       	ldi	r18, 0x00	; 0
     380:	30 e0       	ldi	r19, 0x00	; 0
     382:	40 ef       	ldi	r20, 0xF0	; 240
     384:	53 e4       	ldi	r21, 0x43	; 67
     386:	0e 94 21 09 	call	0x1242	; 0x1242 <__divsf3>
     38a:	20 e0       	ldi	r18, 0x00	; 0
     38c:	30 e0       	ldi	r19, 0x00	; 0
     38e:	46 e3       	ldi	r20, 0x36	; 54
     390:	52 e4       	ldi	r21, 0x42	; 66
     392:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <__addsf3>

        }

    }
    return 1;
}/*read_temp_celsius*/
     396:	cf 91       	pop	r28
     398:	08 95       	ret

0000039a <read_pressure_hpa>:
 Read the pressure
 
 Return: float value in hpa
 
************************************************************************/
float read_pressure_hpa(void) {
     39a:	0f 93       	push	r16
     39c:	1f 93       	push	r17
     39e:	cf 93       	push	r28
     3a0:	df 93       	push	r29
    if (i2c_start(BAR_SLAVE_ADDRESS << 1) == 0) {
     3a2:	8a eb       	ldi	r24, 0xBA	; 186
     3a4:	0e 94 26 01 	call	0x24c	; 0x24c <i2c_start>
     3a8:	88 23       	and	r24, r24
     3aa:	29 f0       	breq	.+10     	; 0x3b6 <read_pressure_hpa+0x1c>

            int32_t temp = (int32_t) (int8_t) ph << 16 | (uint16_t) pl << 8 | pxl;
            return ((float) temp / 4096);
        }
    }
    return 1;
     3ac:	60 e0       	ldi	r22, 0x00	; 0
     3ae:	70 e0       	ldi	r23, 0x00	; 0
     3b0:	80 e8       	ldi	r24, 0x80	; 128
     3b2:	9f e3       	ldi	r25, 0x3F	; 63
     3b4:	2f c0       	rjmp	.+94     	; 0x414 <read_pressure_hpa+0x7a>
 Return: float value in hpa
 
************************************************************************/
float read_pressure_hpa(void) {
    if (i2c_start(BAR_SLAVE_ADDRESS << 1) == 0) {
        i2c_write(BAR_PRESS_POUT_XL | (1 << 7));
     3b6:	88 ea       	ldi	r24, 0xA8	; 168
     3b8:	0e 94 79 01 	call	0x2f2	; 0x2f2 <i2c_write>

        if (i2c_rep_start(((uint8_t) BAR_SLAVE_ADDRESS << 1) | 1) == 0) {
     3bc:	8b eb       	ldi	r24, 0xBB	; 187
     3be:	0e 94 6f 01 	call	0x2de	; 0x2de <i2c_rep_start>
     3c2:	81 11       	cpse	r24, r1
     3c4:	f3 cf       	rjmp	.-26     	; 0x3ac <read_pressure_hpa+0x12>
            uint8_t pxl = i2c_read(ACK);
     3c6:	0e 94 8a 01 	call	0x314	; 0x314 <i2c_readAck>
     3ca:	d8 2f       	mov	r29, r24
            uint8_t pl = i2c_read(ACK);
     3cc:	0e 94 8a 01 	call	0x314	; 0x314 <i2c_readAck>
     3d0:	c8 2f       	mov	r28, r24
            uint8_t ph = i2c_read(NAK);
     3d2:	0e 94 94 01 	call	0x328	; 0x328 <i2c_readNak>

            int32_t temp = (int32_t) (int8_t) ph << 16 | (uint16_t) pl << 8 | pxl;
     3d6:	99 27       	eor	r25, r25
     3d8:	87 fd       	sbrc	r24, 7
     3da:	90 95       	com	r25
     3dc:	a9 2f       	mov	r26, r25
     3de:	b9 2f       	mov	r27, r25
     3e0:	9c 01       	movw	r18, r24
     3e2:	11 27       	eor	r17, r17
     3e4:	00 27       	eor	r16, r16
     3e6:	4c 2f       	mov	r20, r28
     3e8:	50 e0       	ldi	r21, 0x00	; 0
     3ea:	54 2f       	mov	r21, r20
     3ec:	44 27       	eor	r20, r20
     3ee:	60 e0       	ldi	r22, 0x00	; 0
     3f0:	70 e0       	ldi	r23, 0x00	; 0
     3f2:	d9 01       	movw	r26, r18
     3f4:	c8 01       	movw	r24, r16
     3f6:	84 2b       	or	r24, r20
     3f8:	95 2b       	or	r25, r21
     3fa:	a6 2b       	or	r26, r22
     3fc:	b7 2b       	or	r27, r23
     3fe:	bc 01       	movw	r22, r24
     400:	cd 01       	movw	r24, r26
     402:	6d 2b       	or	r22, r29
            return ((float) temp / 4096);
     404:	0e 94 bc 09 	call	0x1378	; 0x1378 <__floatsisf>
     408:	20 e0       	ldi	r18, 0x00	; 0
     40a:	30 e0       	ldi	r19, 0x00	; 0
     40c:	40 e8       	ldi	r20, 0x80	; 128
     40e:	59 e3       	ldi	r21, 0x39	; 57
     410:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <__mulsf3>
        }
    }
    return 1;

}/*read_pressure_hpa*/
     414:	df 91       	pop	r29
     416:	cf 91       	pop	r28
     418:	1f 91       	pop	r17
     41a:	0f 91       	pop	r16
     41c:	08 95       	ret

0000041e <init_bar>:
 Initialize the bar,, more info on the way
 
************************************************************************/

void init_bar(void) {
    write_to_reg(BAR_SLAVE_ADDRESS,BAR_CTRL_REG1, 0xB0);
     41e:	40 eb       	ldi	r20, 0xB0	; 176
     420:	60 e2       	ldi	r22, 0x20	; 32
     422:	8d e5       	ldi	r24, 0x5D	; 93
     424:	0c 94 27 04 	jmp	0x84e	; 0x84e <write_to_reg>

00000428 <init_gyro>:
 
 *************************************************************************/

void init_gyro(void) {

    write_to_reg(GYRO_SLAVE_ADDRESS, GYRO_LOW_ODR, 0x00);
     428:	40 e0       	ldi	r20, 0x00	; 0
     42a:	69 e3       	ldi	r22, 0x39	; 57
     42c:	8b e6       	ldi	r24, 0x6B	; 107
     42e:	0e 94 27 04 	call	0x84e	; 0x84e <write_to_reg>
    write_to_reg(GYRO_SLAVE_ADDRESS, GYRO_CTRL4, 0x00);
     432:	40 e0       	ldi	r20, 0x00	; 0
     434:	63 e2       	ldi	r22, 0x23	; 35
     436:	8b e6       	ldi	r24, 0x6B	; 107
     438:	0e 94 27 04 	call	0x84e	; 0x84e <write_to_reg>
    write_to_reg(GYRO_SLAVE_ADDRESS, GYRO_CTRL1, 0x6F);
     43c:	4f e6       	ldi	r20, 0x6F	; 111
     43e:	60 e2       	ldi	r22, 0x20	; 32
     440:	8b e6       	ldi	r24, 0x6B	; 107
     442:	0c 94 27 04 	jmp	0x84e	; 0x84e <write_to_reg>

00000446 <read_gyro_values>:
 Read the raw values from all three axis. 16-bit resolution
 
 Input: Pointer to data structure, passed by reference.
 
 *************************************************************************/
void read_gyro_values(struct gyro_data *_gyro_data_) {
     446:	df 92       	push	r13
     448:	ef 92       	push	r14
     44a:	ff 92       	push	r15
     44c:	0f 93       	push	r16
     44e:	1f 93       	push	r17
     450:	cf 93       	push	r28
     452:	df 93       	push	r29
     454:	8c 01       	movw	r16, r24

    timer1_init();
     456:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <timer1_init>
    while(TCNT1<DELAY_20M);
     45a:	80 91 84 00 	lds	r24, 0x0084
     45e:	90 91 85 00 	lds	r25, 0x0085
     462:	8f 33       	cpi	r24, 0x3F	; 63
     464:	9c 49       	sbci	r25, 0x9C	; 156
     466:	c8 f3       	brcs	.-14     	; 0x45a <read_gyro_values+0x14>
        if (i2c_start(GYRO_SLAVE_ADDRESS << 1) == 0) {
     468:	86 ed       	ldi	r24, 0xD6	; 214
     46a:	0e 94 26 01 	call	0x24c	; 0x24c <i2c_start>
     46e:	81 11       	cpse	r24, r1
     470:	29 c0       	rjmp	.+82     	; 0x4c4 <read_gyro_values+0x7e>
            i2c_write(GYRO_OUT_X_L | (1 << 7)); //Auto increment registers by writing the MSB high
     472:	88 ea       	ldi	r24, 0xA8	; 168
     474:	0e 94 79 01 	call	0x2f2	; 0x2f2 <i2c_write>

            if (i2c_rep_start(((uint8_t) GYRO_SLAVE_ADDRESS << 1) | 1) == 0) {
     478:	87 ed       	ldi	r24, 0xD7	; 215
     47a:	0e 94 6f 01 	call	0x2de	; 0x2de <i2c_rep_start>
     47e:	81 11       	cpse	r24, r1
     480:	21 c0       	rjmp	.+66     	; 0x4c4 <read_gyro_values+0x7e>
                uint8_t xlg = i2c_read(ACK);
     482:	0e 94 8a 01 	call	0x314	; 0x314 <i2c_readAck>
     486:	f8 2e       	mov	r15, r24
                uint8_t xhg = i2c_read(ACK);
     488:	0e 94 8a 01 	call	0x314	; 0x314 <i2c_readAck>
     48c:	d8 2e       	mov	r13, r24

                uint8_t ylg = i2c_read(ACK);
     48e:	0e 94 8a 01 	call	0x314	; 0x314 <i2c_readAck>
     492:	d8 2f       	mov	r29, r24
                uint8_t yhg = i2c_read(ACK);
     494:	0e 94 8a 01 	call	0x314	; 0x314 <i2c_readAck>
     498:	e8 2e       	mov	r14, r24

                uint8_t zlg = i2c_read(ACK);
     49a:	0e 94 8a 01 	call	0x314	; 0x314 <i2c_readAck>
     49e:	c8 2f       	mov	r28, r24
                uint8_t zhg = i2c_read(NAK);
     4a0:	0e 94 94 01 	call	0x328	; 0x328 <i2c_readNak>

                _gyro_data_->x = (int16_t) (xhg << 8 | xlg);
     4a4:	2f 2d       	mov	r18, r15
     4a6:	30 e0       	ldi	r19, 0x00	; 0
     4a8:	3d 29       	or	r19, r13
     4aa:	f8 01       	movw	r30, r16
     4ac:	31 83       	std	Z+1, r19	; 0x01
     4ae:	20 83       	st	Z, r18
                _gyro_data_->y = (int16_t) (yhg << 8 | ylg);
     4b0:	2d 2f       	mov	r18, r29
     4b2:	30 e0       	ldi	r19, 0x00	; 0
     4b4:	3e 29       	or	r19, r14
     4b6:	33 83       	std	Z+3, r19	; 0x03
     4b8:	22 83       	std	Z+2, r18	; 0x02
                _gyro_data_->z = (int16_t) (zhg << 8 | zlg);
     4ba:	2c 2f       	mov	r18, r28
     4bc:	30 e0       	ldi	r19, 0x00	; 0
     4be:	38 2b       	or	r19, r24
     4c0:	35 83       	std	Z+5, r19	; 0x05
     4c2:	24 83       	std	Z+4, r18	; 0x04

            }
        }
    
}/*read_gyro_values*/
     4c4:	df 91       	pop	r29
     4c6:	cf 91       	pop	r28
     4c8:	1f 91       	pop	r17
     4ca:	0f 91       	pop	r16
     4cc:	ff 90       	pop	r15
     4ce:	ef 90       	pop	r14
     4d0:	df 90       	pop	r13
     4d2:	08 95       	ret

000004d4 <read_gyro_values_rate_dps>:

void read_gyro_values_rate_dps(struct gyro_data *_gyro_data_, struct gyro_data_dps *gyro_data_dps) {
     4d4:	0f 93       	push	r16
     4d6:	1f 93       	push	r17
     4d8:	cf 93       	push	r28
     4da:	df 93       	push	r29
     4dc:	8c 01       	movw	r16, r24
     4de:	eb 01       	movw	r28, r22
    gyro_data_dps->x = (float) _gyro_data_->x * G_GAIN;
     4e0:	fc 01       	movw	r30, r24
     4e2:	60 81       	ld	r22, Z
     4e4:	71 81       	ldd	r23, Z+1	; 0x01
     4e6:	88 27       	eor	r24, r24
     4e8:	77 fd       	sbrc	r23, 7
     4ea:	80 95       	com	r24
     4ec:	98 2f       	mov	r25, r24
     4ee:	0e 94 bc 09 	call	0x1378	; 0x1378 <__floatsisf>
     4f2:	29 e2       	ldi	r18, 0x29	; 41
     4f4:	3c e5       	ldi	r19, 0x5C	; 92
     4f6:	4f e0       	ldi	r20, 0x0F	; 15
     4f8:	5c e3       	ldi	r21, 0x3C	; 60
     4fa:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <__mulsf3>
     4fe:	68 83       	st	Y, r22
     500:	79 83       	std	Y+1, r23	; 0x01
     502:	8a 83       	std	Y+2, r24	; 0x02
     504:	9b 83       	std	Y+3, r25	; 0x03
    gyro_data_dps->y = (float) _gyro_data_->y * G_GAIN;
     506:	f8 01       	movw	r30, r16
     508:	62 81       	ldd	r22, Z+2	; 0x02
     50a:	73 81       	ldd	r23, Z+3	; 0x03
     50c:	88 27       	eor	r24, r24
     50e:	77 fd       	sbrc	r23, 7
     510:	80 95       	com	r24
     512:	98 2f       	mov	r25, r24
     514:	0e 94 bc 09 	call	0x1378	; 0x1378 <__floatsisf>
     518:	29 e2       	ldi	r18, 0x29	; 41
     51a:	3c e5       	ldi	r19, 0x5C	; 92
     51c:	4f e0       	ldi	r20, 0x0F	; 15
     51e:	5c e3       	ldi	r21, 0x3C	; 60
     520:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <__mulsf3>
     524:	6c 83       	std	Y+4, r22	; 0x04
     526:	7d 83       	std	Y+5, r23	; 0x05
     528:	8e 83       	std	Y+6, r24	; 0x06
     52a:	9f 83       	std	Y+7, r25	; 0x07
    gyro_data_dps->z = (float) _gyro_data_->z * G_GAIN;
     52c:	f8 01       	movw	r30, r16
     52e:	64 81       	ldd	r22, Z+4	; 0x04
     530:	75 81       	ldd	r23, Z+5	; 0x05
     532:	88 27       	eor	r24, r24
     534:	77 fd       	sbrc	r23, 7
     536:	80 95       	com	r24
     538:	98 2f       	mov	r25, r24
     53a:	0e 94 bc 09 	call	0x1378	; 0x1378 <__floatsisf>
     53e:	29 e2       	ldi	r18, 0x29	; 41
     540:	3c e5       	ldi	r19, 0x5C	; 92
     542:	4f e0       	ldi	r20, 0x0F	; 15
     544:	5c e3       	ldi	r21, 0x3C	; 60
     546:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <__mulsf3>
     54a:	68 87       	std	Y+8, r22	; 0x08
     54c:	79 87       	std	Y+9, r23	; 0x09
     54e:	8a 87       	std	Y+10, r24	; 0x0a
     550:	9b 87       	std	Y+11, r25	; 0x0b

}/*read_gyro_values_dps*/
     552:	df 91       	pop	r29
     554:	cf 91       	pop	r28
     556:	1f 91       	pop	r17
     558:	0f 91       	pop	r16
     55a:	08 95       	ret

0000055c <read_gyro_values_angle>:

void read_gyro_values_angle(struct gyro_data_dps *_gyro_data_dps, struct gyro_data_angle *gyro_data_angle) {
     55c:	0f 93       	push	r16
     55e:	1f 93       	push	r17
     560:	cf 93       	push	r28
     562:	df 93       	push	r29
     564:	8c 01       	movw	r16, r24
     566:	eb 01       	movw	r28, r22
    gyro_data_angle->x += _gyro_data_dps->x * LOOP_PERIOD;
     568:	2a e0       	ldi	r18, 0x0A	; 10
     56a:	37 ed       	ldi	r19, 0xD7	; 215
     56c:	43 ea       	ldi	r20, 0xA3	; 163
     56e:	5c e3       	ldi	r21, 0x3C	; 60
     570:	fc 01       	movw	r30, r24
     572:	60 81       	ld	r22, Z
     574:	71 81       	ldd	r23, Z+1	; 0x01
     576:	82 81       	ldd	r24, Z+2	; 0x02
     578:	93 81       	ldd	r25, Z+3	; 0x03
     57a:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <__mulsf3>
     57e:	9b 01       	movw	r18, r22
     580:	ac 01       	movw	r20, r24
     582:	68 81       	ld	r22, Y
     584:	79 81       	ldd	r23, Y+1	; 0x01
     586:	8a 81       	ldd	r24, Y+2	; 0x02
     588:	9b 81       	ldd	r25, Y+3	; 0x03
     58a:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <__addsf3>
     58e:	68 83       	st	Y, r22
     590:	79 83       	std	Y+1, r23	; 0x01
     592:	8a 83       	std	Y+2, r24	; 0x02
     594:	9b 83       	std	Y+3, r25	; 0x03
    gyro_data_angle->y += _gyro_data_dps->y * LOOP_PERIOD;
     596:	2a e0       	ldi	r18, 0x0A	; 10
     598:	37 ed       	ldi	r19, 0xD7	; 215
     59a:	43 ea       	ldi	r20, 0xA3	; 163
     59c:	5c e3       	ldi	r21, 0x3C	; 60
     59e:	f8 01       	movw	r30, r16
     5a0:	64 81       	ldd	r22, Z+4	; 0x04
     5a2:	75 81       	ldd	r23, Z+5	; 0x05
     5a4:	86 81       	ldd	r24, Z+6	; 0x06
     5a6:	97 81       	ldd	r25, Z+7	; 0x07
     5a8:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <__mulsf3>
     5ac:	9b 01       	movw	r18, r22
     5ae:	ac 01       	movw	r20, r24
     5b0:	6c 81       	ldd	r22, Y+4	; 0x04
     5b2:	7d 81       	ldd	r23, Y+5	; 0x05
     5b4:	8e 81       	ldd	r24, Y+6	; 0x06
     5b6:	9f 81       	ldd	r25, Y+7	; 0x07
     5b8:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <__addsf3>
     5bc:	6c 83       	std	Y+4, r22	; 0x04
     5be:	7d 83       	std	Y+5, r23	; 0x05
     5c0:	8e 83       	std	Y+6, r24	; 0x06
     5c2:	9f 83       	std	Y+7, r25	; 0x07
    gyro_data_angle->z += _gyro_data_dps->z * LOOP_PERIOD;
     5c4:	2a e0       	ldi	r18, 0x0A	; 10
     5c6:	37 ed       	ldi	r19, 0xD7	; 215
     5c8:	43 ea       	ldi	r20, 0xA3	; 163
     5ca:	5c e3       	ldi	r21, 0x3C	; 60
     5cc:	f8 01       	movw	r30, r16
     5ce:	60 85       	ldd	r22, Z+8	; 0x08
     5d0:	71 85       	ldd	r23, Z+9	; 0x09
     5d2:	82 85       	ldd	r24, Z+10	; 0x0a
     5d4:	93 85       	ldd	r25, Z+11	; 0x0b
     5d6:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <__mulsf3>
     5da:	9b 01       	movw	r18, r22
     5dc:	ac 01       	movw	r20, r24
     5de:	68 85       	ldd	r22, Y+8	; 0x08
     5e0:	79 85       	ldd	r23, Y+9	; 0x09
     5e2:	8a 85       	ldd	r24, Y+10	; 0x0a
     5e4:	9b 85       	ldd	r25, Y+11	; 0x0b
     5e6:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <__addsf3>
     5ea:	68 87       	std	Y+8, r22	; 0x08
     5ec:	79 87       	std	Y+9, r23	; 0x09
     5ee:	8a 87       	std	Y+10, r24	; 0x0a
     5f0:	9b 87       	std	Y+11, r25	; 0x0b

}/*read_gyro_values_angle*/
     5f2:	df 91       	pop	r29
     5f4:	cf 91       	pop	r28
     5f6:	1f 91       	pop	r17
     5f8:	0f 91       	pop	r16
     5fa:	08 95       	ret

000005fc <init_acc>:
 * (+/- 2 g full scale)
 * (50 Hz ODR); AZEN = AYEN = AXEN = 1 (all axes enabled)
 
 *************************************************************************/
void init_acc(void) {
    write_to_reg(ACC_MAG_SLAVE_ADDRESS, ACC_MAG_CTRL2, 0x00);
     5fc:	40 e0       	ldi	r20, 0x00	; 0
     5fe:	61 e2       	ldi	r22, 0x21	; 33
     600:	8d e1       	ldi	r24, 0x1D	; 29
     602:	0e 94 27 04 	call	0x84e	; 0x84e <write_to_reg>
    write_to_reg(ACC_MAG_SLAVE_ADDRESS, ACC_MAG_CTRL1, 0x57);
     606:	47 e5       	ldi	r20, 0x57	; 87
     608:	60 e2       	ldi	r22, 0x20	; 32
     60a:	8d e1       	ldi	r24, 0x1D	; 29
     60c:	0c 94 27 04 	jmp	0x84e	; 0x84e <write_to_reg>

00000610 <init_mag>:
 * (low power mode off); MD = 00 (continuous-conversion mode)
 
 *************************************************************************/

void init_mag(void) {
    write_to_reg(ACC_MAG_SLAVE_ADDRESS, ACC_MAG_CTRL5, 0x64);
     610:	44 e6       	ldi	r20, 0x64	; 100
     612:	64 e2       	ldi	r22, 0x24	; 36
     614:	8d e1       	ldi	r24, 0x1D	; 29
     616:	0e 94 27 04 	call	0x84e	; 0x84e <write_to_reg>
    write_to_reg(ACC_MAG_SLAVE_ADDRESS, ACC_MAG_CTRL6, 0x20);
     61a:	40 e2       	ldi	r20, 0x20	; 32
     61c:	65 e2       	ldi	r22, 0x25	; 37
     61e:	8d e1       	ldi	r24, 0x1D	; 29
     620:	0e 94 27 04 	call	0x84e	; 0x84e <write_to_reg>
    write_to_reg(ACC_MAG_SLAVE_ADDRESS, ACC_MAG_CTRL7, 0x00);
     624:	40 e0       	ldi	r20, 0x00	; 0
     626:	66 e2       	ldi	r22, 0x26	; 38
     628:	8d e1       	ldi	r24, 0x1D	; 29
     62a:	0c 94 27 04 	jmp	0x84e	; 0x84e <write_to_reg>

0000062e <read_acc_raw>:
/*************************************************************************
 * read_acc_raw values
 
 *************************************************************************/

void read_acc_raw(struct acc_val_raw *_acc_raw_) {
     62e:	df 92       	push	r13
     630:	ef 92       	push	r14
     632:	ff 92       	push	r15
     634:	0f 93       	push	r16
     636:	1f 93       	push	r17
     638:	cf 93       	push	r28
     63a:	df 93       	push	r29
     63c:	8c 01       	movw	r16, r24
    if (i2c_start(ACC_MAG_SLAVE_ADDRESS << 1) == 0) {
     63e:	8a e3       	ldi	r24, 0x3A	; 58
     640:	0e 94 26 01 	call	0x24c	; 0x24c <i2c_start>
     644:	81 11       	cpse	r24, r1
     646:	29 c0       	rjmp	.+82     	; 0x69a <read_acc_raw+0x6c>
        i2c_write(ACC_MAG_OUT_X_L_A | (1 << 7)); //Auto increment registers by writing the MSB high
     648:	88 ea       	ldi	r24, 0xA8	; 168
     64a:	0e 94 79 01 	call	0x2f2	; 0x2f2 <i2c_write>

        if (i2c_rep_start(((uint8_t) ACC_MAG_SLAVE_ADDRESS << 1) | 1) == 0) {
     64e:	8b e3       	ldi	r24, 0x3B	; 59
     650:	0e 94 6f 01 	call	0x2de	; 0x2de <i2c_rep_start>
     654:	81 11       	cpse	r24, r1
     656:	21 c0       	rjmp	.+66     	; 0x69a <read_acc_raw+0x6c>
            uint8_t xlg = i2c_read(ACK);
     658:	0e 94 8a 01 	call	0x314	; 0x314 <i2c_readAck>
     65c:	f8 2e       	mov	r15, r24
            uint8_t xhg = i2c_read(ACK);
     65e:	0e 94 8a 01 	call	0x314	; 0x314 <i2c_readAck>
     662:	d8 2e       	mov	r13, r24

            uint8_t ylg = i2c_read(ACK);
     664:	0e 94 8a 01 	call	0x314	; 0x314 <i2c_readAck>
     668:	d8 2f       	mov	r29, r24
            uint8_t yhg = i2c_read(ACK);
     66a:	0e 94 8a 01 	call	0x314	; 0x314 <i2c_readAck>
     66e:	e8 2e       	mov	r14, r24

            uint8_t zlg = i2c_read(ACK);
     670:	0e 94 8a 01 	call	0x314	; 0x314 <i2c_readAck>
     674:	c8 2f       	mov	r28, r24
            uint8_t zhg = i2c_read(NAK);
     676:	0e 94 94 01 	call	0x328	; 0x328 <i2c_readNak>

            _acc_raw_->x = (int16_t) (xhg << 8 | xlg);
     67a:	2f 2d       	mov	r18, r15
     67c:	30 e0       	ldi	r19, 0x00	; 0
     67e:	3d 29       	or	r19, r13
     680:	f8 01       	movw	r30, r16
     682:	31 83       	std	Z+1, r19	; 0x01
     684:	20 83       	st	Z, r18
            _acc_raw_->y = (int16_t) (yhg << 8 | ylg);
     686:	2d 2f       	mov	r18, r29
     688:	30 e0       	ldi	r19, 0x00	; 0
     68a:	3e 29       	or	r19, r14
     68c:	33 83       	std	Z+3, r19	; 0x03
     68e:	22 83       	std	Z+2, r18	; 0x02
            _acc_raw_->z = (int16_t) (zhg << 8 | zlg);
     690:	2c 2f       	mov	r18, r28
     692:	30 e0       	ldi	r19, 0x00	; 0
     694:	38 2b       	or	r19, r24
     696:	35 83       	std	Z+5, r19	; 0x05
     698:	24 83       	std	Z+4, r18	; 0x04

        }
    }

}/*read_acc_raw*/
     69a:	df 91       	pop	r29
     69c:	cf 91       	pop	r28
     69e:	1f 91       	pop	r17
     6a0:	0f 91       	pop	r16
     6a2:	ff 90       	pop	r15
     6a4:	ef 90       	pop	r14
     6a6:	df 90       	pop	r13
     6a8:	08 95       	ret

000006aa <read_acc_angel>:
/*************************************************************************
 * read_acc_angles values
 * 
 
 *************************************************************************/
void read_acc_angel(struct acc_val_raw *_acc_raw_, struct acc_val_angle *_acc_angle) {
     6aa:	8f 92       	push	r8
     6ac:	9f 92       	push	r9
     6ae:	af 92       	push	r10
     6b0:	bf 92       	push	r11
     6b2:	cf 92       	push	r12
     6b4:	df 92       	push	r13
     6b6:	ef 92       	push	r14
     6b8:	ff 92       	push	r15
     6ba:	0f 93       	push	r16
     6bc:	1f 93       	push	r17
     6be:	cf 93       	push	r28
     6c0:	df 93       	push	r29
     6c2:	8c 01       	movw	r16, r24
     6c4:	eb 01       	movw	r28, r22
    _acc_angle->x = (float) (atan2(_acc_raw_->y, _acc_raw_->z) + M_PI) * RAD_TO_DEG;
     6c6:	fc 01       	movw	r30, r24
     6c8:	64 81       	ldd	r22, Z+4	; 0x04
     6ca:	75 81       	ldd	r23, Z+5	; 0x05
     6cc:	88 27       	eor	r24, r24
     6ce:	77 fd       	sbrc	r23, 7
     6d0:	80 95       	com	r24
     6d2:	98 2f       	mov	r25, r24
     6d4:	0e 94 bc 09 	call	0x1378	; 0x1378 <__floatsisf>
     6d8:	6b 01       	movw	r12, r22
     6da:	7c 01       	movw	r14, r24
     6dc:	f8 01       	movw	r30, r16
     6de:	62 81       	ldd	r22, Z+2	; 0x02
     6e0:	73 81       	ldd	r23, Z+3	; 0x03
     6e2:	88 27       	eor	r24, r24
     6e4:	77 fd       	sbrc	r23, 7
     6e6:	80 95       	com	r24
     6e8:	98 2f       	mov	r25, r24
     6ea:	0e 94 bc 09 	call	0x1378	; 0x1378 <__floatsisf>
     6ee:	a7 01       	movw	r20, r14
     6f0:	96 01       	movw	r18, r12
     6f2:	0e 94 ce 08 	call	0x119c	; 0x119c <atan2>
     6f6:	4b 01       	movw	r8, r22
     6f8:	5c 01       	movw	r10, r24
    _acc_angle->y = (float) (atan2(_acc_raw_->z, _acc_raw_->x) + M_PI) * RAD_TO_DEG;
     6fa:	f8 01       	movw	r30, r16
     6fc:	60 81       	ld	r22, Z
     6fe:	71 81       	ldd	r23, Z+1	; 0x01
     700:	88 27       	eor	r24, r24
     702:	77 fd       	sbrc	r23, 7
     704:	80 95       	com	r24
     706:	98 2f       	mov	r25, r24
     708:	0e 94 bc 09 	call	0x1378	; 0x1378 <__floatsisf>
     70c:	9b 01       	movw	r18, r22
     70e:	ac 01       	movw	r20, r24
     710:	c7 01       	movw	r24, r14
     712:	b6 01       	movw	r22, r12
     714:	0e 94 ce 08 	call	0x119c	; 0x119c <atan2>
     718:	2b ed       	ldi	r18, 0xDB	; 219
     71a:	3f e0       	ldi	r19, 0x0F	; 15
     71c:	49 e4       	ldi	r20, 0x49	; 73
     71e:	50 e4       	ldi	r21, 0x40	; 64
     720:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <__addsf3>
     724:	21 ee       	ldi	r18, 0xE1	; 225
     726:	3e e2       	ldi	r19, 0x2E	; 46
     728:	45 e6       	ldi	r20, 0x65	; 101
     72a:	52 e4       	ldi	r21, 0x42	; 66
     72c:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <__mulsf3>
     730:	0e 94 89 09 	call	0x1312	; 0x1312 <__fixsfsi>
     734:	6b 01       	movw	r12, r22
     736:	7c 01       	movw	r14, r24
     738:	8b 01       	movw	r16, r22
     73a:	7b 83       	std	Y+3, r23	; 0x03
     73c:	6a 83       	std	Y+2, r22	; 0x02
 * read_acc_angles values
 * 
 
 *************************************************************************/
void read_acc_angel(struct acc_val_raw *_acc_raw_, struct acc_val_angle *_acc_angle) {
    _acc_angle->x = (float) (atan2(_acc_raw_->y, _acc_raw_->z) + M_PI) * RAD_TO_DEG;
     73e:	2b ed       	ldi	r18, 0xDB	; 219
     740:	3f e0       	ldi	r19, 0x0F	; 15
     742:	49 e4       	ldi	r20, 0x49	; 73
     744:	50 e4       	ldi	r21, 0x40	; 64
     746:	c5 01       	movw	r24, r10
     748:	b4 01       	movw	r22, r8
     74a:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <__addsf3>
     74e:	21 ee       	ldi	r18, 0xE1	; 225
     750:	3e e2       	ldi	r19, 0x2E	; 46
     752:	45 e6       	ldi	r20, 0x65	; 101
     754:	52 e4       	ldi	r21, 0x42	; 66
     756:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <__mulsf3>
     75a:	0e 94 89 09 	call	0x1312	; 0x1312 <__fixsfsi>
    _acc_angle->y = (float) (atan2(_acc_raw_->z, _acc_raw_->x) + M_PI) * RAD_TO_DEG;
    
    _acc_angle->x -= (float) 180.0;
     75e:	88 27       	eor	r24, r24
     760:	77 fd       	sbrc	r23, 7
     762:	80 95       	com	r24
     764:	98 2f       	mov	r25, r24
     766:	0e 94 bc 09 	call	0x1378	; 0x1378 <__floatsisf>
     76a:	20 e0       	ldi	r18, 0x00	; 0
     76c:	30 e0       	ldi	r19, 0x00	; 0
     76e:	44 e3       	ldi	r20, 0x34	; 52
     770:	53 e4       	ldi	r21, 0x43	; 67
     772:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <__subsf3>
     776:	0e 94 89 09 	call	0x1312	; 0x1312 <__fixsfsi>
     77a:	79 83       	std	Y+1, r23	; 0x01
     77c:	68 83       	st	Y, r22
     77e:	b6 01       	movw	r22, r12
     780:	88 27       	eor	r24, r24
     782:	77 fd       	sbrc	r23, 7
     784:	80 95       	com	r24
     786:	98 2f       	mov	r25, r24
    if (_acc_angle->y > 90) {
     788:	0b 35       	cpi	r16, 0x5B	; 91
     78a:	11 05       	cpc	r17, r1
     78c:	4c f0       	brlt	.+18     	; 0x7a0 <read_acc_angel+0xf6>
        _acc_angle->y -= (float) 270;
     78e:	0e 94 bc 09 	call	0x1378	; 0x1378 <__floatsisf>
     792:	20 e0       	ldi	r18, 0x00	; 0
     794:	30 e0       	ldi	r19, 0x00	; 0
     796:	47 e8       	ldi	r20, 0x87	; 135
     798:	53 e4       	ldi	r21, 0x43	; 67
     79a:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <__subsf3>
     79e:	08 c0       	rjmp	.+16     	; 0x7b0 <read_acc_angel+0x106>
    } else {
        _acc_angle->y += (float) 90;
     7a0:	0e 94 bc 09 	call	0x1378	; 0x1378 <__floatsisf>
     7a4:	20 e0       	ldi	r18, 0x00	; 0
     7a6:	30 e0       	ldi	r19, 0x00	; 0
     7a8:	44 eb       	ldi	r20, 0xB4	; 180
     7aa:	52 e4       	ldi	r21, 0x42	; 66
     7ac:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <__addsf3>
     7b0:	0e 94 89 09 	call	0x1312	; 0x1312 <__fixsfsi>
     7b4:	7b 83       	std	Y+3, r23	; 0x03
     7b6:	6a 83       	std	Y+2, r22	; 0x02
    }


}/*read_acc_angle*/
     7b8:	df 91       	pop	r29
     7ba:	cf 91       	pop	r28
     7bc:	1f 91       	pop	r17
     7be:	0f 91       	pop	r16
     7c0:	ff 90       	pop	r15
     7c2:	ef 90       	pop	r14
     7c4:	df 90       	pop	r13
     7c6:	cf 90       	pop	r12
     7c8:	bf 90       	pop	r11
     7ca:	af 90       	pop	r10
     7cc:	9f 90       	pop	r9
     7ce:	8f 90       	pop	r8
     7d0:	08 95       	ret

000007d2 <read_mag_raw>:
 * read_mag_raw values
 * 
 
 *************************************************************************/

void read_mag_raw(struct mag_val_raw *_mag_raw_) {
     7d2:	df 92       	push	r13
     7d4:	ef 92       	push	r14
     7d6:	ff 92       	push	r15
     7d8:	0f 93       	push	r16
     7da:	1f 93       	push	r17
     7dc:	cf 93       	push	r28
     7de:	df 93       	push	r29
     7e0:	8c 01       	movw	r16, r24
    if (i2c_start(ACC_MAG_SLAVE_ADDRESS << 1) == 0) {
     7e2:	8a e3       	ldi	r24, 0x3A	; 58
     7e4:	0e 94 26 01 	call	0x24c	; 0x24c <i2c_start>
     7e8:	81 11       	cpse	r24, r1
     7ea:	29 c0       	rjmp	.+82     	; 0x83e <read_mag_raw+0x6c>
        i2c_write(ACC_MAG_OUT_X_L_M | (1 << 7)); //Auto increment registers by writing the MSB high
     7ec:	88 e8       	ldi	r24, 0x88	; 136
     7ee:	0e 94 79 01 	call	0x2f2	; 0x2f2 <i2c_write>

        if (i2c_rep_start(((uint8_t) ACC_MAG_SLAVE_ADDRESS << 1) | 1) == 0) {
     7f2:	8b e3       	ldi	r24, 0x3B	; 59
     7f4:	0e 94 6f 01 	call	0x2de	; 0x2de <i2c_rep_start>
     7f8:	81 11       	cpse	r24, r1
     7fa:	21 c0       	rjmp	.+66     	; 0x83e <read_mag_raw+0x6c>
            uint8_t xlm = i2c_read(ACK);
     7fc:	0e 94 8a 01 	call	0x314	; 0x314 <i2c_readAck>
     800:	f8 2e       	mov	r15, r24
            uint8_t xhm = i2c_read(ACK);
     802:	0e 94 8a 01 	call	0x314	; 0x314 <i2c_readAck>
     806:	d8 2e       	mov	r13, r24

            uint8_t ylm = i2c_read(ACK);
     808:	0e 94 8a 01 	call	0x314	; 0x314 <i2c_readAck>
     80c:	d8 2f       	mov	r29, r24
            uint8_t yhm = i2c_read(ACK);
     80e:	0e 94 8a 01 	call	0x314	; 0x314 <i2c_readAck>
     812:	e8 2e       	mov	r14, r24

            uint8_t zlm = i2c_read(ACK);
     814:	0e 94 8a 01 	call	0x314	; 0x314 <i2c_readAck>
     818:	c8 2f       	mov	r28, r24
            uint8_t zhm = i2c_read(NAK);
     81a:	0e 94 94 01 	call	0x328	; 0x328 <i2c_readNak>

            _mag_raw_->x = (int16_t) (xhm << 8 | xlm);
     81e:	2f 2d       	mov	r18, r15
     820:	30 e0       	ldi	r19, 0x00	; 0
     822:	3d 29       	or	r19, r13
     824:	f8 01       	movw	r30, r16
     826:	31 83       	std	Z+1, r19	; 0x01
     828:	20 83       	st	Z, r18
            _mag_raw_->y = (int16_t) (yhm << 8 | ylm);
     82a:	2d 2f       	mov	r18, r29
     82c:	30 e0       	ldi	r19, 0x00	; 0
     82e:	3e 29       	or	r19, r14
     830:	33 83       	std	Z+3, r19	; 0x03
     832:	22 83       	std	Z+2, r18	; 0x02
            _mag_raw_->z = (int16_t) (zhm << 8 | zlm);
     834:	2c 2f       	mov	r18, r28
     836:	30 e0       	ldi	r19, 0x00	; 0
     838:	38 2b       	or	r19, r24
     83a:	35 83       	std	Z+5, r19	; 0x05
     83c:	24 83       	std	Z+4, r18	; 0x04

        }
    }

     83e:	df 91       	pop	r29
     840:	cf 91       	pop	r28
     842:	1f 91       	pop	r17
     844:	0f 91       	pop	r16
     846:	ff 90       	pop	r15
     848:	ef 90       	pop	r14
     84a:	df 90       	pop	r13
     84c:	08 95       	ret

0000084e <write_to_reg>:
 Return: 0 if success
         1 if fail
 
*************************************************************************/

uint8_t write_to_reg(unsigned char address_slave,unsigned char reg_slave, uint8_t data){
     84e:	0f 93       	push	r16
     850:	1f 93       	push	r17
     852:	cf 93       	push	r28
     854:	df 93       	push	r29
     856:	1f 92       	push	r1
     858:	cd b7       	in	r28, 0x3d	; 61
     85a:	de b7       	in	r29, 0x3e	; 62
     85c:	04 2f       	mov	r16, r20
     if (i2c_start(address_slave << 1) == 0) {
     85e:	88 0f       	add	r24, r24
     860:	69 83       	std	Y+1, r22	; 0x01
     862:	0e 94 26 01 	call	0x24c	; 0x24c <i2c_start>
     866:	18 2f       	mov	r17, r24
     868:	69 81       	ldd	r22, Y+1	; 0x01
     86a:	81 11       	cpse	r24, r1
     86c:	09 c0       	rjmp	.+18     	; 0x880 <write_to_reg+0x32>
        i2c_write(reg_slave);
     86e:	86 2f       	mov	r24, r22
     870:	0e 94 79 01 	call	0x2f2	; 0x2f2 <i2c_write>
        i2c_write(data);
     874:	80 2f       	mov	r24, r16
     876:	0e 94 79 01 	call	0x2f2	; 0x2f2 <i2c_write>
        i2c_stop();
     87a:	0e 94 71 01 	call	0x2e2	; 0x2e2 <i2c_stop>
        return 0;
     87e:	01 c0       	rjmp	.+2      	; 0x882 <write_to_reg+0x34>
    } else {
        return 1;
     880:	11 e0       	ldi	r17, 0x01	; 1
    }
}/*write_to_reg*/
     882:	81 2f       	mov	r24, r17
     884:	0f 90       	pop	r0
     886:	df 91       	pop	r29
     888:	cf 91       	pop	r28
     88a:	1f 91       	pop	r17
     88c:	0f 91       	pop	r16
     88e:	08 95       	ret

00000890 <read_from_reg>:
 
 Return: Byte if success
         1 if fail
 
*************************************************************************/
uint8_t read_from_reg(unsigned char address_slave,unsigned reg_slave){
     890:	1f 93       	push	r17
     892:	cf 93       	push	r28
     894:	df 93       	push	r29
     896:	1f 92       	push	r1
     898:	cd b7       	in	r28, 0x3d	; 61
     89a:	de b7       	in	r29, 0x3e	; 62
     89c:	18 2f       	mov	r17, r24
      if (i2c_start(address_slave << 1) == 0) {
     89e:	88 0f       	add	r24, r24
     8a0:	69 83       	std	Y+1, r22	; 0x01
     8a2:	0e 94 26 01 	call	0x24c	; 0x24c <i2c_start>
     8a6:	69 81       	ldd	r22, Y+1	; 0x01
     8a8:	81 11       	cpse	r24, r1
     8aa:	10 c0       	rjmp	.+32     	; 0x8cc <read_from_reg+0x3c>
        i2c_write(reg_slave);
     8ac:	86 2f       	mov	r24, r22
     8ae:	0e 94 79 01 	call	0x2f2	; 0x2f2 <i2c_write>
        if (i2c_rep_start(((uint8_t) address_slave << 1) | 1) == 0) {
     8b2:	81 2f       	mov	r24, r17
     8b4:	88 0f       	add	r24, r24
     8b6:	81 60       	ori	r24, 0x01	; 1
     8b8:	0e 94 6f 01 	call	0x2de	; 0x2de <i2c_rep_start>
     8bc:	81 11       	cpse	r24, r1
     8be:	06 c0       	rjmp	.+12     	; 0x8cc <read_from_reg+0x3c>
            return i2c_read(NAK);
        }
    }
    return 1;
}/*read_from_reg*/
     8c0:	0f 90       	pop	r0
     8c2:	df 91       	pop	r29
     8c4:	cf 91       	pop	r28
     8c6:	1f 91       	pop	r17
*************************************************************************/
uint8_t read_from_reg(unsigned char address_slave,unsigned reg_slave){
      if (i2c_start(address_slave << 1) == 0) {
        i2c_write(reg_slave);
        if (i2c_rep_start(((uint8_t) address_slave << 1) | 1) == 0) {
            return i2c_read(NAK);
     8c8:	0c 94 94 01 	jmp	0x328	; 0x328 <i2c_readNak>
        }
    }
    return 1;
}/*read_from_reg*/
     8cc:	81 e0       	ldi	r24, 0x01	; 1
     8ce:	0f 90       	pop	r0
     8d0:	df 91       	pop	r29
     8d2:	cf 91       	pop	r28
     8d4:	1f 91       	pop	r17
     8d6:	08 95       	ret

000008d8 <timer1_init>:
     8d8:	e1 e8       	ldi	r30, 0x81	; 129
     8da:	f0 e0       	ldi	r31, 0x00	; 0
     8dc:	80 81       	ld	r24, Z
     8de:	82 60       	ori	r24, 0x02	; 2
     8e0:	80 83       	st	Z, r24
     8e2:	10 92 85 00 	sts	0x0085, r1
     8e6:	10 92 84 00 	sts	0x0084, r1
     8ea:	08 95       	ret

000008ec <main>:
 * 
 *  
 */


int main(void) {
     8ec:	cf 93       	push	r28
     8ee:	df 93       	push	r29
     8f0:	cd b7       	in	r28, 0x3d	; 61
     8f2:	de b7       	in	r29, 0x3e	; 62
     8f4:	ac 97       	sbiw	r28, 0x2c	; 44
     8f6:	0f b6       	in	r0, 0x3f	; 63
     8f8:	f8 94       	cli
     8fa:	de bf       	out	0x3e, r29	; 62
     8fc:	0f be       	out	0x3f, r0	; 63
     8fe:	cd bf       	out	0x3d, r28	; 61
    USART0Init();
     900:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <USART0Init>
    TWIInit();
     904:	0e 94 1d 01 	call	0x23a	; 0x23a <TWIInit>
    Acc_angle acc_angel;
    
    Mag_raw mag_raw;

    //Set stream pointer
    FILE usart0_str = FDEV_SETUP_STREAM(USART0SendByte, USART0ReceiveByte, _FDEV_SETUP_RW);
     908:	fe 01       	movw	r30, r28
     90a:	31 96       	adiw	r30, 0x01	; 1
     90c:	8e e0       	ldi	r24, 0x0E	; 14
     90e:	df 01       	movw	r26, r30
     910:	1d 92       	st	X+, r1
     912:	8a 95       	dec	r24
     914:	e9 f7       	brne	.-6      	; 0x910 <__stack+0x11>
     916:	83 e0       	ldi	r24, 0x03	; 3
     918:	8c 83       	std	Y+4, r24	; 0x04
     91a:	8b ef       	ldi	r24, 0xFB	; 251
     91c:	90 e0       	ldi	r25, 0x00	; 0
     91e:	9a 87       	std	Y+10, r25	; 0x0a
     920:	89 87       	std	Y+9, r24	; 0x09
     922:	8e e0       	ldi	r24, 0x0E	; 14
     924:	91 e0       	ldi	r25, 0x01	; 1
     926:	9c 87       	std	Y+12, r25	; 0x0c
     928:	8b 87       	std	Y+11, r24	; 0x0b
    //assign our stream to standart I/O streams, cause why re-invent the wheel? Great for debuging :-) Don't forget to exclude later on.!!!!!!!!!!!!!!!
    stdin = stdout = &usart0_str;
     92a:	f0 93 19 01 	sts	0x0119, r31
     92e:	e0 93 18 01 	sts	0x0118, r30
     932:	f0 93 17 01 	sts	0x0117, r31
     936:	e0 93 16 01 	sts	0x0116, r30
    /*gyro*/
            init_gyro();
     93a:	0e 94 14 02 	call	0x428	; 0x428 <init_gyro>
                read_gyro_values(&gyro_raw);
//                printf("[X: %d Y: %d Z: %d]\n",gyro_raw.x,gyro_raw.y,gyro_raw.z);
                read_gyro_values_rate_dps(&gyro_raw,&gyro_dps);
//                printf("[X: %f Y: %f Z: %f]\n",gyro_dps.x,gyro_dps.y,gyro_dps.z);
                read_gyro_values_angle(&gyro_dps,&gyro_angle);
                printf("[X: %f Y: %f Z: %f]\n",gyro_angle.x,gyro_angle.y,gyro_angle.z);
     93e:	00 e0       	ldi	r16, 0x00	; 0
     940:	11 e0       	ldi	r17, 0x01	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     942:	bf ef       	ldi	r27, 0xFF	; 255
     944:	29 e6       	ldi	r18, 0x69	; 105
     946:	88 e1       	ldi	r24, 0x18	; 24
     948:	b1 50       	subi	r27, 0x01	; 1
     94a:	20 40       	sbci	r18, 0x00	; 0
     94c:	80 40       	sbci	r24, 0x00	; 0
     94e:	e1 f7       	brne	.-8      	; 0x948 <__stack+0x49>
     950:	00 c0       	rjmp	.+0      	; 0x952 <__stack+0x53>
     952:	00 00       	nop
    while (1) {
        
        _delay_ms(500);
        /*gyro*/

                read_gyro_values(&gyro_raw);
     954:	ce 01       	movw	r24, r28
     956:	87 96       	adiw	r24, 0x27	; 39
     958:	0e 94 23 02 	call	0x446	; 0x446 <read_gyro_values>
//                printf("[X: %d Y: %d Z: %d]\n",gyro_raw.x,gyro_raw.y,gyro_raw.z);
                read_gyro_values_rate_dps(&gyro_raw,&gyro_dps);
     95c:	be 01       	movw	r22, r28
     95e:	65 5e       	subi	r22, 0xE5	; 229
     960:	7f 4f       	sbci	r23, 0xFF	; 255
     962:	ce 01       	movw	r24, r28
     964:	87 96       	adiw	r24, 0x27	; 39
     966:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <read_gyro_values_rate_dps>
//                printf("[X: %f Y: %f Z: %f]\n",gyro_dps.x,gyro_dps.y,gyro_dps.z);
                read_gyro_values_angle(&gyro_dps,&gyro_angle);
     96a:	be 01       	movw	r22, r28
     96c:	61 5f       	subi	r22, 0xF1	; 241
     96e:	7f 4f       	sbci	r23, 0xFF	; 255
     970:	ce 01       	movw	r24, r28
     972:	4b 96       	adiw	r24, 0x1b	; 27
     974:	0e 94 ae 02 	call	0x55c	; 0x55c <read_gyro_values_angle>
                printf("[X: %f Y: %f Z: %f]\n",gyro_angle.x,gyro_angle.y,gyro_angle.z);
     978:	8a 8d       	ldd	r24, Y+26	; 0x1a
     97a:	8f 93       	push	r24
     97c:	89 8d       	ldd	r24, Y+25	; 0x19
     97e:	8f 93       	push	r24
     980:	88 8d       	ldd	r24, Y+24	; 0x18
     982:	8f 93       	push	r24
     984:	8f 89       	ldd	r24, Y+23	; 0x17
     986:	8f 93       	push	r24
     988:	8e 89       	ldd	r24, Y+22	; 0x16
     98a:	8f 93       	push	r24
     98c:	8d 89       	ldd	r24, Y+21	; 0x15
     98e:	8f 93       	push	r24
     990:	8c 89       	ldd	r24, Y+20	; 0x14
     992:	8f 93       	push	r24
     994:	8b 89       	ldd	r24, Y+19	; 0x13
     996:	8f 93       	push	r24
     998:	8a 89       	ldd	r24, Y+18	; 0x12
     99a:	8f 93       	push	r24
     99c:	89 89       	ldd	r24, Y+17	; 0x11
     99e:	8f 93       	push	r24
     9a0:	88 89       	ldd	r24, Y+16	; 0x10
     9a2:	8f 93       	push	r24
     9a4:	8f 85       	ldd	r24, Y+15	; 0x0f
     9a6:	8f 93       	push	r24
     9a8:	1f 93       	push	r17
     9aa:	0f 93       	push	r16
     9ac:	0e 94 37 0c 	call	0x186e	; 0x186e <printf>
        /*mag*/
//        read_mag_raw(&mag_raw);
//        printf("[X: %d Y: %d Z: %d]\n",mag_raw.x,mag_raw.y,mag_raw.z);


    }
     9b0:	0f b6       	in	r0, 0x3f	; 63
     9b2:	f8 94       	cli
     9b4:	de bf       	out	0x3e, r29	; 62
     9b6:	0f be       	out	0x3f, r0	; 63
     9b8:	cd bf       	out	0x3d, r28	; 61
     9ba:	c3 cf       	rjmp	.-122    	; 0x942 <__stack+0x43>

000009bc <vfprintf>:
     9bc:	a3 e1       	ldi	r26, 0x13	; 19
     9be:	b0 e0       	ldi	r27, 0x00	; 0
     9c0:	e4 ee       	ldi	r30, 0xE4	; 228
     9c2:	f4 e0       	ldi	r31, 0x04	; 4
     9c4:	0c 94 da 0a 	jmp	0x15b4	; 0x15b4 <__prologue_saves__>
     9c8:	6c 01       	movw	r12, r24
     9ca:	4b 01       	movw	r8, r22
     9cc:	2a 01       	movw	r4, r20
     9ce:	fc 01       	movw	r30, r24
     9d0:	17 82       	std	Z+7, r1	; 0x07
     9d2:	16 82       	std	Z+6, r1	; 0x06
     9d4:	83 81       	ldd	r24, Z+3	; 0x03
     9d6:	81 ff       	sbrs	r24, 1
     9d8:	43 c3       	rjmp	.+1670   	; 0x1060 <vfprintf+0x6a4>
     9da:	ae 01       	movw	r20, r28
     9dc:	4f 5f       	subi	r20, 0xFF	; 255
     9de:	5f 4f       	sbci	r21, 0xFF	; 255
     9e0:	3a 01       	movw	r6, r20
     9e2:	f6 01       	movw	r30, r12
     9e4:	93 81       	ldd	r25, Z+3	; 0x03
     9e6:	f4 01       	movw	r30, r8
     9e8:	93 fd       	sbrc	r25, 3
     9ea:	85 91       	lpm	r24, Z+
     9ec:	93 ff       	sbrs	r25, 3
     9ee:	81 91       	ld	r24, Z+
     9f0:	4f 01       	movw	r8, r30
     9f2:	88 23       	and	r24, r24
     9f4:	09 f4       	brne	.+2      	; 0x9f8 <vfprintf+0x3c>
     9f6:	30 c3       	rjmp	.+1632   	; 0x1058 <vfprintf+0x69c>
     9f8:	85 32       	cpi	r24, 0x25	; 37
     9fa:	39 f4       	brne	.+14     	; 0xa0a <vfprintf+0x4e>
     9fc:	93 fd       	sbrc	r25, 3
     9fe:	85 91       	lpm	r24, Z+
     a00:	93 ff       	sbrs	r25, 3
     a02:	81 91       	ld	r24, Z+
     a04:	4f 01       	movw	r8, r30
     a06:	85 32       	cpi	r24, 0x25	; 37
     a08:	39 f4       	brne	.+14     	; 0xa18 <vfprintf+0x5c>
     a0a:	b6 01       	movw	r22, r12
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <fputc>
     a12:	52 01       	movw	r10, r4
     a14:	25 01       	movw	r4, r10
     a16:	e5 cf       	rjmp	.-54     	; 0x9e2 <vfprintf+0x26>
     a18:	10 e0       	ldi	r17, 0x00	; 0
     a1a:	f1 2c       	mov	r15, r1
     a1c:	20 e0       	ldi	r18, 0x00	; 0
     a1e:	20 32       	cpi	r18, 0x20	; 32
     a20:	a0 f4       	brcc	.+40     	; 0xa4a <vfprintf+0x8e>
     a22:	8b 32       	cpi	r24, 0x2B	; 43
     a24:	69 f0       	breq	.+26     	; 0xa40 <vfprintf+0x84>
     a26:	30 f4       	brcc	.+12     	; 0xa34 <vfprintf+0x78>
     a28:	80 32       	cpi	r24, 0x20	; 32
     a2a:	59 f0       	breq	.+22     	; 0xa42 <vfprintf+0x86>
     a2c:	83 32       	cpi	r24, 0x23	; 35
     a2e:	69 f4       	brne	.+26     	; 0xa4a <vfprintf+0x8e>
     a30:	20 61       	ori	r18, 0x10	; 16
     a32:	2c c0       	rjmp	.+88     	; 0xa8c <vfprintf+0xd0>
     a34:	8d 32       	cpi	r24, 0x2D	; 45
     a36:	39 f0       	breq	.+14     	; 0xa46 <vfprintf+0x8a>
     a38:	80 33       	cpi	r24, 0x30	; 48
     a3a:	39 f4       	brne	.+14     	; 0xa4a <vfprintf+0x8e>
     a3c:	21 60       	ori	r18, 0x01	; 1
     a3e:	26 c0       	rjmp	.+76     	; 0xa8c <vfprintf+0xd0>
     a40:	22 60       	ori	r18, 0x02	; 2
     a42:	24 60       	ori	r18, 0x04	; 4
     a44:	23 c0       	rjmp	.+70     	; 0xa8c <vfprintf+0xd0>
     a46:	28 60       	ori	r18, 0x08	; 8
     a48:	21 c0       	rjmp	.+66     	; 0xa8c <vfprintf+0xd0>
     a4a:	27 fd       	sbrc	r18, 7
     a4c:	27 c0       	rjmp	.+78     	; 0xa9c <vfprintf+0xe0>
     a4e:	30 ed       	ldi	r19, 0xD0	; 208
     a50:	38 0f       	add	r19, r24
     a52:	3a 30       	cpi	r19, 0x0A	; 10
     a54:	78 f4       	brcc	.+30     	; 0xa74 <vfprintf+0xb8>
     a56:	26 ff       	sbrs	r18, 6
     a58:	06 c0       	rjmp	.+12     	; 0xa66 <vfprintf+0xaa>
     a5a:	fa e0       	ldi	r31, 0x0A	; 10
     a5c:	1f 9f       	mul	r17, r31
     a5e:	30 0d       	add	r19, r0
     a60:	11 24       	eor	r1, r1
     a62:	13 2f       	mov	r17, r19
     a64:	13 c0       	rjmp	.+38     	; 0xa8c <vfprintf+0xd0>
     a66:	4a e0       	ldi	r20, 0x0A	; 10
     a68:	f4 9e       	mul	r15, r20
     a6a:	30 0d       	add	r19, r0
     a6c:	11 24       	eor	r1, r1
     a6e:	f3 2e       	mov	r15, r19
     a70:	20 62       	ori	r18, 0x20	; 32
     a72:	0c c0       	rjmp	.+24     	; 0xa8c <vfprintf+0xd0>
     a74:	8e 32       	cpi	r24, 0x2E	; 46
     a76:	21 f4       	brne	.+8      	; 0xa80 <vfprintf+0xc4>
     a78:	26 fd       	sbrc	r18, 6
     a7a:	ee c2       	rjmp	.+1500   	; 0x1058 <vfprintf+0x69c>
     a7c:	20 64       	ori	r18, 0x40	; 64
     a7e:	06 c0       	rjmp	.+12     	; 0xa8c <vfprintf+0xd0>
     a80:	8c 36       	cpi	r24, 0x6C	; 108
     a82:	11 f4       	brne	.+4      	; 0xa88 <vfprintf+0xcc>
     a84:	20 68       	ori	r18, 0x80	; 128
     a86:	02 c0       	rjmp	.+4      	; 0xa8c <vfprintf+0xd0>
     a88:	88 36       	cpi	r24, 0x68	; 104
     a8a:	41 f4       	brne	.+16     	; 0xa9c <vfprintf+0xe0>
     a8c:	f4 01       	movw	r30, r8
     a8e:	93 fd       	sbrc	r25, 3
     a90:	85 91       	lpm	r24, Z+
     a92:	93 ff       	sbrs	r25, 3
     a94:	81 91       	ld	r24, Z+
     a96:	4f 01       	movw	r8, r30
     a98:	81 11       	cpse	r24, r1
     a9a:	c1 cf       	rjmp	.-126    	; 0xa1e <vfprintf+0x62>
     a9c:	9b eb       	ldi	r25, 0xBB	; 187
     a9e:	98 0f       	add	r25, r24
     aa0:	93 30       	cpi	r25, 0x03	; 3
     aa2:	18 f4       	brcc	.+6      	; 0xaaa <vfprintf+0xee>
     aa4:	20 61       	ori	r18, 0x10	; 16
     aa6:	80 5e       	subi	r24, 0xE0	; 224
     aa8:	06 c0       	rjmp	.+12     	; 0xab6 <vfprintf+0xfa>
     aaa:	9b e9       	ldi	r25, 0x9B	; 155
     aac:	98 0f       	add	r25, r24
     aae:	93 30       	cpi	r25, 0x03	; 3
     ab0:	08 f0       	brcs	.+2      	; 0xab4 <vfprintf+0xf8>
     ab2:	71 c1       	rjmp	.+738    	; 0xd96 <vfprintf+0x3da>
     ab4:	2f 7e       	andi	r18, 0xEF	; 239
     ab6:	26 ff       	sbrs	r18, 6
     ab8:	16 e0       	ldi	r17, 0x06	; 6
     aba:	2f 73       	andi	r18, 0x3F	; 63
     abc:	32 2e       	mov	r3, r18
     abe:	85 36       	cpi	r24, 0x65	; 101
     ac0:	19 f4       	brne	.+6      	; 0xac8 <vfprintf+0x10c>
     ac2:	20 64       	ori	r18, 0x40	; 64
     ac4:	32 2e       	mov	r3, r18
     ac6:	08 c0       	rjmp	.+16     	; 0xad8 <vfprintf+0x11c>
     ac8:	86 36       	cpi	r24, 0x66	; 102
     aca:	21 f4       	brne	.+8      	; 0xad4 <vfprintf+0x118>
     acc:	f2 2f       	mov	r31, r18
     ace:	f0 68       	ori	r31, 0x80	; 128
     ad0:	3f 2e       	mov	r3, r31
     ad2:	02 c0       	rjmp	.+4      	; 0xad8 <vfprintf+0x11c>
     ad4:	11 11       	cpse	r17, r1
     ad6:	11 50       	subi	r17, 0x01	; 1
     ad8:	37 fe       	sbrs	r3, 7
     ada:	07 c0       	rjmp	.+14     	; 0xaea <vfprintf+0x12e>
     adc:	1c 33       	cpi	r17, 0x3C	; 60
     ade:	50 f4       	brcc	.+20     	; 0xaf4 <vfprintf+0x138>
     ae0:	ee 24       	eor	r14, r14
     ae2:	e3 94       	inc	r14
     ae4:	e1 0e       	add	r14, r17
     ae6:	27 e0       	ldi	r18, 0x07	; 7
     ae8:	0b c0       	rjmp	.+22     	; 0xb00 <vfprintf+0x144>
     aea:	18 30       	cpi	r17, 0x08	; 8
     aec:	38 f0       	brcs	.+14     	; 0xafc <vfprintf+0x140>
     aee:	27 e0       	ldi	r18, 0x07	; 7
     af0:	17 e0       	ldi	r17, 0x07	; 7
     af2:	05 c0       	rjmp	.+10     	; 0xafe <vfprintf+0x142>
     af4:	27 e0       	ldi	r18, 0x07	; 7
     af6:	4c e3       	ldi	r20, 0x3C	; 60
     af8:	e4 2e       	mov	r14, r20
     afa:	02 c0       	rjmp	.+4      	; 0xb00 <vfprintf+0x144>
     afc:	21 2f       	mov	r18, r17
     afe:	e1 2c       	mov	r14, r1
     b00:	52 01       	movw	r10, r4
     b02:	44 e0       	ldi	r20, 0x04	; 4
     b04:	a4 0e       	add	r10, r20
     b06:	b1 1c       	adc	r11, r1
     b08:	f2 01       	movw	r30, r4
     b0a:	60 81       	ld	r22, Z
     b0c:	71 81       	ldd	r23, Z+1	; 0x01
     b0e:	82 81       	ldd	r24, Z+2	; 0x02
     b10:	93 81       	ldd	r25, Z+3	; 0x03
     b12:	0e 2d       	mov	r16, r14
     b14:	a3 01       	movw	r20, r6
     b16:	0e 94 11 0b 	call	0x1622	; 0x1622 <__ftoa_engine>
     b1a:	2c 01       	movw	r4, r24
     b1c:	09 81       	ldd	r16, Y+1	; 0x01
     b1e:	00 ff       	sbrs	r16, 0
     b20:	02 c0       	rjmp	.+4      	; 0xb26 <vfprintf+0x16a>
     b22:	03 ff       	sbrs	r16, 3
     b24:	07 c0       	rjmp	.+14     	; 0xb34 <vfprintf+0x178>
     b26:	31 fc       	sbrc	r3, 1
     b28:	08 c0       	rjmp	.+16     	; 0xb3a <vfprintf+0x17e>
     b2a:	32 fe       	sbrs	r3, 2
     b2c:	09 c0       	rjmp	.+18     	; 0xb40 <vfprintf+0x184>
     b2e:	30 e2       	ldi	r19, 0x20	; 32
     b30:	23 2e       	mov	r2, r19
     b32:	07 c0       	rjmp	.+14     	; 0xb42 <vfprintf+0x186>
     b34:	2d e2       	ldi	r18, 0x2D	; 45
     b36:	22 2e       	mov	r2, r18
     b38:	04 c0       	rjmp	.+8      	; 0xb42 <vfprintf+0x186>
     b3a:	9b e2       	ldi	r25, 0x2B	; 43
     b3c:	29 2e       	mov	r2, r25
     b3e:	01 c0       	rjmp	.+2      	; 0xb42 <vfprintf+0x186>
     b40:	21 2c       	mov	r2, r1
     b42:	80 2f       	mov	r24, r16
     b44:	8c 70       	andi	r24, 0x0C	; 12
     b46:	19 f0       	breq	.+6      	; 0xb4e <vfprintf+0x192>
     b48:	21 10       	cpse	r2, r1
     b4a:	68 c2       	rjmp	.+1232   	; 0x101c <vfprintf+0x660>
     b4c:	a8 c2       	rjmp	.+1360   	; 0x109e <vfprintf+0x6e2>
     b4e:	37 fe       	sbrs	r3, 7
     b50:	0f c0       	rjmp	.+30     	; 0xb70 <vfprintf+0x1b4>
     b52:	e4 0c       	add	r14, r4
     b54:	04 ff       	sbrs	r16, 4
     b56:	04 c0       	rjmp	.+8      	; 0xb60 <vfprintf+0x1a4>
     b58:	8a 81       	ldd	r24, Y+2	; 0x02
     b5a:	81 33       	cpi	r24, 0x31	; 49
     b5c:	09 f4       	brne	.+2      	; 0xb60 <vfprintf+0x1a4>
     b5e:	ea 94       	dec	r14
     b60:	1e 14       	cp	r1, r14
     b62:	74 f5       	brge	.+92     	; 0xbc0 <vfprintf+0x204>
     b64:	f8 e0       	ldi	r31, 0x08	; 8
     b66:	fe 15       	cp	r31, r14
     b68:	78 f5       	brcc	.+94     	; 0xbc8 <vfprintf+0x20c>
     b6a:	88 e0       	ldi	r24, 0x08	; 8
     b6c:	e8 2e       	mov	r14, r24
     b6e:	2c c0       	rjmp	.+88     	; 0xbc8 <vfprintf+0x20c>
     b70:	36 fc       	sbrc	r3, 6
     b72:	2a c0       	rjmp	.+84     	; 0xbc8 <vfprintf+0x20c>
     b74:	81 2f       	mov	r24, r17
     b76:	90 e0       	ldi	r25, 0x00	; 0
     b78:	84 15       	cp	r24, r4
     b7a:	95 05       	cpc	r25, r5
     b7c:	9c f0       	brlt	.+38     	; 0xba4 <vfprintf+0x1e8>
     b7e:	2c ef       	ldi	r18, 0xFC	; 252
     b80:	42 16       	cp	r4, r18
     b82:	2f ef       	ldi	r18, 0xFF	; 255
     b84:	52 06       	cpc	r5, r18
     b86:	74 f0       	brlt	.+28     	; 0xba4 <vfprintf+0x1e8>
     b88:	43 2d       	mov	r20, r3
     b8a:	40 68       	ori	r20, 0x80	; 128
     b8c:	34 2e       	mov	r3, r20
     b8e:	0a c0       	rjmp	.+20     	; 0xba4 <vfprintf+0x1e8>
     b90:	e2 e0       	ldi	r30, 0x02	; 2
     b92:	f0 e0       	ldi	r31, 0x00	; 0
     b94:	ec 0f       	add	r30, r28
     b96:	fd 1f       	adc	r31, r29
     b98:	e1 0f       	add	r30, r17
     b9a:	f1 1d       	adc	r31, r1
     b9c:	80 81       	ld	r24, Z
     b9e:	80 33       	cpi	r24, 0x30	; 48
     ba0:	19 f4       	brne	.+6      	; 0xba8 <vfprintf+0x1ec>
     ba2:	11 50       	subi	r17, 0x01	; 1
     ba4:	11 11       	cpse	r17, r1
     ba6:	f4 cf       	rjmp	.-24     	; 0xb90 <vfprintf+0x1d4>
     ba8:	37 fe       	sbrs	r3, 7
     baa:	0e c0       	rjmp	.+28     	; 0xbc8 <vfprintf+0x20c>
     bac:	ee 24       	eor	r14, r14
     bae:	e3 94       	inc	r14
     bb0:	e1 0e       	add	r14, r17
     bb2:	81 2f       	mov	r24, r17
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	48 16       	cp	r4, r24
     bb8:	59 06       	cpc	r5, r25
     bba:	2c f4       	brge	.+10     	; 0xbc6 <vfprintf+0x20a>
     bbc:	14 19       	sub	r17, r4
     bbe:	04 c0       	rjmp	.+8      	; 0xbc8 <vfprintf+0x20c>
     bc0:	ee 24       	eor	r14, r14
     bc2:	e3 94       	inc	r14
     bc4:	01 c0       	rjmp	.+2      	; 0xbc8 <vfprintf+0x20c>
     bc6:	10 e0       	ldi	r17, 0x00	; 0
     bc8:	37 fe       	sbrs	r3, 7
     bca:	06 c0       	rjmp	.+12     	; 0xbd8 <vfprintf+0x21c>
     bcc:	14 14       	cp	r1, r4
     bce:	15 04       	cpc	r1, r5
     bd0:	34 f4       	brge	.+12     	; 0xbde <vfprintf+0x222>
     bd2:	c2 01       	movw	r24, r4
     bd4:	01 96       	adiw	r24, 0x01	; 1
     bd6:	05 c0       	rjmp	.+10     	; 0xbe2 <vfprintf+0x226>
     bd8:	85 e0       	ldi	r24, 0x05	; 5
     bda:	90 e0       	ldi	r25, 0x00	; 0
     bdc:	02 c0       	rjmp	.+4      	; 0xbe2 <vfprintf+0x226>
     bde:	81 e0       	ldi	r24, 0x01	; 1
     be0:	90 e0       	ldi	r25, 0x00	; 0
     be2:	21 10       	cpse	r2, r1
     be4:	01 96       	adiw	r24, 0x01	; 1
     be6:	11 23       	and	r17, r17
     be8:	31 f0       	breq	.+12     	; 0xbf6 <vfprintf+0x23a>
     bea:	21 2f       	mov	r18, r17
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	2f 5f       	subi	r18, 0xFF	; 255
     bf0:	3f 4f       	sbci	r19, 0xFF	; 255
     bf2:	82 0f       	add	r24, r18
     bf4:	93 1f       	adc	r25, r19
     bf6:	2f 2d       	mov	r18, r15
     bf8:	30 e0       	ldi	r19, 0x00	; 0
     bfa:	82 17       	cp	r24, r18
     bfc:	93 07       	cpc	r25, r19
     bfe:	14 f4       	brge	.+4      	; 0xc04 <vfprintf+0x248>
     c00:	f8 1a       	sub	r15, r24
     c02:	01 c0       	rjmp	.+2      	; 0xc06 <vfprintf+0x24a>
     c04:	f1 2c       	mov	r15, r1
     c06:	83 2d       	mov	r24, r3
     c08:	89 70       	andi	r24, 0x09	; 9
     c0a:	49 f4       	brne	.+18     	; 0xc1e <vfprintf+0x262>
     c0c:	ff 20       	and	r15, r15
     c0e:	39 f0       	breq	.+14     	; 0xc1e <vfprintf+0x262>
     c10:	b6 01       	movw	r22, r12
     c12:	80 e2       	ldi	r24, 0x20	; 32
     c14:	90 e0       	ldi	r25, 0x00	; 0
     c16:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <fputc>
     c1a:	fa 94       	dec	r15
     c1c:	f7 cf       	rjmp	.-18     	; 0xc0c <vfprintf+0x250>
     c1e:	22 20       	and	r2, r2
     c20:	29 f0       	breq	.+10     	; 0xc2c <vfprintf+0x270>
     c22:	b6 01       	movw	r22, r12
     c24:	82 2d       	mov	r24, r2
     c26:	90 e0       	ldi	r25, 0x00	; 0
     c28:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <fputc>
     c2c:	33 fc       	sbrc	r3, 3
     c2e:	09 c0       	rjmp	.+18     	; 0xc42 <vfprintf+0x286>
     c30:	ff 20       	and	r15, r15
     c32:	39 f0       	breq	.+14     	; 0xc42 <vfprintf+0x286>
     c34:	b6 01       	movw	r22, r12
     c36:	80 e3       	ldi	r24, 0x30	; 48
     c38:	90 e0       	ldi	r25, 0x00	; 0
     c3a:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <fputc>
     c3e:	fa 94       	dec	r15
     c40:	f7 cf       	rjmp	.-18     	; 0xc30 <vfprintf+0x274>
     c42:	37 fe       	sbrs	r3, 7
     c44:	5a c0       	rjmp	.+180    	; 0xcfa <vfprintf+0x33e>
     c46:	94 2d       	mov	r25, r4
     c48:	85 2d       	mov	r24, r5
     c4a:	57 fe       	sbrs	r5, 7
     c4c:	02 c0       	rjmp	.+4      	; 0xc52 <vfprintf+0x296>
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	80 e0       	ldi	r24, 0x00	; 0
     c52:	29 2e       	mov	r2, r25
     c54:	38 2e       	mov	r3, r24
     c56:	20 e0       	ldi	r18, 0x00	; 0
     c58:	30 e0       	ldi	r19, 0x00	; 0
     c5a:	a2 01       	movw	r20, r4
     c5c:	4e 19       	sub	r20, r14
     c5e:	51 09       	sbc	r21, r1
     c60:	5d 87       	std	Y+13, r21	; 0x0d
     c62:	4c 87       	std	Y+12, r20	; 0x0c
     c64:	a2 01       	movw	r20, r4
     c66:	42 19       	sub	r20, r2
     c68:	53 09       	sbc	r21, r3
     c6a:	5f 87       	std	Y+15, r21	; 0x0f
     c6c:	4e 87       	std	Y+14, r20	; 0x0e
     c6e:	61 2f       	mov	r22, r17
     c70:	70 e0       	ldi	r23, 0x00	; 0
     c72:	44 27       	eor	r20, r20
     c74:	55 27       	eor	r21, r21
     c76:	46 1b       	sub	r20, r22
     c78:	57 0b       	sbc	r21, r23
     c7a:	59 8b       	std	Y+17, r21	; 0x11
     c7c:	48 8b       	std	Y+16, r20	; 0x10
     c7e:	5f ef       	ldi	r21, 0xFF	; 255
     c80:	25 16       	cp	r2, r21
     c82:	35 06       	cpc	r3, r21
     c84:	49 f4       	brne	.+18     	; 0xc98 <vfprintf+0x2dc>
     c86:	b6 01       	movw	r22, r12
     c88:	8e e2       	ldi	r24, 0x2E	; 46
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	2a 8b       	std	Y+18, r18	; 0x12
     c8e:	3b 8b       	std	Y+19, r19	; 0x13
     c90:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <fputc>
     c94:	3b 89       	ldd	r19, Y+19	; 0x13
     c96:	2a 89       	ldd	r18, Y+18	; 0x12
     c98:	42 14       	cp	r4, r2
     c9a:	53 04       	cpc	r5, r3
     c9c:	6c f0       	brlt	.+26     	; 0xcb8 <vfprintf+0x2fc>
     c9e:	4c 85       	ldd	r20, Y+12	; 0x0c
     ca0:	5d 85       	ldd	r21, Y+13	; 0x0d
     ca2:	42 15       	cp	r20, r2
     ca4:	53 05       	cpc	r21, r3
     ca6:	44 f4       	brge	.+16     	; 0xcb8 <vfprintf+0x2fc>
     ca8:	ee 85       	ldd	r30, Y+14	; 0x0e
     caa:	ff 85       	ldd	r31, Y+15	; 0x0f
     cac:	e2 0f       	add	r30, r18
     cae:	f3 1f       	adc	r31, r19
     cb0:	e6 0d       	add	r30, r6
     cb2:	f7 1d       	adc	r31, r7
     cb4:	81 81       	ldd	r24, Z+1	; 0x01
     cb6:	01 c0       	rjmp	.+2      	; 0xcba <vfprintf+0x2fe>
     cb8:	80 e3       	ldi	r24, 0x30	; 48
     cba:	51 e0       	ldi	r21, 0x01	; 1
     cbc:	25 1a       	sub	r2, r21
     cbe:	31 08       	sbc	r3, r1
     cc0:	2f 5f       	subi	r18, 0xFF	; 255
     cc2:	3f 4f       	sbci	r19, 0xFF	; 255
     cc4:	48 89       	ldd	r20, Y+16	; 0x10
     cc6:	59 89       	ldd	r21, Y+17	; 0x11
     cc8:	24 16       	cp	r2, r20
     cca:	35 06       	cpc	r3, r21
     ccc:	4c f0       	brlt	.+18     	; 0xce0 <vfprintf+0x324>
     cce:	b6 01       	movw	r22, r12
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	2a 8b       	std	Y+18, r18	; 0x12
     cd4:	3b 8b       	std	Y+19, r19	; 0x13
     cd6:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <fputc>
     cda:	2a 89       	ldd	r18, Y+18	; 0x12
     cdc:	3b 89       	ldd	r19, Y+19	; 0x13
     cde:	cf cf       	rjmp	.-98     	; 0xc7e <vfprintf+0x2c2>
     ce0:	24 14       	cp	r2, r4
     ce2:	35 04       	cpc	r3, r5
     ce4:	39 f4       	brne	.+14     	; 0xcf4 <vfprintf+0x338>
     ce6:	9a 81       	ldd	r25, Y+2	; 0x02
     ce8:	96 33       	cpi	r25, 0x36	; 54
     cea:	18 f4       	brcc	.+6      	; 0xcf2 <vfprintf+0x336>
     cec:	95 33       	cpi	r25, 0x35	; 53
     cee:	11 f4       	brne	.+4      	; 0xcf4 <vfprintf+0x338>
     cf0:	04 ff       	sbrs	r16, 4
     cf2:	81 e3       	ldi	r24, 0x31	; 49
     cf4:	b6 01       	movw	r22, r12
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	4b c0       	rjmp	.+150    	; 0xd90 <vfprintf+0x3d4>
     cfa:	8a 81       	ldd	r24, Y+2	; 0x02
     cfc:	81 33       	cpi	r24, 0x31	; 49
     cfe:	09 f0       	breq	.+2      	; 0xd02 <vfprintf+0x346>
     d00:	0f 7e       	andi	r16, 0xEF	; 239
     d02:	b6 01       	movw	r22, r12
     d04:	90 e0       	ldi	r25, 0x00	; 0
     d06:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <fputc>
     d0a:	11 11       	cpse	r17, r1
     d0c:	05 c0       	rjmp	.+10     	; 0xd18 <vfprintf+0x35c>
     d0e:	34 fc       	sbrc	r3, 4
     d10:	18 c0       	rjmp	.+48     	; 0xd42 <vfprintf+0x386>
     d12:	85 e6       	ldi	r24, 0x65	; 101
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	17 c0       	rjmp	.+46     	; 0xd46 <vfprintf+0x38a>
     d18:	b6 01       	movw	r22, r12
     d1a:	8e e2       	ldi	r24, 0x2E	; 46
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <fputc>
     d22:	82 e0       	ldi	r24, 0x02	; 2
     d24:	ee 24       	eor	r14, r14
     d26:	e3 94       	inc	r14
     d28:	e8 0e       	add	r14, r24
     d2a:	f3 01       	movw	r30, r6
     d2c:	e8 0f       	add	r30, r24
     d2e:	f1 1d       	adc	r31, r1
     d30:	80 81       	ld	r24, Z
     d32:	b6 01       	movw	r22, r12
     d34:	90 e0       	ldi	r25, 0x00	; 0
     d36:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <fputc>
     d3a:	11 50       	subi	r17, 0x01	; 1
     d3c:	8e 2d       	mov	r24, r14
     d3e:	91 f7       	brne	.-28     	; 0xd24 <vfprintf+0x368>
     d40:	e6 cf       	rjmp	.-52     	; 0xd0e <vfprintf+0x352>
     d42:	85 e4       	ldi	r24, 0x45	; 69
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	b6 01       	movw	r22, r12
     d48:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <fputc>
     d4c:	57 fc       	sbrc	r5, 7
     d4e:	05 c0       	rjmp	.+10     	; 0xd5a <vfprintf+0x39e>
     d50:	41 14       	cp	r4, r1
     d52:	51 04       	cpc	r5, r1
     d54:	39 f4       	brne	.+14     	; 0xd64 <vfprintf+0x3a8>
     d56:	04 ff       	sbrs	r16, 4
     d58:	05 c0       	rjmp	.+10     	; 0xd64 <vfprintf+0x3a8>
     d5a:	51 94       	neg	r5
     d5c:	41 94       	neg	r4
     d5e:	51 08       	sbc	r5, r1
     d60:	8d e2       	ldi	r24, 0x2D	; 45
     d62:	01 c0       	rjmp	.+2      	; 0xd66 <vfprintf+0x3aa>
     d64:	8b e2       	ldi	r24, 0x2B	; 43
     d66:	b6 01       	movw	r22, r12
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <fputc>
     d6e:	80 e3       	ldi	r24, 0x30	; 48
     d70:	9a e0       	ldi	r25, 0x0A	; 10
     d72:	49 16       	cp	r4, r25
     d74:	51 04       	cpc	r5, r1
     d76:	2c f0       	brlt	.+10     	; 0xd82 <vfprintf+0x3c6>
     d78:	8f 5f       	subi	r24, 0xFF	; 255
     d7a:	5a e0       	ldi	r21, 0x0A	; 10
     d7c:	45 1a       	sub	r4, r21
     d7e:	51 08       	sbc	r5, r1
     d80:	f7 cf       	rjmp	.-18     	; 0xd70 <vfprintf+0x3b4>
     d82:	b6 01       	movw	r22, r12
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <fputc>
     d8a:	b6 01       	movw	r22, r12
     d8c:	c2 01       	movw	r24, r4
     d8e:	c0 96       	adiw	r24, 0x30	; 48
     d90:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <fputc>
     d94:	57 c1       	rjmp	.+686    	; 0x1044 <vfprintf+0x688>
     d96:	83 36       	cpi	r24, 0x63	; 99
     d98:	31 f0       	breq	.+12     	; 0xda6 <vfprintf+0x3ea>
     d9a:	83 37       	cpi	r24, 0x73	; 115
     d9c:	79 f0       	breq	.+30     	; 0xdbc <vfprintf+0x400>
     d9e:	83 35       	cpi	r24, 0x53	; 83
     da0:	09 f0       	breq	.+2      	; 0xda4 <vfprintf+0x3e8>
     da2:	58 c0       	rjmp	.+176    	; 0xe54 <vfprintf+0x498>
     da4:	21 c0       	rjmp	.+66     	; 0xde8 <vfprintf+0x42c>
     da6:	52 01       	movw	r10, r4
     da8:	e2 e0       	ldi	r30, 0x02	; 2
     daa:	ae 0e       	add	r10, r30
     dac:	b1 1c       	adc	r11, r1
     dae:	f2 01       	movw	r30, r4
     db0:	80 81       	ld	r24, Z
     db2:	89 83       	std	Y+1, r24	; 0x01
     db4:	01 e0       	ldi	r16, 0x01	; 1
     db6:	10 e0       	ldi	r17, 0x00	; 0
     db8:	23 01       	movw	r4, r6
     dba:	14 c0       	rjmp	.+40     	; 0xde4 <vfprintf+0x428>
     dbc:	52 01       	movw	r10, r4
     dbe:	f2 e0       	ldi	r31, 0x02	; 2
     dc0:	af 0e       	add	r10, r31
     dc2:	b1 1c       	adc	r11, r1
     dc4:	f2 01       	movw	r30, r4
     dc6:	40 80       	ld	r4, Z
     dc8:	51 80       	ldd	r5, Z+1	; 0x01
     dca:	26 ff       	sbrs	r18, 6
     dcc:	03 c0       	rjmp	.+6      	; 0xdd4 <vfprintf+0x418>
     dce:	61 2f       	mov	r22, r17
     dd0:	70 e0       	ldi	r23, 0x00	; 0
     dd2:	02 c0       	rjmp	.+4      	; 0xdd8 <vfprintf+0x41c>
     dd4:	6f ef       	ldi	r22, 0xFF	; 255
     dd6:	7f ef       	ldi	r23, 0xFF	; 255
     dd8:	c2 01       	movw	r24, r4
     dda:	2a 8b       	std	Y+18, r18	; 0x12
     ddc:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <strnlen>
     de0:	8c 01       	movw	r16, r24
     de2:	2a 89       	ldd	r18, Y+18	; 0x12
     de4:	2f 77       	andi	r18, 0x7F	; 127
     de6:	15 c0       	rjmp	.+42     	; 0xe12 <vfprintf+0x456>
     de8:	52 01       	movw	r10, r4
     dea:	f2 e0       	ldi	r31, 0x02	; 2
     dec:	af 0e       	add	r10, r31
     dee:	b1 1c       	adc	r11, r1
     df0:	f2 01       	movw	r30, r4
     df2:	40 80       	ld	r4, Z
     df4:	51 80       	ldd	r5, Z+1	; 0x01
     df6:	26 ff       	sbrs	r18, 6
     df8:	03 c0       	rjmp	.+6      	; 0xe00 <vfprintf+0x444>
     dfa:	61 2f       	mov	r22, r17
     dfc:	70 e0       	ldi	r23, 0x00	; 0
     dfe:	02 c0       	rjmp	.+4      	; 0xe04 <vfprintf+0x448>
     e00:	6f ef       	ldi	r22, 0xFF	; 255
     e02:	7f ef       	ldi	r23, 0xFF	; 255
     e04:	c2 01       	movw	r24, r4
     e06:	2a 8b       	std	Y+18, r18	; 0x12
     e08:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <strnlen_P>
     e0c:	8c 01       	movw	r16, r24
     e0e:	2a 89       	ldd	r18, Y+18	; 0x12
     e10:	20 68       	ori	r18, 0x80	; 128
     e12:	32 2e       	mov	r3, r18
     e14:	23 fd       	sbrc	r18, 3
     e16:	1a c0       	rjmp	.+52     	; 0xe4c <vfprintf+0x490>
     e18:	8f 2d       	mov	r24, r15
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	08 17       	cp	r16, r24
     e1e:	19 07       	cpc	r17, r25
     e20:	a8 f4       	brcc	.+42     	; 0xe4c <vfprintf+0x490>
     e22:	b6 01       	movw	r22, r12
     e24:	80 e2       	ldi	r24, 0x20	; 32
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <fputc>
     e2c:	fa 94       	dec	r15
     e2e:	f4 cf       	rjmp	.-24     	; 0xe18 <vfprintf+0x45c>
     e30:	f2 01       	movw	r30, r4
     e32:	37 fc       	sbrc	r3, 7
     e34:	85 91       	lpm	r24, Z+
     e36:	37 fe       	sbrs	r3, 7
     e38:	81 91       	ld	r24, Z+
     e3a:	2f 01       	movw	r4, r30
     e3c:	b6 01       	movw	r22, r12
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <fputc>
     e44:	f1 10       	cpse	r15, r1
     e46:	fa 94       	dec	r15
     e48:	01 50       	subi	r16, 0x01	; 1
     e4a:	11 09       	sbc	r17, r1
     e4c:	01 15       	cp	r16, r1
     e4e:	11 05       	cpc	r17, r1
     e50:	79 f7       	brne	.-34     	; 0xe30 <vfprintf+0x474>
     e52:	f8 c0       	rjmp	.+496    	; 0x1044 <vfprintf+0x688>
     e54:	84 36       	cpi	r24, 0x64	; 100
     e56:	11 f0       	breq	.+4      	; 0xe5c <vfprintf+0x4a0>
     e58:	89 36       	cpi	r24, 0x69	; 105
     e5a:	59 f5       	brne	.+86     	; 0xeb2 <vfprintf+0x4f6>
     e5c:	52 01       	movw	r10, r4
     e5e:	27 ff       	sbrs	r18, 7
     e60:	09 c0       	rjmp	.+18     	; 0xe74 <vfprintf+0x4b8>
     e62:	f4 e0       	ldi	r31, 0x04	; 4
     e64:	af 0e       	add	r10, r31
     e66:	b1 1c       	adc	r11, r1
     e68:	f2 01       	movw	r30, r4
     e6a:	60 81       	ld	r22, Z
     e6c:	71 81       	ldd	r23, Z+1	; 0x01
     e6e:	82 81       	ldd	r24, Z+2	; 0x02
     e70:	93 81       	ldd	r25, Z+3	; 0x03
     e72:	0a c0       	rjmp	.+20     	; 0xe88 <vfprintf+0x4cc>
     e74:	f2 e0       	ldi	r31, 0x02	; 2
     e76:	af 0e       	add	r10, r31
     e78:	b1 1c       	adc	r11, r1
     e7a:	f2 01       	movw	r30, r4
     e7c:	60 81       	ld	r22, Z
     e7e:	71 81       	ldd	r23, Z+1	; 0x01
     e80:	88 27       	eor	r24, r24
     e82:	77 fd       	sbrc	r23, 7
     e84:	80 95       	com	r24
     e86:	98 2f       	mov	r25, r24
     e88:	2f 76       	andi	r18, 0x6F	; 111
     e8a:	32 2e       	mov	r3, r18
     e8c:	97 ff       	sbrs	r25, 7
     e8e:	09 c0       	rjmp	.+18     	; 0xea2 <vfprintf+0x4e6>
     e90:	90 95       	com	r25
     e92:	80 95       	com	r24
     e94:	70 95       	com	r23
     e96:	61 95       	neg	r22
     e98:	7f 4f       	sbci	r23, 0xFF	; 255
     e9a:	8f 4f       	sbci	r24, 0xFF	; 255
     e9c:	9f 4f       	sbci	r25, 0xFF	; 255
     e9e:	20 68       	ori	r18, 0x80	; 128
     ea0:	32 2e       	mov	r3, r18
     ea2:	2a e0       	ldi	r18, 0x0A	; 10
     ea4:	30 e0       	ldi	r19, 0x00	; 0
     ea6:	a3 01       	movw	r20, r6
     ea8:	0e 94 4d 0c 	call	0x189a	; 0x189a <__ultoa_invert>
     eac:	e8 2e       	mov	r14, r24
     eae:	e6 18       	sub	r14, r6
     eb0:	3f c0       	rjmp	.+126    	; 0xf30 <vfprintf+0x574>
     eb2:	02 2f       	mov	r16, r18
     eb4:	85 37       	cpi	r24, 0x75	; 117
     eb6:	21 f4       	brne	.+8      	; 0xec0 <vfprintf+0x504>
     eb8:	0f 7e       	andi	r16, 0xEF	; 239
     eba:	2a e0       	ldi	r18, 0x0A	; 10
     ebc:	30 e0       	ldi	r19, 0x00	; 0
     ebe:	1d c0       	rjmp	.+58     	; 0xefa <vfprintf+0x53e>
     ec0:	09 7f       	andi	r16, 0xF9	; 249
     ec2:	8f 36       	cpi	r24, 0x6F	; 111
     ec4:	91 f0       	breq	.+36     	; 0xeea <vfprintf+0x52e>
     ec6:	18 f4       	brcc	.+6      	; 0xece <vfprintf+0x512>
     ec8:	88 35       	cpi	r24, 0x58	; 88
     eca:	59 f0       	breq	.+22     	; 0xee2 <vfprintf+0x526>
     ecc:	c5 c0       	rjmp	.+394    	; 0x1058 <vfprintf+0x69c>
     ece:	80 37       	cpi	r24, 0x70	; 112
     ed0:	19 f0       	breq	.+6      	; 0xed8 <vfprintf+0x51c>
     ed2:	88 37       	cpi	r24, 0x78	; 120
     ed4:	11 f0       	breq	.+4      	; 0xeda <vfprintf+0x51e>
     ed6:	c0 c0       	rjmp	.+384    	; 0x1058 <vfprintf+0x69c>
     ed8:	00 61       	ori	r16, 0x10	; 16
     eda:	04 ff       	sbrs	r16, 4
     edc:	09 c0       	rjmp	.+18     	; 0xef0 <vfprintf+0x534>
     ede:	04 60       	ori	r16, 0x04	; 4
     ee0:	07 c0       	rjmp	.+14     	; 0xef0 <vfprintf+0x534>
     ee2:	24 ff       	sbrs	r18, 4
     ee4:	08 c0       	rjmp	.+16     	; 0xef6 <vfprintf+0x53a>
     ee6:	06 60       	ori	r16, 0x06	; 6
     ee8:	06 c0       	rjmp	.+12     	; 0xef6 <vfprintf+0x53a>
     eea:	28 e0       	ldi	r18, 0x08	; 8
     eec:	30 e0       	ldi	r19, 0x00	; 0
     eee:	05 c0       	rjmp	.+10     	; 0xefa <vfprintf+0x53e>
     ef0:	20 e1       	ldi	r18, 0x10	; 16
     ef2:	30 e0       	ldi	r19, 0x00	; 0
     ef4:	02 c0       	rjmp	.+4      	; 0xefa <vfprintf+0x53e>
     ef6:	20 e1       	ldi	r18, 0x10	; 16
     ef8:	32 e0       	ldi	r19, 0x02	; 2
     efa:	52 01       	movw	r10, r4
     efc:	07 ff       	sbrs	r16, 7
     efe:	09 c0       	rjmp	.+18     	; 0xf12 <vfprintf+0x556>
     f00:	f4 e0       	ldi	r31, 0x04	; 4
     f02:	af 0e       	add	r10, r31
     f04:	b1 1c       	adc	r11, r1
     f06:	f2 01       	movw	r30, r4
     f08:	60 81       	ld	r22, Z
     f0a:	71 81       	ldd	r23, Z+1	; 0x01
     f0c:	82 81       	ldd	r24, Z+2	; 0x02
     f0e:	93 81       	ldd	r25, Z+3	; 0x03
     f10:	08 c0       	rjmp	.+16     	; 0xf22 <vfprintf+0x566>
     f12:	f2 e0       	ldi	r31, 0x02	; 2
     f14:	af 0e       	add	r10, r31
     f16:	b1 1c       	adc	r11, r1
     f18:	f2 01       	movw	r30, r4
     f1a:	60 81       	ld	r22, Z
     f1c:	71 81       	ldd	r23, Z+1	; 0x01
     f1e:	80 e0       	ldi	r24, 0x00	; 0
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	a3 01       	movw	r20, r6
     f24:	0e 94 4d 0c 	call	0x189a	; 0x189a <__ultoa_invert>
     f28:	e8 2e       	mov	r14, r24
     f2a:	e6 18       	sub	r14, r6
     f2c:	0f 77       	andi	r16, 0x7F	; 127
     f2e:	30 2e       	mov	r3, r16
     f30:	36 fe       	sbrs	r3, 6
     f32:	0b c0       	rjmp	.+22     	; 0xf4a <vfprintf+0x58e>
     f34:	33 2d       	mov	r19, r3
     f36:	3e 7f       	andi	r19, 0xFE	; 254
     f38:	e1 16       	cp	r14, r17
     f3a:	50 f4       	brcc	.+20     	; 0xf50 <vfprintf+0x594>
     f3c:	34 fe       	sbrs	r3, 4
     f3e:	0a c0       	rjmp	.+20     	; 0xf54 <vfprintf+0x598>
     f40:	32 fc       	sbrc	r3, 2
     f42:	08 c0       	rjmp	.+16     	; 0xf54 <vfprintf+0x598>
     f44:	33 2d       	mov	r19, r3
     f46:	3e 7e       	andi	r19, 0xEE	; 238
     f48:	05 c0       	rjmp	.+10     	; 0xf54 <vfprintf+0x598>
     f4a:	0e 2d       	mov	r16, r14
     f4c:	33 2d       	mov	r19, r3
     f4e:	03 c0       	rjmp	.+6      	; 0xf56 <vfprintf+0x59a>
     f50:	0e 2d       	mov	r16, r14
     f52:	01 c0       	rjmp	.+2      	; 0xf56 <vfprintf+0x59a>
     f54:	01 2f       	mov	r16, r17
     f56:	34 ff       	sbrs	r19, 4
     f58:	0c c0       	rjmp	.+24     	; 0xf72 <vfprintf+0x5b6>
     f5a:	fe 01       	movw	r30, r28
     f5c:	ee 0d       	add	r30, r14
     f5e:	f1 1d       	adc	r31, r1
     f60:	80 81       	ld	r24, Z
     f62:	80 33       	cpi	r24, 0x30	; 48
     f64:	11 f4       	brne	.+4      	; 0xf6a <vfprintf+0x5ae>
     f66:	39 7e       	andi	r19, 0xE9	; 233
     f68:	08 c0       	rjmp	.+16     	; 0xf7a <vfprintf+0x5be>
     f6a:	32 ff       	sbrs	r19, 2
     f6c:	05 c0       	rjmp	.+10     	; 0xf78 <vfprintf+0x5bc>
     f6e:	0e 5f       	subi	r16, 0xFE	; 254
     f70:	04 c0       	rjmp	.+8      	; 0xf7a <vfprintf+0x5be>
     f72:	83 2f       	mov	r24, r19
     f74:	86 78       	andi	r24, 0x86	; 134
     f76:	09 f0       	breq	.+2      	; 0xf7a <vfprintf+0x5be>
     f78:	0f 5f       	subi	r16, 0xFF	; 255
     f7a:	33 fd       	sbrc	r19, 3
     f7c:	13 c0       	rjmp	.+38     	; 0xfa4 <vfprintf+0x5e8>
     f7e:	30 ff       	sbrs	r19, 0
     f80:	06 c0       	rjmp	.+12     	; 0xf8e <vfprintf+0x5d2>
     f82:	1e 2d       	mov	r17, r14
     f84:	0f 15       	cp	r16, r15
     f86:	18 f4       	brcc	.+6      	; 0xf8e <vfprintf+0x5d2>
     f88:	1f 0d       	add	r17, r15
     f8a:	10 1b       	sub	r17, r16
     f8c:	0f 2d       	mov	r16, r15
     f8e:	0f 15       	cp	r16, r15
     f90:	68 f4       	brcc	.+26     	; 0xfac <vfprintf+0x5f0>
     f92:	b6 01       	movw	r22, r12
     f94:	80 e2       	ldi	r24, 0x20	; 32
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	3b 8b       	std	Y+19, r19	; 0x13
     f9a:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <fputc>
     f9e:	0f 5f       	subi	r16, 0xFF	; 255
     fa0:	3b 89       	ldd	r19, Y+19	; 0x13
     fa2:	f5 cf       	rjmp	.-22     	; 0xf8e <vfprintf+0x5d2>
     fa4:	0f 15       	cp	r16, r15
     fa6:	10 f4       	brcc	.+4      	; 0xfac <vfprintf+0x5f0>
     fa8:	f0 1a       	sub	r15, r16
     faa:	01 c0       	rjmp	.+2      	; 0xfae <vfprintf+0x5f2>
     fac:	f1 2c       	mov	r15, r1
     fae:	34 ff       	sbrs	r19, 4
     fb0:	12 c0       	rjmp	.+36     	; 0xfd6 <vfprintf+0x61a>
     fb2:	b6 01       	movw	r22, r12
     fb4:	80 e3       	ldi	r24, 0x30	; 48
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	3b 8b       	std	Y+19, r19	; 0x13
     fba:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <fputc>
     fbe:	3b 89       	ldd	r19, Y+19	; 0x13
     fc0:	32 ff       	sbrs	r19, 2
     fc2:	17 c0       	rjmp	.+46     	; 0xff2 <vfprintf+0x636>
     fc4:	31 fd       	sbrc	r19, 1
     fc6:	03 c0       	rjmp	.+6      	; 0xfce <vfprintf+0x612>
     fc8:	88 e7       	ldi	r24, 0x78	; 120
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	02 c0       	rjmp	.+4      	; 0xfd2 <vfprintf+0x616>
     fce:	88 e5       	ldi	r24, 0x58	; 88
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	b6 01       	movw	r22, r12
     fd4:	0c c0       	rjmp	.+24     	; 0xfee <vfprintf+0x632>
     fd6:	83 2f       	mov	r24, r19
     fd8:	86 78       	andi	r24, 0x86	; 134
     fda:	59 f0       	breq	.+22     	; 0xff2 <vfprintf+0x636>
     fdc:	31 ff       	sbrs	r19, 1
     fde:	02 c0       	rjmp	.+4      	; 0xfe4 <vfprintf+0x628>
     fe0:	8b e2       	ldi	r24, 0x2B	; 43
     fe2:	01 c0       	rjmp	.+2      	; 0xfe6 <vfprintf+0x62a>
     fe4:	80 e2       	ldi	r24, 0x20	; 32
     fe6:	37 fd       	sbrc	r19, 7
     fe8:	8d e2       	ldi	r24, 0x2D	; 45
     fea:	b6 01       	movw	r22, r12
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <fputc>
     ff2:	e1 16       	cp	r14, r17
     ff4:	38 f4       	brcc	.+14     	; 0x1004 <vfprintf+0x648>
     ff6:	b6 01       	movw	r22, r12
     ff8:	80 e3       	ldi	r24, 0x30	; 48
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <fputc>
    1000:	11 50       	subi	r17, 0x01	; 1
    1002:	f7 cf       	rjmp	.-18     	; 0xff2 <vfprintf+0x636>
    1004:	ea 94       	dec	r14
    1006:	f3 01       	movw	r30, r6
    1008:	ee 0d       	add	r30, r14
    100a:	f1 1d       	adc	r31, r1
    100c:	80 81       	ld	r24, Z
    100e:	b6 01       	movw	r22, r12
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <fputc>
    1016:	e1 10       	cpse	r14, r1
    1018:	f5 cf       	rjmp	.-22     	; 0x1004 <vfprintf+0x648>
    101a:	14 c0       	rjmp	.+40     	; 0x1044 <vfprintf+0x688>
    101c:	f4 e0       	ldi	r31, 0x04	; 4
    101e:	ff 15       	cp	r31, r15
    1020:	58 f5       	brcc	.+86     	; 0x1078 <vfprintf+0x6bc>
    1022:	84 e0       	ldi	r24, 0x04	; 4
    1024:	f8 1a       	sub	r15, r24
    1026:	33 fe       	sbrs	r3, 3
    1028:	1e c0       	rjmp	.+60     	; 0x1066 <vfprintf+0x6aa>
    102a:	21 10       	cpse	r2, r1
    102c:	26 c0       	rjmp	.+76     	; 0x107a <vfprintf+0x6be>
    102e:	03 ff       	sbrs	r16, 3
    1030:	2a c0       	rjmp	.+84     	; 0x1086 <vfprintf+0x6ca>
    1032:	06 e9       	ldi	r16, 0x96	; 150
    1034:	10 e0       	ldi	r17, 0x00	; 0
    1036:	f3 2d       	mov	r31, r3
    1038:	f0 71       	andi	r31, 0x10	; 16
    103a:	3f 2e       	mov	r3, r31
    103c:	f8 01       	movw	r30, r16
    103e:	84 91       	lpm	r24, Z
    1040:	81 11       	cpse	r24, r1
    1042:	24 c0       	rjmp	.+72     	; 0x108c <vfprintf+0x6d0>
    1044:	ff 20       	and	r15, r15
    1046:	09 f4       	brne	.+2      	; 0x104a <vfprintf+0x68e>
    1048:	e5 cc       	rjmp	.-1590   	; 0xa14 <vfprintf+0x58>
    104a:	b6 01       	movw	r22, r12
    104c:	80 e2       	ldi	r24, 0x20	; 32
    104e:	90 e0       	ldi	r25, 0x00	; 0
    1050:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <fputc>
    1054:	fa 94       	dec	r15
    1056:	f6 cf       	rjmp	.-20     	; 0x1044 <vfprintf+0x688>
    1058:	f6 01       	movw	r30, r12
    105a:	86 81       	ldd	r24, Z+6	; 0x06
    105c:	97 81       	ldd	r25, Z+7	; 0x07
    105e:	26 c0       	rjmp	.+76     	; 0x10ac <vfprintf+0x6f0>
    1060:	8f ef       	ldi	r24, 0xFF	; 255
    1062:	9f ef       	ldi	r25, 0xFF	; 255
    1064:	23 c0       	rjmp	.+70     	; 0x10ac <vfprintf+0x6f0>
    1066:	b6 01       	movw	r22, r12
    1068:	80 e2       	ldi	r24, 0x20	; 32
    106a:	90 e0       	ldi	r25, 0x00	; 0
    106c:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <fputc>
    1070:	fa 94       	dec	r15
    1072:	f1 10       	cpse	r15, r1
    1074:	f8 cf       	rjmp	.-16     	; 0x1066 <vfprintf+0x6aa>
    1076:	d9 cf       	rjmp	.-78     	; 0x102a <vfprintf+0x66e>
    1078:	f1 2c       	mov	r15, r1
    107a:	b6 01       	movw	r22, r12
    107c:	82 2d       	mov	r24, r2
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <fputc>
    1084:	d4 cf       	rjmp	.-88     	; 0x102e <vfprintf+0x672>
    1086:	0a e9       	ldi	r16, 0x9A	; 154
    1088:	10 e0       	ldi	r17, 0x00	; 0
    108a:	d5 cf       	rjmp	.-86     	; 0x1036 <vfprintf+0x67a>
    108c:	31 10       	cpse	r3, r1
    108e:	80 52       	subi	r24, 0x20	; 32
    1090:	b6 01       	movw	r22, r12
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <fputc>
    1098:	0f 5f       	subi	r16, 0xFF	; 255
    109a:	1f 4f       	sbci	r17, 0xFF	; 255
    109c:	cf cf       	rjmp	.-98     	; 0x103c <vfprintf+0x680>
    109e:	23 e0       	ldi	r18, 0x03	; 3
    10a0:	2f 15       	cp	r18, r15
    10a2:	10 f4       	brcc	.+4      	; 0x10a8 <vfprintf+0x6ec>
    10a4:	83 e0       	ldi	r24, 0x03	; 3
    10a6:	be cf       	rjmp	.-132    	; 0x1024 <vfprintf+0x668>
    10a8:	f1 2c       	mov	r15, r1
    10aa:	c1 cf       	rjmp	.-126    	; 0x102e <vfprintf+0x672>
    10ac:	63 96       	adiw	r28, 0x13	; 19
    10ae:	e2 e1       	ldi	r30, 0x12	; 18
    10b0:	0c 94 f6 0a 	jmp	0x15ec	; 0x15ec <__epilogue_restores__>

000010b4 <__subsf3>:
    10b4:	50 58       	subi	r21, 0x80	; 128

000010b6 <__addsf3>:
    10b6:	bb 27       	eor	r27, r27
    10b8:	aa 27       	eor	r26, r26
    10ba:	0e d0       	rcall	.+28     	; 0x10d8 <__addsf3x>
    10bc:	d4 c1       	rjmp	.+936    	; 0x1466 <__fp_round>
    10be:	c5 d1       	rcall	.+906    	; 0x144a <__fp_pscA>
    10c0:	30 f0       	brcs	.+12     	; 0x10ce <__addsf3+0x18>
    10c2:	ca d1       	rcall	.+916    	; 0x1458 <__fp_pscB>
    10c4:	20 f0       	brcs	.+8      	; 0x10ce <__addsf3+0x18>
    10c6:	31 f4       	brne	.+12     	; 0x10d4 <__addsf3+0x1e>
    10c8:	9f 3f       	cpi	r25, 0xFF	; 255
    10ca:	11 f4       	brne	.+4      	; 0x10d0 <__addsf3+0x1a>
    10cc:	1e f4       	brtc	.+6      	; 0x10d4 <__addsf3+0x1e>
    10ce:	95 c1       	rjmp	.+810    	; 0x13fa <__fp_nan>
    10d0:	0e f4       	brtc	.+2      	; 0x10d4 <__addsf3+0x1e>
    10d2:	e0 95       	com	r30
    10d4:	e7 fb       	bst	r30, 7
    10d6:	8b c1       	rjmp	.+790    	; 0x13ee <__fp_inf>

000010d8 <__addsf3x>:
    10d8:	e9 2f       	mov	r30, r25
    10da:	d6 d1       	rcall	.+940    	; 0x1488 <__fp_split3>
    10dc:	80 f3       	brcs	.-32     	; 0x10be <__addsf3+0x8>
    10de:	ba 17       	cp	r27, r26
    10e0:	62 07       	cpc	r22, r18
    10e2:	73 07       	cpc	r23, r19
    10e4:	84 07       	cpc	r24, r20
    10e6:	95 07       	cpc	r25, r21
    10e8:	18 f0       	brcs	.+6      	; 0x10f0 <__addsf3x+0x18>
    10ea:	71 f4       	brne	.+28     	; 0x1108 <__addsf3x+0x30>
    10ec:	9e f5       	brtc	.+102    	; 0x1154 <__addsf3x+0x7c>
    10ee:	ee c1       	rjmp	.+988    	; 0x14cc <__fp_zero>
    10f0:	0e f4       	brtc	.+2      	; 0x10f4 <__addsf3x+0x1c>
    10f2:	e0 95       	com	r30
    10f4:	0b 2e       	mov	r0, r27
    10f6:	ba 2f       	mov	r27, r26
    10f8:	a0 2d       	mov	r26, r0
    10fa:	0b 01       	movw	r0, r22
    10fc:	b9 01       	movw	r22, r18
    10fe:	90 01       	movw	r18, r0
    1100:	0c 01       	movw	r0, r24
    1102:	ca 01       	movw	r24, r20
    1104:	a0 01       	movw	r20, r0
    1106:	11 24       	eor	r1, r1
    1108:	ff 27       	eor	r31, r31
    110a:	59 1b       	sub	r21, r25
    110c:	99 f0       	breq	.+38     	; 0x1134 <__addsf3x+0x5c>
    110e:	59 3f       	cpi	r21, 0xF9	; 249
    1110:	50 f4       	brcc	.+20     	; 0x1126 <__addsf3x+0x4e>
    1112:	50 3e       	cpi	r21, 0xE0	; 224
    1114:	68 f1       	brcs	.+90     	; 0x1170 <__addsf3x+0x98>
    1116:	1a 16       	cp	r1, r26
    1118:	f0 40       	sbci	r31, 0x00	; 0
    111a:	a2 2f       	mov	r26, r18
    111c:	23 2f       	mov	r18, r19
    111e:	34 2f       	mov	r19, r20
    1120:	44 27       	eor	r20, r20
    1122:	58 5f       	subi	r21, 0xF8	; 248
    1124:	f3 cf       	rjmp	.-26     	; 0x110c <__addsf3x+0x34>
    1126:	46 95       	lsr	r20
    1128:	37 95       	ror	r19
    112a:	27 95       	ror	r18
    112c:	a7 95       	ror	r26
    112e:	f0 40       	sbci	r31, 0x00	; 0
    1130:	53 95       	inc	r21
    1132:	c9 f7       	brne	.-14     	; 0x1126 <__addsf3x+0x4e>
    1134:	7e f4       	brtc	.+30     	; 0x1154 <__addsf3x+0x7c>
    1136:	1f 16       	cp	r1, r31
    1138:	ba 0b       	sbc	r27, r26
    113a:	62 0b       	sbc	r22, r18
    113c:	73 0b       	sbc	r23, r19
    113e:	84 0b       	sbc	r24, r20
    1140:	ba f0       	brmi	.+46     	; 0x1170 <__addsf3x+0x98>
    1142:	91 50       	subi	r25, 0x01	; 1
    1144:	a1 f0       	breq	.+40     	; 0x116e <__addsf3x+0x96>
    1146:	ff 0f       	add	r31, r31
    1148:	bb 1f       	adc	r27, r27
    114a:	66 1f       	adc	r22, r22
    114c:	77 1f       	adc	r23, r23
    114e:	88 1f       	adc	r24, r24
    1150:	c2 f7       	brpl	.-16     	; 0x1142 <__addsf3x+0x6a>
    1152:	0e c0       	rjmp	.+28     	; 0x1170 <__addsf3x+0x98>
    1154:	ba 0f       	add	r27, r26
    1156:	62 1f       	adc	r22, r18
    1158:	73 1f       	adc	r23, r19
    115a:	84 1f       	adc	r24, r20
    115c:	48 f4       	brcc	.+18     	; 0x1170 <__addsf3x+0x98>
    115e:	87 95       	ror	r24
    1160:	77 95       	ror	r23
    1162:	67 95       	ror	r22
    1164:	b7 95       	ror	r27
    1166:	f7 95       	ror	r31
    1168:	9e 3f       	cpi	r25, 0xFE	; 254
    116a:	08 f0       	brcs	.+2      	; 0x116e <__addsf3x+0x96>
    116c:	b3 cf       	rjmp	.-154    	; 0x10d4 <__addsf3+0x1e>
    116e:	93 95       	inc	r25
    1170:	88 0f       	add	r24, r24
    1172:	08 f0       	brcs	.+2      	; 0x1176 <__addsf3x+0x9e>
    1174:	99 27       	eor	r25, r25
    1176:	ee 0f       	add	r30, r30
    1178:	97 95       	ror	r25
    117a:	87 95       	ror	r24
    117c:	08 95       	ret
    117e:	65 d1       	rcall	.+714    	; 0x144a <__fp_pscA>
    1180:	58 f0       	brcs	.+22     	; 0x1198 <__addsf3x+0xc0>
    1182:	80 e8       	ldi	r24, 0x80	; 128
    1184:	91 e0       	ldi	r25, 0x01	; 1
    1186:	09 f4       	brne	.+2      	; 0x118a <__addsf3x+0xb2>
    1188:	9e ef       	ldi	r25, 0xFE	; 254
    118a:	66 d1       	rcall	.+716    	; 0x1458 <__fp_pscB>
    118c:	28 f0       	brcs	.+10     	; 0x1198 <__addsf3x+0xc0>
    118e:	40 e8       	ldi	r20, 0x80	; 128
    1190:	51 e0       	ldi	r21, 0x01	; 1
    1192:	59 f4       	brne	.+22     	; 0x11aa <atan2+0xe>
    1194:	5e ef       	ldi	r21, 0xFE	; 254
    1196:	09 c0       	rjmp	.+18     	; 0x11aa <atan2+0xe>
    1198:	30 c1       	rjmp	.+608    	; 0x13fa <__fp_nan>
    119a:	98 c1       	rjmp	.+816    	; 0x14cc <__fp_zero>

0000119c <atan2>:
    119c:	e9 2f       	mov	r30, r25
    119e:	e0 78       	andi	r30, 0x80	; 128
    11a0:	73 d1       	rcall	.+742    	; 0x1488 <__fp_split3>
    11a2:	68 f3       	brcs	.-38     	; 0x117e <__addsf3x+0xa6>
    11a4:	09 2e       	mov	r0, r25
    11a6:	05 2a       	or	r0, r21
    11a8:	c1 f3       	breq	.-16     	; 0x119a <__addsf3x+0xc2>
    11aa:	26 17       	cp	r18, r22
    11ac:	37 07       	cpc	r19, r23
    11ae:	48 07       	cpc	r20, r24
    11b0:	59 07       	cpc	r21, r25
    11b2:	38 f0       	brcs	.+14     	; 0x11c2 <atan2+0x26>
    11b4:	0e 2e       	mov	r0, r30
    11b6:	07 f8       	bld	r0, 7
    11b8:	e0 25       	eor	r30, r0
    11ba:	69 f0       	breq	.+26     	; 0x11d6 <atan2+0x3a>
    11bc:	e0 25       	eor	r30, r0
    11be:	e0 64       	ori	r30, 0x40	; 64
    11c0:	0a c0       	rjmp	.+20     	; 0x11d6 <atan2+0x3a>
    11c2:	ef 63       	ori	r30, 0x3F	; 63
    11c4:	07 f8       	bld	r0, 7
    11c6:	00 94       	com	r0
    11c8:	07 fa       	bst	r0, 7
    11ca:	db 01       	movw	r26, r22
    11cc:	b9 01       	movw	r22, r18
    11ce:	9d 01       	movw	r18, r26
    11d0:	dc 01       	movw	r26, r24
    11d2:	ca 01       	movw	r24, r20
    11d4:	ad 01       	movw	r20, r26
    11d6:	ef 93       	push	r30
    11d8:	43 d0       	rcall	.+134    	; 0x1260 <__divsf3_pse>
    11da:	45 d1       	rcall	.+650    	; 0x1466 <__fp_round>
    11dc:	0a d0       	rcall	.+20     	; 0x11f2 <atan>
    11de:	5f 91       	pop	r21
    11e0:	55 23       	and	r21, r21
    11e2:	31 f0       	breq	.+12     	; 0x11f0 <atan2+0x54>
    11e4:	2b ed       	ldi	r18, 0xDB	; 219
    11e6:	3f e0       	ldi	r19, 0x0F	; 15
    11e8:	49 e4       	ldi	r20, 0x49	; 73
    11ea:	50 fd       	sbrc	r21, 0
    11ec:	49 ec       	ldi	r20, 0xC9	; 201
    11ee:	63 cf       	rjmp	.-314    	; 0x10b6 <__addsf3>
    11f0:	08 95       	ret

000011f2 <atan>:
    11f2:	df 93       	push	r29
    11f4:	dd 27       	eor	r29, r29
    11f6:	b9 2f       	mov	r27, r25
    11f8:	bf 77       	andi	r27, 0x7F	; 127
    11fa:	40 e8       	ldi	r20, 0x80	; 128
    11fc:	5f e3       	ldi	r21, 0x3F	; 63
    11fe:	16 16       	cp	r1, r22
    1200:	17 06       	cpc	r1, r23
    1202:	48 07       	cpc	r20, r24
    1204:	5b 07       	cpc	r21, r27
    1206:	10 f4       	brcc	.+4      	; 0x120c <atan+0x1a>
    1208:	d9 2f       	mov	r29, r25
    120a:	67 d1       	rcall	.+718    	; 0x14da <inverse>
    120c:	9f 93       	push	r25
    120e:	8f 93       	push	r24
    1210:	7f 93       	push	r23
    1212:	6f 93       	push	r22
    1214:	cc d1       	rcall	.+920    	; 0x15ae <square>
    1216:	e8 e6       	ldi	r30, 0x68	; 104
    1218:	f0 e0       	ldi	r31, 0x00	; 0
    121a:	f2 d0       	rcall	.+484    	; 0x1400 <__fp_powser>
    121c:	24 d1       	rcall	.+584    	; 0x1466 <__fp_round>
    121e:	2f 91       	pop	r18
    1220:	3f 91       	pop	r19
    1222:	4f 91       	pop	r20
    1224:	5f 91       	pop	r21
    1226:	6c d1       	rcall	.+728    	; 0x1500 <__mulsf3x>
    1228:	dd 23       	and	r29, r29
    122a:	49 f0       	breq	.+18     	; 0x123e <atan+0x4c>
    122c:	90 58       	subi	r25, 0x80	; 128
    122e:	a2 ea       	ldi	r26, 0xA2	; 162
    1230:	2a ed       	ldi	r18, 0xDA	; 218
    1232:	3f e0       	ldi	r19, 0x0F	; 15
    1234:	49 ec       	ldi	r20, 0xC9	; 201
    1236:	5f e3       	ldi	r21, 0x3F	; 63
    1238:	d0 78       	andi	r29, 0x80	; 128
    123a:	5d 27       	eor	r21, r29
    123c:	4d df       	rcall	.-358    	; 0x10d8 <__addsf3x>
    123e:	df 91       	pop	r29
    1240:	12 c1       	rjmp	.+548    	; 0x1466 <__fp_round>

00001242 <__divsf3>:
    1242:	0c d0       	rcall	.+24     	; 0x125c <__divsf3x>
    1244:	10 c1       	rjmp	.+544    	; 0x1466 <__fp_round>
    1246:	08 d1       	rcall	.+528    	; 0x1458 <__fp_pscB>
    1248:	40 f0       	brcs	.+16     	; 0x125a <__divsf3+0x18>
    124a:	ff d0       	rcall	.+510    	; 0x144a <__fp_pscA>
    124c:	30 f0       	brcs	.+12     	; 0x125a <__divsf3+0x18>
    124e:	21 f4       	brne	.+8      	; 0x1258 <__divsf3+0x16>
    1250:	5f 3f       	cpi	r21, 0xFF	; 255
    1252:	19 f0       	breq	.+6      	; 0x125a <__divsf3+0x18>
    1254:	cc c0       	rjmp	.+408    	; 0x13ee <__fp_inf>
    1256:	51 11       	cpse	r21, r1
    1258:	3a c1       	rjmp	.+628    	; 0x14ce <__fp_szero>
    125a:	cf c0       	rjmp	.+414    	; 0x13fa <__fp_nan>

0000125c <__divsf3x>:
    125c:	15 d1       	rcall	.+554    	; 0x1488 <__fp_split3>
    125e:	98 f3       	brcs	.-26     	; 0x1246 <__divsf3+0x4>

00001260 <__divsf3_pse>:
    1260:	99 23       	and	r25, r25
    1262:	c9 f3       	breq	.-14     	; 0x1256 <__divsf3+0x14>
    1264:	55 23       	and	r21, r21
    1266:	b1 f3       	breq	.-20     	; 0x1254 <__divsf3+0x12>
    1268:	95 1b       	sub	r25, r21
    126a:	55 0b       	sbc	r21, r21
    126c:	bb 27       	eor	r27, r27
    126e:	aa 27       	eor	r26, r26
    1270:	62 17       	cp	r22, r18
    1272:	73 07       	cpc	r23, r19
    1274:	84 07       	cpc	r24, r20
    1276:	38 f0       	brcs	.+14     	; 0x1286 <__divsf3_pse+0x26>
    1278:	9f 5f       	subi	r25, 0xFF	; 255
    127a:	5f 4f       	sbci	r21, 0xFF	; 255
    127c:	22 0f       	add	r18, r18
    127e:	33 1f       	adc	r19, r19
    1280:	44 1f       	adc	r20, r20
    1282:	aa 1f       	adc	r26, r26
    1284:	a9 f3       	breq	.-22     	; 0x1270 <__divsf3_pse+0x10>
    1286:	33 d0       	rcall	.+102    	; 0x12ee <__divsf3_pse+0x8e>
    1288:	0e 2e       	mov	r0, r30
    128a:	3a f0       	brmi	.+14     	; 0x129a <__divsf3_pse+0x3a>
    128c:	e0 e8       	ldi	r30, 0x80	; 128
    128e:	30 d0       	rcall	.+96     	; 0x12f0 <__divsf3_pse+0x90>
    1290:	91 50       	subi	r25, 0x01	; 1
    1292:	50 40       	sbci	r21, 0x00	; 0
    1294:	e6 95       	lsr	r30
    1296:	00 1c       	adc	r0, r0
    1298:	ca f7       	brpl	.-14     	; 0x128c <__divsf3_pse+0x2c>
    129a:	29 d0       	rcall	.+82     	; 0x12ee <__divsf3_pse+0x8e>
    129c:	fe 2f       	mov	r31, r30
    129e:	27 d0       	rcall	.+78     	; 0x12ee <__divsf3_pse+0x8e>
    12a0:	66 0f       	add	r22, r22
    12a2:	77 1f       	adc	r23, r23
    12a4:	88 1f       	adc	r24, r24
    12a6:	bb 1f       	adc	r27, r27
    12a8:	26 17       	cp	r18, r22
    12aa:	37 07       	cpc	r19, r23
    12ac:	48 07       	cpc	r20, r24
    12ae:	ab 07       	cpc	r26, r27
    12b0:	b0 e8       	ldi	r27, 0x80	; 128
    12b2:	09 f0       	breq	.+2      	; 0x12b6 <__divsf3_pse+0x56>
    12b4:	bb 0b       	sbc	r27, r27
    12b6:	80 2d       	mov	r24, r0
    12b8:	bf 01       	movw	r22, r30
    12ba:	ff 27       	eor	r31, r31
    12bc:	93 58       	subi	r25, 0x83	; 131
    12be:	5f 4f       	sbci	r21, 0xFF	; 255
    12c0:	2a f0       	brmi	.+10     	; 0x12cc <__divsf3_pse+0x6c>
    12c2:	9e 3f       	cpi	r25, 0xFE	; 254
    12c4:	51 05       	cpc	r21, r1
    12c6:	68 f0       	brcs	.+26     	; 0x12e2 <__divsf3_pse+0x82>
    12c8:	92 c0       	rjmp	.+292    	; 0x13ee <__fp_inf>
    12ca:	01 c1       	rjmp	.+514    	; 0x14ce <__fp_szero>
    12cc:	5f 3f       	cpi	r21, 0xFF	; 255
    12ce:	ec f3       	brlt	.-6      	; 0x12ca <__divsf3_pse+0x6a>
    12d0:	98 3e       	cpi	r25, 0xE8	; 232
    12d2:	dc f3       	brlt	.-10     	; 0x12ca <__divsf3_pse+0x6a>
    12d4:	86 95       	lsr	r24
    12d6:	77 95       	ror	r23
    12d8:	67 95       	ror	r22
    12da:	b7 95       	ror	r27
    12dc:	f7 95       	ror	r31
    12de:	9f 5f       	subi	r25, 0xFF	; 255
    12e0:	c9 f7       	brne	.-14     	; 0x12d4 <__divsf3_pse+0x74>
    12e2:	88 0f       	add	r24, r24
    12e4:	91 1d       	adc	r25, r1
    12e6:	96 95       	lsr	r25
    12e8:	87 95       	ror	r24
    12ea:	97 f9       	bld	r25, 7
    12ec:	08 95       	ret
    12ee:	e1 e0       	ldi	r30, 0x01	; 1
    12f0:	66 0f       	add	r22, r22
    12f2:	77 1f       	adc	r23, r23
    12f4:	88 1f       	adc	r24, r24
    12f6:	bb 1f       	adc	r27, r27
    12f8:	62 17       	cp	r22, r18
    12fa:	73 07       	cpc	r23, r19
    12fc:	84 07       	cpc	r24, r20
    12fe:	ba 07       	cpc	r27, r26
    1300:	20 f0       	brcs	.+8      	; 0x130a <__divsf3_pse+0xaa>
    1302:	62 1b       	sub	r22, r18
    1304:	73 0b       	sbc	r23, r19
    1306:	84 0b       	sbc	r24, r20
    1308:	ba 0b       	sbc	r27, r26
    130a:	ee 1f       	adc	r30, r30
    130c:	88 f7       	brcc	.-30     	; 0x12f0 <__divsf3_pse+0x90>
    130e:	e0 95       	com	r30
    1310:	08 95       	ret

00001312 <__fixsfsi>:
    1312:	04 d0       	rcall	.+8      	; 0x131c <__fixunssfsi>
    1314:	68 94       	set
    1316:	b1 11       	cpse	r27, r1
    1318:	da c0       	rjmp	.+436    	; 0x14ce <__fp_szero>
    131a:	08 95       	ret

0000131c <__fixunssfsi>:
    131c:	bd d0       	rcall	.+378    	; 0x1498 <__fp_splitA>
    131e:	88 f0       	brcs	.+34     	; 0x1342 <__fixunssfsi+0x26>
    1320:	9f 57       	subi	r25, 0x7F	; 127
    1322:	90 f0       	brcs	.+36     	; 0x1348 <__fixunssfsi+0x2c>
    1324:	b9 2f       	mov	r27, r25
    1326:	99 27       	eor	r25, r25
    1328:	b7 51       	subi	r27, 0x17	; 23
    132a:	a0 f0       	brcs	.+40     	; 0x1354 <__fixunssfsi+0x38>
    132c:	d1 f0       	breq	.+52     	; 0x1362 <__fixunssfsi+0x46>
    132e:	66 0f       	add	r22, r22
    1330:	77 1f       	adc	r23, r23
    1332:	88 1f       	adc	r24, r24
    1334:	99 1f       	adc	r25, r25
    1336:	1a f0       	brmi	.+6      	; 0x133e <__fixunssfsi+0x22>
    1338:	ba 95       	dec	r27
    133a:	c9 f7       	brne	.-14     	; 0x132e <__fixunssfsi+0x12>
    133c:	12 c0       	rjmp	.+36     	; 0x1362 <__fixunssfsi+0x46>
    133e:	b1 30       	cpi	r27, 0x01	; 1
    1340:	81 f0       	breq	.+32     	; 0x1362 <__fixunssfsi+0x46>
    1342:	c4 d0       	rcall	.+392    	; 0x14cc <__fp_zero>
    1344:	b1 e0       	ldi	r27, 0x01	; 1
    1346:	08 95       	ret
    1348:	c1 c0       	rjmp	.+386    	; 0x14cc <__fp_zero>
    134a:	67 2f       	mov	r22, r23
    134c:	78 2f       	mov	r23, r24
    134e:	88 27       	eor	r24, r24
    1350:	b8 5f       	subi	r27, 0xF8	; 248
    1352:	39 f0       	breq	.+14     	; 0x1362 <__fixunssfsi+0x46>
    1354:	b9 3f       	cpi	r27, 0xF9	; 249
    1356:	cc f3       	brlt	.-14     	; 0x134a <__fixunssfsi+0x2e>
    1358:	86 95       	lsr	r24
    135a:	77 95       	ror	r23
    135c:	67 95       	ror	r22
    135e:	b3 95       	inc	r27
    1360:	d9 f7       	brne	.-10     	; 0x1358 <__fixunssfsi+0x3c>
    1362:	3e f4       	brtc	.+14     	; 0x1372 <__fixunssfsi+0x56>
    1364:	90 95       	com	r25
    1366:	80 95       	com	r24
    1368:	70 95       	com	r23
    136a:	61 95       	neg	r22
    136c:	7f 4f       	sbci	r23, 0xFF	; 255
    136e:	8f 4f       	sbci	r24, 0xFF	; 255
    1370:	9f 4f       	sbci	r25, 0xFF	; 255
    1372:	08 95       	ret

00001374 <__floatunsisf>:
    1374:	e8 94       	clt
    1376:	09 c0       	rjmp	.+18     	; 0x138a <__floatsisf+0x12>

00001378 <__floatsisf>:
    1378:	97 fb       	bst	r25, 7
    137a:	3e f4       	brtc	.+14     	; 0x138a <__floatsisf+0x12>
    137c:	90 95       	com	r25
    137e:	80 95       	com	r24
    1380:	70 95       	com	r23
    1382:	61 95       	neg	r22
    1384:	7f 4f       	sbci	r23, 0xFF	; 255
    1386:	8f 4f       	sbci	r24, 0xFF	; 255
    1388:	9f 4f       	sbci	r25, 0xFF	; 255
    138a:	99 23       	and	r25, r25
    138c:	a9 f0       	breq	.+42     	; 0x13b8 <__floatsisf+0x40>
    138e:	f9 2f       	mov	r31, r25
    1390:	96 e9       	ldi	r25, 0x96	; 150
    1392:	bb 27       	eor	r27, r27
    1394:	93 95       	inc	r25
    1396:	f6 95       	lsr	r31
    1398:	87 95       	ror	r24
    139a:	77 95       	ror	r23
    139c:	67 95       	ror	r22
    139e:	b7 95       	ror	r27
    13a0:	f1 11       	cpse	r31, r1
    13a2:	f8 cf       	rjmp	.-16     	; 0x1394 <__floatsisf+0x1c>
    13a4:	fa f4       	brpl	.+62     	; 0x13e4 <__floatsisf+0x6c>
    13a6:	bb 0f       	add	r27, r27
    13a8:	11 f4       	brne	.+4      	; 0x13ae <__floatsisf+0x36>
    13aa:	60 ff       	sbrs	r22, 0
    13ac:	1b c0       	rjmp	.+54     	; 0x13e4 <__floatsisf+0x6c>
    13ae:	6f 5f       	subi	r22, 0xFF	; 255
    13b0:	7f 4f       	sbci	r23, 0xFF	; 255
    13b2:	8f 4f       	sbci	r24, 0xFF	; 255
    13b4:	9f 4f       	sbci	r25, 0xFF	; 255
    13b6:	16 c0       	rjmp	.+44     	; 0x13e4 <__floatsisf+0x6c>
    13b8:	88 23       	and	r24, r24
    13ba:	11 f0       	breq	.+4      	; 0x13c0 <__floatsisf+0x48>
    13bc:	96 e9       	ldi	r25, 0x96	; 150
    13be:	11 c0       	rjmp	.+34     	; 0x13e2 <__floatsisf+0x6a>
    13c0:	77 23       	and	r23, r23
    13c2:	21 f0       	breq	.+8      	; 0x13cc <__floatsisf+0x54>
    13c4:	9e e8       	ldi	r25, 0x8E	; 142
    13c6:	87 2f       	mov	r24, r23
    13c8:	76 2f       	mov	r23, r22
    13ca:	05 c0       	rjmp	.+10     	; 0x13d6 <__floatsisf+0x5e>
    13cc:	66 23       	and	r22, r22
    13ce:	71 f0       	breq	.+28     	; 0x13ec <__floatsisf+0x74>
    13d0:	96 e8       	ldi	r25, 0x86	; 134
    13d2:	86 2f       	mov	r24, r22
    13d4:	70 e0       	ldi	r23, 0x00	; 0
    13d6:	60 e0       	ldi	r22, 0x00	; 0
    13d8:	2a f0       	brmi	.+10     	; 0x13e4 <__floatsisf+0x6c>
    13da:	9a 95       	dec	r25
    13dc:	66 0f       	add	r22, r22
    13de:	77 1f       	adc	r23, r23
    13e0:	88 1f       	adc	r24, r24
    13e2:	da f7       	brpl	.-10     	; 0x13da <__floatsisf+0x62>
    13e4:	88 0f       	add	r24, r24
    13e6:	96 95       	lsr	r25
    13e8:	87 95       	ror	r24
    13ea:	97 f9       	bld	r25, 7
    13ec:	08 95       	ret

000013ee <__fp_inf>:
    13ee:	97 f9       	bld	r25, 7
    13f0:	9f 67       	ori	r25, 0x7F	; 127
    13f2:	80 e8       	ldi	r24, 0x80	; 128
    13f4:	70 e0       	ldi	r23, 0x00	; 0
    13f6:	60 e0       	ldi	r22, 0x00	; 0
    13f8:	08 95       	ret

000013fa <__fp_nan>:
    13fa:	9f ef       	ldi	r25, 0xFF	; 255
    13fc:	80 ec       	ldi	r24, 0xC0	; 192
    13fe:	08 95       	ret

00001400 <__fp_powser>:
    1400:	df 93       	push	r29
    1402:	cf 93       	push	r28
    1404:	1f 93       	push	r17
    1406:	0f 93       	push	r16
    1408:	ff 92       	push	r15
    140a:	ef 92       	push	r14
    140c:	df 92       	push	r13
    140e:	7b 01       	movw	r14, r22
    1410:	8c 01       	movw	r16, r24
    1412:	68 94       	set
    1414:	05 c0       	rjmp	.+10     	; 0x1420 <__fp_powser+0x20>
    1416:	da 2e       	mov	r13, r26
    1418:	ef 01       	movw	r28, r30
    141a:	72 d0       	rcall	.+228    	; 0x1500 <__mulsf3x>
    141c:	fe 01       	movw	r30, r28
    141e:	e8 94       	clt
    1420:	a5 91       	lpm	r26, Z+
    1422:	25 91       	lpm	r18, Z+
    1424:	35 91       	lpm	r19, Z+
    1426:	45 91       	lpm	r20, Z+
    1428:	55 91       	lpm	r21, Z+
    142a:	ae f3       	brts	.-22     	; 0x1416 <__fp_powser+0x16>
    142c:	ef 01       	movw	r28, r30
    142e:	54 de       	rcall	.-856    	; 0x10d8 <__addsf3x>
    1430:	fe 01       	movw	r30, r28
    1432:	97 01       	movw	r18, r14
    1434:	a8 01       	movw	r20, r16
    1436:	da 94       	dec	r13
    1438:	79 f7       	brne	.-34     	; 0x1418 <__fp_powser+0x18>
    143a:	df 90       	pop	r13
    143c:	ef 90       	pop	r14
    143e:	ff 90       	pop	r15
    1440:	0f 91       	pop	r16
    1442:	1f 91       	pop	r17
    1444:	cf 91       	pop	r28
    1446:	df 91       	pop	r29
    1448:	08 95       	ret

0000144a <__fp_pscA>:
    144a:	00 24       	eor	r0, r0
    144c:	0a 94       	dec	r0
    144e:	16 16       	cp	r1, r22
    1450:	17 06       	cpc	r1, r23
    1452:	18 06       	cpc	r1, r24
    1454:	09 06       	cpc	r0, r25
    1456:	08 95       	ret

00001458 <__fp_pscB>:
    1458:	00 24       	eor	r0, r0
    145a:	0a 94       	dec	r0
    145c:	12 16       	cp	r1, r18
    145e:	13 06       	cpc	r1, r19
    1460:	14 06       	cpc	r1, r20
    1462:	05 06       	cpc	r0, r21
    1464:	08 95       	ret

00001466 <__fp_round>:
    1466:	09 2e       	mov	r0, r25
    1468:	03 94       	inc	r0
    146a:	00 0c       	add	r0, r0
    146c:	11 f4       	brne	.+4      	; 0x1472 <__fp_round+0xc>
    146e:	88 23       	and	r24, r24
    1470:	52 f0       	brmi	.+20     	; 0x1486 <__fp_round+0x20>
    1472:	bb 0f       	add	r27, r27
    1474:	40 f4       	brcc	.+16     	; 0x1486 <__fp_round+0x20>
    1476:	bf 2b       	or	r27, r31
    1478:	11 f4       	brne	.+4      	; 0x147e <__fp_round+0x18>
    147a:	60 ff       	sbrs	r22, 0
    147c:	04 c0       	rjmp	.+8      	; 0x1486 <__fp_round+0x20>
    147e:	6f 5f       	subi	r22, 0xFF	; 255
    1480:	7f 4f       	sbci	r23, 0xFF	; 255
    1482:	8f 4f       	sbci	r24, 0xFF	; 255
    1484:	9f 4f       	sbci	r25, 0xFF	; 255
    1486:	08 95       	ret

00001488 <__fp_split3>:
    1488:	57 fd       	sbrc	r21, 7
    148a:	90 58       	subi	r25, 0x80	; 128
    148c:	44 0f       	add	r20, r20
    148e:	55 1f       	adc	r21, r21
    1490:	59 f0       	breq	.+22     	; 0x14a8 <__fp_splitA+0x10>
    1492:	5f 3f       	cpi	r21, 0xFF	; 255
    1494:	71 f0       	breq	.+28     	; 0x14b2 <__fp_splitA+0x1a>
    1496:	47 95       	ror	r20

00001498 <__fp_splitA>:
    1498:	88 0f       	add	r24, r24
    149a:	97 fb       	bst	r25, 7
    149c:	99 1f       	adc	r25, r25
    149e:	61 f0       	breq	.+24     	; 0x14b8 <__fp_splitA+0x20>
    14a0:	9f 3f       	cpi	r25, 0xFF	; 255
    14a2:	79 f0       	breq	.+30     	; 0x14c2 <__fp_splitA+0x2a>
    14a4:	87 95       	ror	r24
    14a6:	08 95       	ret
    14a8:	12 16       	cp	r1, r18
    14aa:	13 06       	cpc	r1, r19
    14ac:	14 06       	cpc	r1, r20
    14ae:	55 1f       	adc	r21, r21
    14b0:	f2 cf       	rjmp	.-28     	; 0x1496 <__fp_split3+0xe>
    14b2:	46 95       	lsr	r20
    14b4:	f1 df       	rcall	.-30     	; 0x1498 <__fp_splitA>
    14b6:	08 c0       	rjmp	.+16     	; 0x14c8 <__fp_splitA+0x30>
    14b8:	16 16       	cp	r1, r22
    14ba:	17 06       	cpc	r1, r23
    14bc:	18 06       	cpc	r1, r24
    14be:	99 1f       	adc	r25, r25
    14c0:	f1 cf       	rjmp	.-30     	; 0x14a4 <__fp_splitA+0xc>
    14c2:	86 95       	lsr	r24
    14c4:	71 05       	cpc	r23, r1
    14c6:	61 05       	cpc	r22, r1
    14c8:	08 94       	sec
    14ca:	08 95       	ret

000014cc <__fp_zero>:
    14cc:	e8 94       	clt

000014ce <__fp_szero>:
    14ce:	bb 27       	eor	r27, r27
    14d0:	66 27       	eor	r22, r22
    14d2:	77 27       	eor	r23, r23
    14d4:	cb 01       	movw	r24, r22
    14d6:	97 f9       	bld	r25, 7
    14d8:	08 95       	ret

000014da <inverse>:
    14da:	9b 01       	movw	r18, r22
    14dc:	ac 01       	movw	r20, r24
    14de:	60 e0       	ldi	r22, 0x00	; 0
    14e0:	70 e0       	ldi	r23, 0x00	; 0
    14e2:	80 e8       	ldi	r24, 0x80	; 128
    14e4:	9f e3       	ldi	r25, 0x3F	; 63
    14e6:	ad ce       	rjmp	.-678    	; 0x1242 <__divsf3>

000014e8 <__mulsf3>:
    14e8:	0b d0       	rcall	.+22     	; 0x1500 <__mulsf3x>
    14ea:	bd cf       	rjmp	.-134    	; 0x1466 <__fp_round>
    14ec:	ae df       	rcall	.-164    	; 0x144a <__fp_pscA>
    14ee:	28 f0       	brcs	.+10     	; 0x14fa <__mulsf3+0x12>
    14f0:	b3 df       	rcall	.-154    	; 0x1458 <__fp_pscB>
    14f2:	18 f0       	brcs	.+6      	; 0x14fa <__mulsf3+0x12>
    14f4:	95 23       	and	r25, r21
    14f6:	09 f0       	breq	.+2      	; 0x14fa <__mulsf3+0x12>
    14f8:	7a cf       	rjmp	.-268    	; 0x13ee <__fp_inf>
    14fa:	7f cf       	rjmp	.-258    	; 0x13fa <__fp_nan>
    14fc:	11 24       	eor	r1, r1
    14fe:	e7 cf       	rjmp	.-50     	; 0x14ce <__fp_szero>

00001500 <__mulsf3x>:
    1500:	c3 df       	rcall	.-122    	; 0x1488 <__fp_split3>
    1502:	a0 f3       	brcs	.-24     	; 0x14ec <__mulsf3+0x4>

00001504 <__mulsf3_pse>:
    1504:	95 9f       	mul	r25, r21
    1506:	d1 f3       	breq	.-12     	; 0x14fc <__mulsf3+0x14>
    1508:	95 0f       	add	r25, r21
    150a:	50 e0       	ldi	r21, 0x00	; 0
    150c:	55 1f       	adc	r21, r21
    150e:	62 9f       	mul	r22, r18
    1510:	f0 01       	movw	r30, r0
    1512:	72 9f       	mul	r23, r18
    1514:	bb 27       	eor	r27, r27
    1516:	f0 0d       	add	r31, r0
    1518:	b1 1d       	adc	r27, r1
    151a:	63 9f       	mul	r22, r19
    151c:	aa 27       	eor	r26, r26
    151e:	f0 0d       	add	r31, r0
    1520:	b1 1d       	adc	r27, r1
    1522:	aa 1f       	adc	r26, r26
    1524:	64 9f       	mul	r22, r20
    1526:	66 27       	eor	r22, r22
    1528:	b0 0d       	add	r27, r0
    152a:	a1 1d       	adc	r26, r1
    152c:	66 1f       	adc	r22, r22
    152e:	82 9f       	mul	r24, r18
    1530:	22 27       	eor	r18, r18
    1532:	b0 0d       	add	r27, r0
    1534:	a1 1d       	adc	r26, r1
    1536:	62 1f       	adc	r22, r18
    1538:	73 9f       	mul	r23, r19
    153a:	b0 0d       	add	r27, r0
    153c:	a1 1d       	adc	r26, r1
    153e:	62 1f       	adc	r22, r18
    1540:	83 9f       	mul	r24, r19
    1542:	a0 0d       	add	r26, r0
    1544:	61 1d       	adc	r22, r1
    1546:	22 1f       	adc	r18, r18
    1548:	74 9f       	mul	r23, r20
    154a:	33 27       	eor	r19, r19
    154c:	a0 0d       	add	r26, r0
    154e:	61 1d       	adc	r22, r1
    1550:	23 1f       	adc	r18, r19
    1552:	84 9f       	mul	r24, r20
    1554:	60 0d       	add	r22, r0
    1556:	21 1d       	adc	r18, r1
    1558:	82 2f       	mov	r24, r18
    155a:	76 2f       	mov	r23, r22
    155c:	6a 2f       	mov	r22, r26
    155e:	11 24       	eor	r1, r1
    1560:	9f 57       	subi	r25, 0x7F	; 127
    1562:	50 40       	sbci	r21, 0x00	; 0
    1564:	8a f0       	brmi	.+34     	; 0x1588 <__mulsf3_pse+0x84>
    1566:	e1 f0       	breq	.+56     	; 0x15a0 <__mulsf3_pse+0x9c>
    1568:	88 23       	and	r24, r24
    156a:	4a f0       	brmi	.+18     	; 0x157e <__mulsf3_pse+0x7a>
    156c:	ee 0f       	add	r30, r30
    156e:	ff 1f       	adc	r31, r31
    1570:	bb 1f       	adc	r27, r27
    1572:	66 1f       	adc	r22, r22
    1574:	77 1f       	adc	r23, r23
    1576:	88 1f       	adc	r24, r24
    1578:	91 50       	subi	r25, 0x01	; 1
    157a:	50 40       	sbci	r21, 0x00	; 0
    157c:	a9 f7       	brne	.-22     	; 0x1568 <__mulsf3_pse+0x64>
    157e:	9e 3f       	cpi	r25, 0xFE	; 254
    1580:	51 05       	cpc	r21, r1
    1582:	70 f0       	brcs	.+28     	; 0x15a0 <__mulsf3_pse+0x9c>
    1584:	34 cf       	rjmp	.-408    	; 0x13ee <__fp_inf>
    1586:	a3 cf       	rjmp	.-186    	; 0x14ce <__fp_szero>
    1588:	5f 3f       	cpi	r21, 0xFF	; 255
    158a:	ec f3       	brlt	.-6      	; 0x1586 <__mulsf3_pse+0x82>
    158c:	98 3e       	cpi	r25, 0xE8	; 232
    158e:	dc f3       	brlt	.-10     	; 0x1586 <__mulsf3_pse+0x82>
    1590:	86 95       	lsr	r24
    1592:	77 95       	ror	r23
    1594:	67 95       	ror	r22
    1596:	b7 95       	ror	r27
    1598:	f7 95       	ror	r31
    159a:	e7 95       	ror	r30
    159c:	9f 5f       	subi	r25, 0xFF	; 255
    159e:	c1 f7       	brne	.-16     	; 0x1590 <__mulsf3_pse+0x8c>
    15a0:	fe 2b       	or	r31, r30
    15a2:	88 0f       	add	r24, r24
    15a4:	91 1d       	adc	r25, r1
    15a6:	96 95       	lsr	r25
    15a8:	87 95       	ror	r24
    15aa:	97 f9       	bld	r25, 7
    15ac:	08 95       	ret

000015ae <square>:
    15ae:	9b 01       	movw	r18, r22
    15b0:	ac 01       	movw	r20, r24
    15b2:	9a cf       	rjmp	.-204    	; 0x14e8 <__mulsf3>

000015b4 <__prologue_saves__>:
    15b4:	2f 92       	push	r2
    15b6:	3f 92       	push	r3
    15b8:	4f 92       	push	r4
    15ba:	5f 92       	push	r5
    15bc:	6f 92       	push	r6
    15be:	7f 92       	push	r7
    15c0:	8f 92       	push	r8
    15c2:	9f 92       	push	r9
    15c4:	af 92       	push	r10
    15c6:	bf 92       	push	r11
    15c8:	cf 92       	push	r12
    15ca:	df 92       	push	r13
    15cc:	ef 92       	push	r14
    15ce:	ff 92       	push	r15
    15d0:	0f 93       	push	r16
    15d2:	1f 93       	push	r17
    15d4:	cf 93       	push	r28
    15d6:	df 93       	push	r29
    15d8:	cd b7       	in	r28, 0x3d	; 61
    15da:	de b7       	in	r29, 0x3e	; 62
    15dc:	ca 1b       	sub	r28, r26
    15de:	db 0b       	sbc	r29, r27
    15e0:	0f b6       	in	r0, 0x3f	; 63
    15e2:	f8 94       	cli
    15e4:	de bf       	out	0x3e, r29	; 62
    15e6:	0f be       	out	0x3f, r0	; 63
    15e8:	cd bf       	out	0x3d, r28	; 61
    15ea:	09 94       	ijmp

000015ec <__epilogue_restores__>:
    15ec:	2a 88       	ldd	r2, Y+18	; 0x12
    15ee:	39 88       	ldd	r3, Y+17	; 0x11
    15f0:	48 88       	ldd	r4, Y+16	; 0x10
    15f2:	5f 84       	ldd	r5, Y+15	; 0x0f
    15f4:	6e 84       	ldd	r6, Y+14	; 0x0e
    15f6:	7d 84       	ldd	r7, Y+13	; 0x0d
    15f8:	8c 84       	ldd	r8, Y+12	; 0x0c
    15fa:	9b 84       	ldd	r9, Y+11	; 0x0b
    15fc:	aa 84       	ldd	r10, Y+10	; 0x0a
    15fe:	b9 84       	ldd	r11, Y+9	; 0x09
    1600:	c8 84       	ldd	r12, Y+8	; 0x08
    1602:	df 80       	ldd	r13, Y+7	; 0x07
    1604:	ee 80       	ldd	r14, Y+6	; 0x06
    1606:	fd 80       	ldd	r15, Y+5	; 0x05
    1608:	0c 81       	ldd	r16, Y+4	; 0x04
    160a:	1b 81       	ldd	r17, Y+3	; 0x03
    160c:	aa 81       	ldd	r26, Y+2	; 0x02
    160e:	b9 81       	ldd	r27, Y+1	; 0x01
    1610:	ce 0f       	add	r28, r30
    1612:	d1 1d       	adc	r29, r1
    1614:	0f b6       	in	r0, 0x3f	; 63
    1616:	f8 94       	cli
    1618:	de bf       	out	0x3e, r29	; 62
    161a:	0f be       	out	0x3f, r0	; 63
    161c:	cd bf       	out	0x3d, r28	; 61
    161e:	ed 01       	movw	r28, r26
    1620:	08 95       	ret

00001622 <__ftoa_engine>:
    1622:	28 30       	cpi	r18, 0x08	; 8
    1624:	08 f0       	brcs	.+2      	; 0x1628 <__ftoa_engine+0x6>
    1626:	27 e0       	ldi	r18, 0x07	; 7
    1628:	33 27       	eor	r19, r19
    162a:	da 01       	movw	r26, r20
    162c:	99 0f       	add	r25, r25
    162e:	31 1d       	adc	r19, r1
    1630:	87 fd       	sbrc	r24, 7
    1632:	91 60       	ori	r25, 0x01	; 1
    1634:	00 96       	adiw	r24, 0x00	; 0
    1636:	61 05       	cpc	r22, r1
    1638:	71 05       	cpc	r23, r1
    163a:	39 f4       	brne	.+14     	; 0x164a <__ftoa_engine+0x28>
    163c:	32 60       	ori	r19, 0x02	; 2
    163e:	2e 5f       	subi	r18, 0xFE	; 254
    1640:	3d 93       	st	X+, r19
    1642:	30 e3       	ldi	r19, 0x30	; 48
    1644:	2a 95       	dec	r18
    1646:	e1 f7       	brne	.-8      	; 0x1640 <__ftoa_engine+0x1e>
    1648:	08 95       	ret
    164a:	9f 3f       	cpi	r25, 0xFF	; 255
    164c:	30 f0       	brcs	.+12     	; 0x165a <__ftoa_engine+0x38>
    164e:	80 38       	cpi	r24, 0x80	; 128
    1650:	71 05       	cpc	r23, r1
    1652:	61 05       	cpc	r22, r1
    1654:	09 f0       	breq	.+2      	; 0x1658 <__ftoa_engine+0x36>
    1656:	3c 5f       	subi	r19, 0xFC	; 252
    1658:	3c 5f       	subi	r19, 0xFC	; 252
    165a:	3d 93       	st	X+, r19
    165c:	91 30       	cpi	r25, 0x01	; 1
    165e:	08 f0       	brcs	.+2      	; 0x1662 <__ftoa_engine+0x40>
    1660:	80 68       	ori	r24, 0x80	; 128
    1662:	91 1d       	adc	r25, r1
    1664:	df 93       	push	r29
    1666:	cf 93       	push	r28
    1668:	1f 93       	push	r17
    166a:	0f 93       	push	r16
    166c:	ff 92       	push	r15
    166e:	ef 92       	push	r14
    1670:	19 2f       	mov	r17, r25
    1672:	98 7f       	andi	r25, 0xF8	; 248
    1674:	96 95       	lsr	r25
    1676:	e9 2f       	mov	r30, r25
    1678:	96 95       	lsr	r25
    167a:	96 95       	lsr	r25
    167c:	e9 0f       	add	r30, r25
    167e:	ff 27       	eor	r31, r31
    1680:	e8 50       	subi	r30, 0x08	; 8
    1682:	ff 4f       	sbci	r31, 0xFF	; 255
    1684:	99 27       	eor	r25, r25
    1686:	33 27       	eor	r19, r19
    1688:	ee 24       	eor	r14, r14
    168a:	ff 24       	eor	r15, r15
    168c:	a7 01       	movw	r20, r14
    168e:	e7 01       	movw	r28, r14
    1690:	05 90       	lpm	r0, Z+
    1692:	08 94       	sec
    1694:	07 94       	ror	r0
    1696:	28 f4       	brcc	.+10     	; 0x16a2 <__ftoa_engine+0x80>
    1698:	36 0f       	add	r19, r22
    169a:	e7 1e       	adc	r14, r23
    169c:	f8 1e       	adc	r15, r24
    169e:	49 1f       	adc	r20, r25
    16a0:	51 1d       	adc	r21, r1
    16a2:	66 0f       	add	r22, r22
    16a4:	77 1f       	adc	r23, r23
    16a6:	88 1f       	adc	r24, r24
    16a8:	99 1f       	adc	r25, r25
    16aa:	06 94       	lsr	r0
    16ac:	a1 f7       	brne	.-24     	; 0x1696 <__ftoa_engine+0x74>
    16ae:	05 90       	lpm	r0, Z+
    16b0:	07 94       	ror	r0
    16b2:	28 f4       	brcc	.+10     	; 0x16be <__ftoa_engine+0x9c>
    16b4:	e7 0e       	add	r14, r23
    16b6:	f8 1e       	adc	r15, r24
    16b8:	49 1f       	adc	r20, r25
    16ba:	56 1f       	adc	r21, r22
    16bc:	c1 1d       	adc	r28, r1
    16be:	77 0f       	add	r23, r23
    16c0:	88 1f       	adc	r24, r24
    16c2:	99 1f       	adc	r25, r25
    16c4:	66 1f       	adc	r22, r22
    16c6:	06 94       	lsr	r0
    16c8:	a1 f7       	brne	.-24     	; 0x16b2 <__ftoa_engine+0x90>
    16ca:	05 90       	lpm	r0, Z+
    16cc:	07 94       	ror	r0
    16ce:	28 f4       	brcc	.+10     	; 0x16da <__ftoa_engine+0xb8>
    16d0:	f8 0e       	add	r15, r24
    16d2:	49 1f       	adc	r20, r25
    16d4:	56 1f       	adc	r21, r22
    16d6:	c7 1f       	adc	r28, r23
    16d8:	d1 1d       	adc	r29, r1
    16da:	88 0f       	add	r24, r24
    16dc:	99 1f       	adc	r25, r25
    16de:	66 1f       	adc	r22, r22
    16e0:	77 1f       	adc	r23, r23
    16e2:	06 94       	lsr	r0
    16e4:	a1 f7       	brne	.-24     	; 0x16ce <__ftoa_engine+0xac>
    16e6:	05 90       	lpm	r0, Z+
    16e8:	07 94       	ror	r0
    16ea:	20 f4       	brcc	.+8      	; 0x16f4 <__ftoa_engine+0xd2>
    16ec:	49 0f       	add	r20, r25
    16ee:	56 1f       	adc	r21, r22
    16f0:	c7 1f       	adc	r28, r23
    16f2:	d8 1f       	adc	r29, r24
    16f4:	99 0f       	add	r25, r25
    16f6:	66 1f       	adc	r22, r22
    16f8:	77 1f       	adc	r23, r23
    16fa:	88 1f       	adc	r24, r24
    16fc:	06 94       	lsr	r0
    16fe:	a9 f7       	brne	.-22     	; 0x16ea <__ftoa_engine+0xc8>
    1700:	84 91       	lpm	r24, Z
    1702:	10 95       	com	r17
    1704:	17 70       	andi	r17, 0x07	; 7
    1706:	41 f0       	breq	.+16     	; 0x1718 <__ftoa_engine+0xf6>
    1708:	d6 95       	lsr	r29
    170a:	c7 95       	ror	r28
    170c:	57 95       	ror	r21
    170e:	47 95       	ror	r20
    1710:	f7 94       	ror	r15
    1712:	e7 94       	ror	r14
    1714:	1a 95       	dec	r17
    1716:	c1 f7       	brne	.-16     	; 0x1708 <__ftoa_engine+0xe6>
    1718:	ee e9       	ldi	r30, 0x9E	; 158
    171a:	f0 e0       	ldi	r31, 0x00	; 0
    171c:	68 94       	set
    171e:	15 90       	lpm	r1, Z+
    1720:	15 91       	lpm	r17, Z+
    1722:	35 91       	lpm	r19, Z+
    1724:	65 91       	lpm	r22, Z+
    1726:	95 91       	lpm	r25, Z+
    1728:	05 90       	lpm	r0, Z+
    172a:	7f e2       	ldi	r23, 0x2F	; 47
    172c:	73 95       	inc	r23
    172e:	e1 18       	sub	r14, r1
    1730:	f1 0a       	sbc	r15, r17
    1732:	43 0b       	sbc	r20, r19
    1734:	56 0b       	sbc	r21, r22
    1736:	c9 0b       	sbc	r28, r25
    1738:	d0 09       	sbc	r29, r0
    173a:	c0 f7       	brcc	.-16     	; 0x172c <__ftoa_engine+0x10a>
    173c:	e1 0c       	add	r14, r1
    173e:	f1 1e       	adc	r15, r17
    1740:	43 1f       	adc	r20, r19
    1742:	56 1f       	adc	r21, r22
    1744:	c9 1f       	adc	r28, r25
    1746:	d0 1d       	adc	r29, r0
    1748:	7e f4       	brtc	.+30     	; 0x1768 <__ftoa_engine+0x146>
    174a:	70 33       	cpi	r23, 0x30	; 48
    174c:	11 f4       	brne	.+4      	; 0x1752 <__ftoa_engine+0x130>
    174e:	8a 95       	dec	r24
    1750:	e6 cf       	rjmp	.-52     	; 0x171e <__ftoa_engine+0xfc>
    1752:	e8 94       	clt
    1754:	01 50       	subi	r16, 0x01	; 1
    1756:	30 f0       	brcs	.+12     	; 0x1764 <__ftoa_engine+0x142>
    1758:	08 0f       	add	r16, r24
    175a:	0a f4       	brpl	.+2      	; 0x175e <__ftoa_engine+0x13c>
    175c:	00 27       	eor	r16, r16
    175e:	02 17       	cp	r16, r18
    1760:	08 f4       	brcc	.+2      	; 0x1764 <__ftoa_engine+0x142>
    1762:	20 2f       	mov	r18, r16
    1764:	23 95       	inc	r18
    1766:	02 2f       	mov	r16, r18
    1768:	7a 33       	cpi	r23, 0x3A	; 58
    176a:	28 f0       	brcs	.+10     	; 0x1776 <__ftoa_engine+0x154>
    176c:	79 e3       	ldi	r23, 0x39	; 57
    176e:	7d 93       	st	X+, r23
    1770:	2a 95       	dec	r18
    1772:	e9 f7       	brne	.-6      	; 0x176e <__ftoa_engine+0x14c>
    1774:	10 c0       	rjmp	.+32     	; 0x1796 <__ftoa_engine+0x174>
    1776:	7d 93       	st	X+, r23
    1778:	2a 95       	dec	r18
    177a:	89 f6       	brne	.-94     	; 0x171e <__ftoa_engine+0xfc>
    177c:	06 94       	lsr	r0
    177e:	97 95       	ror	r25
    1780:	67 95       	ror	r22
    1782:	37 95       	ror	r19
    1784:	17 95       	ror	r17
    1786:	17 94       	ror	r1
    1788:	e1 18       	sub	r14, r1
    178a:	f1 0a       	sbc	r15, r17
    178c:	43 0b       	sbc	r20, r19
    178e:	56 0b       	sbc	r21, r22
    1790:	c9 0b       	sbc	r28, r25
    1792:	d0 09       	sbc	r29, r0
    1794:	98 f0       	brcs	.+38     	; 0x17bc <__ftoa_engine+0x19a>
    1796:	23 95       	inc	r18
    1798:	7e 91       	ld	r23, -X
    179a:	73 95       	inc	r23
    179c:	7a 33       	cpi	r23, 0x3A	; 58
    179e:	08 f0       	brcs	.+2      	; 0x17a2 <__ftoa_engine+0x180>
    17a0:	70 e3       	ldi	r23, 0x30	; 48
    17a2:	7c 93       	st	X, r23
    17a4:	20 13       	cpse	r18, r16
    17a6:	b8 f7       	brcc	.-18     	; 0x1796 <__ftoa_engine+0x174>
    17a8:	7e 91       	ld	r23, -X
    17aa:	70 61       	ori	r23, 0x10	; 16
    17ac:	7d 93       	st	X+, r23
    17ae:	30 f0       	brcs	.+12     	; 0x17bc <__ftoa_engine+0x19a>
    17b0:	83 95       	inc	r24
    17b2:	71 e3       	ldi	r23, 0x31	; 49
    17b4:	7d 93       	st	X+, r23
    17b6:	70 e3       	ldi	r23, 0x30	; 48
    17b8:	2a 95       	dec	r18
    17ba:	e1 f7       	brne	.-8      	; 0x17b4 <__ftoa_engine+0x192>
    17bc:	11 24       	eor	r1, r1
    17be:	ef 90       	pop	r14
    17c0:	ff 90       	pop	r15
    17c2:	0f 91       	pop	r16
    17c4:	1f 91       	pop	r17
    17c6:	cf 91       	pop	r28
    17c8:	df 91       	pop	r29
    17ca:	99 27       	eor	r25, r25
    17cc:	87 fd       	sbrc	r24, 7
    17ce:	90 95       	com	r25
    17d0:	08 95       	ret

000017d2 <strnlen_P>:
    17d2:	fc 01       	movw	r30, r24
    17d4:	05 90       	lpm	r0, Z+
    17d6:	61 50       	subi	r22, 0x01	; 1
    17d8:	70 40       	sbci	r23, 0x00	; 0
    17da:	01 10       	cpse	r0, r1
    17dc:	d8 f7       	brcc	.-10     	; 0x17d4 <strnlen_P+0x2>
    17de:	80 95       	com	r24
    17e0:	90 95       	com	r25
    17e2:	8e 0f       	add	r24, r30
    17e4:	9f 1f       	adc	r25, r31
    17e6:	08 95       	ret

000017e8 <strnlen>:
    17e8:	fc 01       	movw	r30, r24
    17ea:	61 50       	subi	r22, 0x01	; 1
    17ec:	70 40       	sbci	r23, 0x00	; 0
    17ee:	01 90       	ld	r0, Z+
    17f0:	01 10       	cpse	r0, r1
    17f2:	d8 f7       	brcc	.-10     	; 0x17ea <strnlen+0x2>
    17f4:	80 95       	com	r24
    17f6:	90 95       	com	r25
    17f8:	8e 0f       	add	r24, r30
    17fa:	9f 1f       	adc	r25, r31
    17fc:	08 95       	ret

000017fe <fputc>:
    17fe:	0f 93       	push	r16
    1800:	1f 93       	push	r17
    1802:	cf 93       	push	r28
    1804:	df 93       	push	r29
    1806:	fb 01       	movw	r30, r22
    1808:	23 81       	ldd	r18, Z+3	; 0x03
    180a:	21 fd       	sbrc	r18, 1
    180c:	03 c0       	rjmp	.+6      	; 0x1814 <fputc+0x16>
    180e:	8f ef       	ldi	r24, 0xFF	; 255
    1810:	9f ef       	ldi	r25, 0xFF	; 255
    1812:	28 c0       	rjmp	.+80     	; 0x1864 <fputc+0x66>
    1814:	22 ff       	sbrs	r18, 2
    1816:	16 c0       	rjmp	.+44     	; 0x1844 <fputc+0x46>
    1818:	46 81       	ldd	r20, Z+6	; 0x06
    181a:	57 81       	ldd	r21, Z+7	; 0x07
    181c:	24 81       	ldd	r18, Z+4	; 0x04
    181e:	35 81       	ldd	r19, Z+5	; 0x05
    1820:	42 17       	cp	r20, r18
    1822:	53 07       	cpc	r21, r19
    1824:	44 f4       	brge	.+16     	; 0x1836 <fputc+0x38>
    1826:	a0 81       	ld	r26, Z
    1828:	b1 81       	ldd	r27, Z+1	; 0x01
    182a:	9d 01       	movw	r18, r26
    182c:	2f 5f       	subi	r18, 0xFF	; 255
    182e:	3f 4f       	sbci	r19, 0xFF	; 255
    1830:	31 83       	std	Z+1, r19	; 0x01
    1832:	20 83       	st	Z, r18
    1834:	8c 93       	st	X, r24
    1836:	26 81       	ldd	r18, Z+6	; 0x06
    1838:	37 81       	ldd	r19, Z+7	; 0x07
    183a:	2f 5f       	subi	r18, 0xFF	; 255
    183c:	3f 4f       	sbci	r19, 0xFF	; 255
    183e:	37 83       	std	Z+7, r19	; 0x07
    1840:	26 83       	std	Z+6, r18	; 0x06
    1842:	10 c0       	rjmp	.+32     	; 0x1864 <fputc+0x66>
    1844:	eb 01       	movw	r28, r22
    1846:	09 2f       	mov	r16, r25
    1848:	18 2f       	mov	r17, r24
    184a:	00 84       	ldd	r0, Z+8	; 0x08
    184c:	f1 85       	ldd	r31, Z+9	; 0x09
    184e:	e0 2d       	mov	r30, r0
    1850:	09 95       	icall
    1852:	89 2b       	or	r24, r25
    1854:	e1 f6       	brne	.-72     	; 0x180e <fputc+0x10>
    1856:	8e 81       	ldd	r24, Y+6	; 0x06
    1858:	9f 81       	ldd	r25, Y+7	; 0x07
    185a:	01 96       	adiw	r24, 0x01	; 1
    185c:	9f 83       	std	Y+7, r25	; 0x07
    185e:	8e 83       	std	Y+6, r24	; 0x06
    1860:	81 2f       	mov	r24, r17
    1862:	90 2f       	mov	r25, r16
    1864:	df 91       	pop	r29
    1866:	cf 91       	pop	r28
    1868:	1f 91       	pop	r17
    186a:	0f 91       	pop	r16
    186c:	08 95       	ret

0000186e <printf>:
    186e:	a0 e0       	ldi	r26, 0x00	; 0
    1870:	b0 e0       	ldi	r27, 0x00	; 0
    1872:	ed e3       	ldi	r30, 0x3D	; 61
    1874:	fc e0       	ldi	r31, 0x0C	; 12
    1876:	0c 94 ea 0a 	jmp	0x15d4	; 0x15d4 <__prologue_saves__+0x20>
    187a:	ae 01       	movw	r20, r28
    187c:	4b 5f       	subi	r20, 0xFB	; 251
    187e:	5f 4f       	sbci	r21, 0xFF	; 255
    1880:	fa 01       	movw	r30, r20
    1882:	61 91       	ld	r22, Z+
    1884:	71 91       	ld	r23, Z+
    1886:	af 01       	movw	r20, r30
    1888:	80 91 18 01 	lds	r24, 0x0118
    188c:	90 91 19 01 	lds	r25, 0x0119
    1890:	0e 94 de 04 	call	0x9bc	; 0x9bc <vfprintf>
    1894:	e2 e0       	ldi	r30, 0x02	; 2
    1896:	0c 94 06 0b 	jmp	0x160c	; 0x160c <__epilogue_restores__+0x20>

0000189a <__ultoa_invert>:
    189a:	fa 01       	movw	r30, r20
    189c:	aa 27       	eor	r26, r26
    189e:	28 30       	cpi	r18, 0x08	; 8
    18a0:	51 f1       	breq	.+84     	; 0x18f6 <__ultoa_invert+0x5c>
    18a2:	20 31       	cpi	r18, 0x10	; 16
    18a4:	81 f1       	breq	.+96     	; 0x1906 <__ultoa_invert+0x6c>
    18a6:	e8 94       	clt
    18a8:	6f 93       	push	r22
    18aa:	6e 7f       	andi	r22, 0xFE	; 254
    18ac:	6e 5f       	subi	r22, 0xFE	; 254
    18ae:	7f 4f       	sbci	r23, 0xFF	; 255
    18b0:	8f 4f       	sbci	r24, 0xFF	; 255
    18b2:	9f 4f       	sbci	r25, 0xFF	; 255
    18b4:	af 4f       	sbci	r26, 0xFF	; 255
    18b6:	b1 e0       	ldi	r27, 0x01	; 1
    18b8:	3e d0       	rcall	.+124    	; 0x1936 <__ultoa_invert+0x9c>
    18ba:	b4 e0       	ldi	r27, 0x04	; 4
    18bc:	3c d0       	rcall	.+120    	; 0x1936 <__ultoa_invert+0x9c>
    18be:	67 0f       	add	r22, r23
    18c0:	78 1f       	adc	r23, r24
    18c2:	89 1f       	adc	r24, r25
    18c4:	9a 1f       	adc	r25, r26
    18c6:	a1 1d       	adc	r26, r1
    18c8:	68 0f       	add	r22, r24
    18ca:	79 1f       	adc	r23, r25
    18cc:	8a 1f       	adc	r24, r26
    18ce:	91 1d       	adc	r25, r1
    18d0:	a1 1d       	adc	r26, r1
    18d2:	6a 0f       	add	r22, r26
    18d4:	71 1d       	adc	r23, r1
    18d6:	81 1d       	adc	r24, r1
    18d8:	91 1d       	adc	r25, r1
    18da:	a1 1d       	adc	r26, r1
    18dc:	20 d0       	rcall	.+64     	; 0x191e <__ultoa_invert+0x84>
    18de:	09 f4       	brne	.+2      	; 0x18e2 <__ultoa_invert+0x48>
    18e0:	68 94       	set
    18e2:	3f 91       	pop	r19
    18e4:	2a e0       	ldi	r18, 0x0A	; 10
    18e6:	26 9f       	mul	r18, r22
    18e8:	11 24       	eor	r1, r1
    18ea:	30 19       	sub	r19, r0
    18ec:	30 5d       	subi	r19, 0xD0	; 208
    18ee:	31 93       	st	Z+, r19
    18f0:	de f6       	brtc	.-74     	; 0x18a8 <__ultoa_invert+0xe>
    18f2:	cf 01       	movw	r24, r30
    18f4:	08 95       	ret
    18f6:	46 2f       	mov	r20, r22
    18f8:	47 70       	andi	r20, 0x07	; 7
    18fa:	40 5d       	subi	r20, 0xD0	; 208
    18fc:	41 93       	st	Z+, r20
    18fe:	b3 e0       	ldi	r27, 0x03	; 3
    1900:	0f d0       	rcall	.+30     	; 0x1920 <__ultoa_invert+0x86>
    1902:	c9 f7       	brne	.-14     	; 0x18f6 <__ultoa_invert+0x5c>
    1904:	f6 cf       	rjmp	.-20     	; 0x18f2 <__ultoa_invert+0x58>
    1906:	46 2f       	mov	r20, r22
    1908:	4f 70       	andi	r20, 0x0F	; 15
    190a:	40 5d       	subi	r20, 0xD0	; 208
    190c:	4a 33       	cpi	r20, 0x3A	; 58
    190e:	18 f0       	brcs	.+6      	; 0x1916 <__ultoa_invert+0x7c>
    1910:	49 5d       	subi	r20, 0xD9	; 217
    1912:	31 fd       	sbrc	r19, 1
    1914:	40 52       	subi	r20, 0x20	; 32
    1916:	41 93       	st	Z+, r20
    1918:	02 d0       	rcall	.+4      	; 0x191e <__ultoa_invert+0x84>
    191a:	a9 f7       	brne	.-22     	; 0x1906 <__ultoa_invert+0x6c>
    191c:	ea cf       	rjmp	.-44     	; 0x18f2 <__ultoa_invert+0x58>
    191e:	b4 e0       	ldi	r27, 0x04	; 4
    1920:	a6 95       	lsr	r26
    1922:	97 95       	ror	r25
    1924:	87 95       	ror	r24
    1926:	77 95       	ror	r23
    1928:	67 95       	ror	r22
    192a:	ba 95       	dec	r27
    192c:	c9 f7       	brne	.-14     	; 0x1920 <__ultoa_invert+0x86>
    192e:	00 97       	sbiw	r24, 0x00	; 0
    1930:	61 05       	cpc	r22, r1
    1932:	71 05       	cpc	r23, r1
    1934:	08 95       	ret
    1936:	9b 01       	movw	r18, r22
    1938:	ac 01       	movw	r20, r24
    193a:	0a 2e       	mov	r0, r26
    193c:	06 94       	lsr	r0
    193e:	57 95       	ror	r21
    1940:	47 95       	ror	r20
    1942:	37 95       	ror	r19
    1944:	27 95       	ror	r18
    1946:	ba 95       	dec	r27
    1948:	c9 f7       	brne	.-14     	; 0x193c <__ultoa_invert+0xa2>
    194a:	62 0f       	add	r22, r18
    194c:	73 1f       	adc	r23, r19
    194e:	84 1f       	adc	r24, r20
    1950:	95 1f       	adc	r25, r21
    1952:	a0 1d       	adc	r26, r0
    1954:	08 95       	ret

00001956 <_exit>:
    1956:	f8 94       	cli

00001958 <__stop_program>:
    1958:	ff cf       	rjmp	.-2      	; 0x1958 <__stop_program>
