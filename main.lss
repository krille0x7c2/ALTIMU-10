
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  0000150a  0000159e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000150a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800100  00800100  0000159e  2**0
                  ALLOC
  3 .stab         00002220  00000000  00000000  000015a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001321  00000000  00000000  000037c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000027  00000000  00000000  00004ae1  2**0
                  CONTENTS, READONLY
  6 .debug_info   000005f4  00000000  00000000  00004b08  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005a2  00000000  00000000  000050fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001d  00000000  00000000  0000569e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  000056bb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__ctors_end>
       4:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
       8:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
       c:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      10:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      14:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      18:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      1c:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      20:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      24:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      28:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      2c:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      30:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      34:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      38:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      3c:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      40:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      44:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      48:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      4c:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      50:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      54:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      58:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      5c:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      60:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      64:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	6e 61       	ori	r22, 0x1E	; 30
      6a:	6e 00       	.word	0x006e	; ????

0000006c <__c.2240>:
      6c:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      7c:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      8c:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      9c:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
      ac:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
      bc:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
      cc:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
      dc:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
      ec:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
      fc:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     10c:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     11c:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     12c:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     13c:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     14c:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     15c:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000016a <__ctors_end>:
     16a:	11 24       	eor	r1, r1
     16c:	1f be       	out	0x3f, r1	; 63
     16e:	cf ef       	ldi	r28, 0xFF	; 255
     170:	d8 e0       	ldi	r29, 0x08	; 8
     172:	de bf       	out	0x3e, r29	; 62
     174:	cd bf       	out	0x3d, r28	; 61

00000176 <__do_clear_bss>:
     176:	11 e0       	ldi	r17, 0x01	; 1
     178:	a0 e0       	ldi	r26, 0x00	; 0
     17a:	b1 e0       	ldi	r27, 0x01	; 1
     17c:	01 c0       	rjmp	.+2      	; 0x180 <.do_clear_bss_start>

0000017e <.do_clear_bss_loop>:
     17e:	1d 92       	st	X+, r1

00000180 <.do_clear_bss_start>:
     180:	a6 30       	cpi	r26, 0x06	; 6
     182:	b1 07       	cpc	r27, r17
     184:	e1 f7       	brne	.-8      	; 0x17e <.do_clear_bss_loop>
     186:	0e 94 5d 03 	call	0x6ba	; 0x6ba <main>
     18a:	0c 94 83 0a 	jmp	0x1506	; 0x1506 <_exit>

0000018e <__bad_interrupt>:
     18e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000192 <USART0Init>:
#include "usart.h"
#include <avr/io.h>

void USART0Init(void) {
    // Set baud rate
    UBRR0H = (uint8_t) (UBRR_VALUE >> 8);
     192:	10 92 c5 00 	sts	0x00C5, r1
    UBRR0L = (uint8_t) UBRR_VALUE;
     196:	87 e6       	ldi	r24, 0x67	; 103
     198:	80 93 c4 00 	sts	0x00C4, r24
    // Set frame format to 8 data bits, no parity, 1 stop bit
    UCSR0C |= (1 << UCSZ01) | (1 << UCSZ00);
     19c:	e2 ec       	ldi	r30, 0xC2	; 194
     19e:	f0 e0       	ldi	r31, 0x00	; 0
     1a0:	80 81       	ld	r24, Z
     1a2:	86 60       	ori	r24, 0x06	; 6
     1a4:	80 83       	st	Z, r24
    //enable transmission and reception
    UCSR0B |= (1 << RXEN0) | (1 << TXEN0);
     1a6:	e1 ec       	ldi	r30, 0xC1	; 193
     1a8:	f0 e0       	ldi	r31, 0x00	; 0
     1aa:	80 81       	ld	r24, Z
     1ac:	88 61       	ori	r24, 0x18	; 24
     1ae:	80 83       	st	Z, r24
     1b0:	08 95       	ret

000001b2 <USART0SendByte>:
}

int USART0SendByte(char u8Data, FILE *stream) {
     1b2:	cf 93       	push	r28
     1b4:	c8 2f       	mov	r28, r24
    if (u8Data == '\n') {
     1b6:	8a 30       	cpi	r24, 0x0A	; 10
     1b8:	29 f4       	brne	.+10     	; 0x1c4 <USART0SendByte+0x12>
        USART0SendByte('\r', 0);
     1ba:	60 e0       	ldi	r22, 0x00	; 0
     1bc:	70 e0       	ldi	r23, 0x00	; 0
     1be:	8d e0       	ldi	r24, 0x0D	; 13
     1c0:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <USART0SendByte>
    }
    //wait while previous byte is completed
    while (!(UCSR0A & (1 << UDRE0))) {
     1c4:	80 91 c0 00 	lds	r24, 0x00C0
     1c8:	85 ff       	sbrs	r24, 5
     1ca:	fc cf       	rjmp	.-8      	; 0x1c4 <USART0SendByte+0x12>
    };
    // Transmit data
    UDR0 = u8Data;
     1cc:	c0 93 c6 00 	sts	0x00C6, r28
    return 0;
}
     1d0:	80 e0       	ldi	r24, 0x00	; 0
     1d2:	90 e0       	ldi	r25, 0x00	; 0
     1d4:	cf 91       	pop	r28
     1d6:	08 95       	ret

000001d8 <USART0ReceiveByte>:
int USART0ReceiveByte(FILE *stream) {
     1d8:	cf 93       	push	r28
    uint8_t u8Data;
    // Wait for byte to be received
    while (!(UCSR0A & (1 << RXC0))) {
     1da:	20 91 c0 00 	lds	r18, 0x00C0
     1de:	27 ff       	sbrs	r18, 7
     1e0:	fc cf       	rjmp	.-8      	; 0x1da <USART0ReceiveByte+0x2>
    };
    u8Data = UDR0;
     1e2:	c0 91 c6 00 	lds	r28, 0x00C6
    //echo input data
    USART0SendByte(u8Data, stream);
     1e6:	bc 01       	movw	r22, r24
     1e8:	8c 2f       	mov	r24, r28
     1ea:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <USART0SendByte>
    // Return received data
    return u8Data;
}
     1ee:	8c 2f       	mov	r24, r28
     1f0:	90 e0       	ldi	r25, 0x00	; 0
     1f2:	cf 91       	pop	r28
     1f4:	08 95       	ret

000001f6 <TWIInit>:
#include <compat/twi.h>
#include <util/delay.h>
void TWIInit(void)
{
    //set SCL to 400kHz
    TWSR = 0x00;
     1f6:	10 92 b9 00 	sts	0x00B9, r1
    TWBR = 0x0C;
     1fa:	8c e0       	ldi	r24, 0x0C	; 12
     1fc:	80 93 b8 00 	sts	0x00B8, r24
    //enable TWI
    TWCR = (1<<TWEN);
     200:	84 e0       	ldi	r24, 0x04	; 4
     202:	80 93 bc 00 	sts	0x00BC, r24
     206:	08 95       	ret

00000208 <i2c_start>:
uint8_t i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     208:	94 ea       	ldi	r25, 0xA4	; 164
     20a:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
     20e:	90 91 bc 00 	lds	r25, 0x00BC
     212:	97 ff       	sbrs	r25, 7
     214:	fc cf       	rjmp	.-8      	; 0x20e <i2c_start+0x6>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
     216:	90 91 b9 00 	lds	r25, 0x00B9
     21a:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
     21c:	98 30       	cpi	r25, 0x08	; 8
     21e:	21 f0       	breq	.+8      	; 0x228 <i2c_start+0x20>
     220:	90 31       	cpi	r25, 0x10	; 16
     222:	11 f0       	breq	.+4      	; 0x228 <i2c_start+0x20>
     224:	81 e0       	ldi	r24, 0x01	; 1
     226:	08 95       	ret

	// send device address
	TWDR = address;
     228:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
     22c:	84 e8       	ldi	r24, 0x84	; 132
     22e:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
     232:	80 91 bc 00 	lds	r24, 0x00BC
     236:	87 ff       	sbrs	r24, 7
     238:	fc cf       	rjmp	.-8      	; 0x232 <i2c_start+0x2a>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
     23a:	80 91 b9 00 	lds	r24, 0x00B9
     23e:	88 7f       	andi	r24, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
     240:	88 31       	cpi	r24, 0x18	; 24
     242:	11 f0       	breq	.+4      	; 0x248 <i2c_start+0x40>
     244:	80 34       	cpi	r24, 0x40	; 64
     246:	71 f7       	brne	.-36     	; 0x224 <i2c_start+0x1c>

	return 0;
     248:	80 e0       	ldi	r24, 0x00	; 0

}
     24a:	08 95       	ret

0000024c <i2c_start_wait>:


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     24c:	24 ea       	ldi	r18, 0xA4	; 164
    	twst = TW_STATUS & 0xF8;
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
    	TWCR = (1<<TWINT) | (1<<TWEN);
     24e:	34 e8       	ldi	r19, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     250:	44 e9       	ldi	r20, 0x94	; 148


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     252:	20 93 bc 00 	sts	0x00BC, r18
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
     256:	90 91 bc 00 	lds	r25, 0x00BC
     25a:	97 ff       	sbrs	r25, 7
     25c:	fc cf       	rjmp	.-8      	; 0x256 <i2c_start_wait+0xa>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
     25e:	90 91 b9 00 	lds	r25, 0x00B9
     262:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
     264:	98 30       	cpi	r25, 0x08	; 8
     266:	11 f0       	breq	.+4      	; 0x26c <i2c_start_wait+0x20>
     268:	90 31       	cpi	r25, 0x10	; 16
     26a:	99 f7       	brne	.-26     	; 0x252 <i2c_start_wait+0x6>
    
    	// send device address
    	TWDR = address;
     26c:	80 93 bb 00 	sts	0x00BB, r24
    	TWCR = (1<<TWINT) | (1<<TWEN);
     270:	30 93 bc 00 	sts	0x00BC, r19
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
     274:	90 91 bc 00 	lds	r25, 0x00BC
     278:	97 ff       	sbrs	r25, 7
     27a:	fc cf       	rjmp	.-8      	; 0x274 <i2c_start_wait+0x28>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
     27c:	90 91 b9 00 	lds	r25, 0x00B9
     280:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
     282:	90 32       	cpi	r25, 0x20	; 32
     284:	11 f0       	breq	.+4      	; 0x28a <i2c_start_wait+0x3e>
     286:	98 35       	cpi	r25, 0x58	; 88
     288:	39 f4       	brne	.+14     	; 0x298 <i2c_start_wait+0x4c>
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     28a:	40 93 bc 00 	sts	0x00BC, r20
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
     28e:	90 91 bc 00 	lds	r25, 0x00BC
     292:	94 fd       	sbrc	r25, 4
     294:	fc cf       	rjmp	.-8      	; 0x28e <i2c_start_wait+0x42>
     296:	dd cf       	rjmp	.-70     	; 0x252 <i2c_start_wait+0x6>
     298:	08 95       	ret

0000029a <i2c_rep_start>:
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
uint8_t i2c_rep_start(unsigned char address)
{
    return i2c_start( address );
     29a:	0c 94 04 01 	jmp	0x208	; 0x208 <i2c_start>

0000029e <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     29e:	84 e9       	ldi	r24, 0x94	; 148
     2a0:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
     2a4:	80 91 bc 00 	lds	r24, 0x00BC
     2a8:	84 fd       	sbrc	r24, 4
     2aa:	fc cf       	rjmp	.-8      	; 0x2a4 <i2c_stop+0x6>

}
     2ac:	08 95       	ret

000002ae <i2c_write>:
uint8_t i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
     2ae:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
     2b2:	84 e8       	ldi	r24, 0x84	; 132
     2b4:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
     2b8:	80 91 bc 00 	lds	r24, 0x00BC
     2bc:	87 ff       	sbrs	r24, 7
     2be:	fc cf       	rjmp	.-8      	; 0x2b8 <i2c_write+0xa>

	// check value of TWI Status Register. Mask prescaler bits only need the top 5 bits
	twst = TW_STATUS & 0xF8;
     2c0:	90 91 b9 00 	lds	r25, 0x00B9
     2c4:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
     2c6:	81 e0       	ldi	r24, 0x01	; 1
     2c8:	98 32       	cpi	r25, 0x28	; 40
     2ca:	09 f4       	brne	.+2      	; 0x2ce <i2c_write+0x20>
     2cc:	80 e0       	ldi	r24, 0x00	; 0
	return 0;

}
     2ce:	08 95       	ret

000002d0 <i2c_readAck>:
 
 Return:  byte read from I2C device
*************************************************************************/
uint8_t i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
     2d0:	84 ec       	ldi	r24, 0xC4	; 196
     2d2:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));    
     2d6:	80 91 bc 00 	lds	r24, 0x00BC
     2da:	87 ff       	sbrs	r24, 7
     2dc:	fc cf       	rjmp	.-8      	; 0x2d6 <i2c_readAck+0x6>

    return TWDR;
     2de:	80 91 bb 00 	lds	r24, 0x00BB

}
     2e2:	08 95       	ret

000002e4 <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
uint8_t i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
     2e4:	84 e8       	ldi	r24, 0x84	; 132
     2e6:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
     2ea:	80 91 bc 00 	lds	r24, 0x00BC
     2ee:	87 ff       	sbrs	r24, 7
     2f0:	fc cf       	rjmp	.-8      	; 0x2ea <i2c_readNak+0x6>
	
    return TWDR;
     2f2:	80 91 bb 00 	lds	r24, 0x00BB

     2f6:	08 95       	ret

000002f8 <read_temp_celsius>:
 
 Return: float value in Celsius
 
*************************************************************************/

float read_temp_celsius(void) {
     2f8:	cf 93       	push	r28
    if (i2c_start(BAR_SLAVE_ADDRESS << 1) == 0) {
     2fa:	8a eb       	ldi	r24, 0xBA	; 186
     2fc:	0e 94 04 01 	call	0x208	; 0x208 <i2c_start>
     300:	88 23       	and	r24, r24
     302:	29 f0       	breq	.+10     	; 0x30e <read_temp_celsius+0x16>
            return (45.5 + ((float) temp) / 480); //To Celsius

        }

    }
    return 1;
     304:	60 e0       	ldi	r22, 0x00	; 0
     306:	70 e0       	ldi	r23, 0x00	; 0
     308:	80 e8       	ldi	r24, 0x80	; 128
     30a:	9f e3       	ldi	r25, 0x3F	; 63
     30c:	22 c0       	rjmp	.+68     	; 0x352 <read_temp_celsius+0x5a>
 
*************************************************************************/

float read_temp_celsius(void) {
    if (i2c_start(BAR_SLAVE_ADDRESS << 1) == 0) {
        i2c_write(BAR_TEMP_OUT_L | (1 << 7));
     30e:	8b ea       	ldi	r24, 0xAB	; 171
     310:	0e 94 57 01 	call	0x2ae	; 0x2ae <i2c_write>

        if (i2c_rep_start(((uint8_t) BAR_SLAVE_ADDRESS << 1) | 1) == 0) {
     314:	8b eb       	ldi	r24, 0xBB	; 187
     316:	0e 94 4d 01 	call	0x29a	; 0x29a <i2c_rep_start>
     31a:	81 11       	cpse	r24, r1
     31c:	f3 cf       	rjmp	.-26     	; 0x304 <read_temp_celsius+0xc>
            uint8_t tl = i2c_read(ACK);
     31e:	0e 94 68 01 	call	0x2d0	; 0x2d0 <i2c_readAck>
     322:	c8 2f       	mov	r28, r24
            uint8_t th = i2c_read(NAK);
     324:	0e 94 72 01 	call	0x2e4	; 0x2e4 <i2c_readNak>
            int16_t temp = (int16_t) (th << 8 | tl);
     328:	6c 2f       	mov	r22, r28
     32a:	70 e0       	ldi	r23, 0x00	; 0
     32c:	78 2b       	or	r23, r24
            return (45.5 + ((float) temp) / 480); //To Celsius
     32e:	88 27       	eor	r24, r24
     330:	77 fd       	sbrc	r23, 7
     332:	80 95       	com	r24
     334:	98 2f       	mov	r25, r24
     336:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <__floatsisf>
     33a:	20 e0       	ldi	r18, 0x00	; 0
     33c:	30 e0       	ldi	r19, 0x00	; 0
     33e:	40 ef       	ldi	r20, 0xF0	; 240
     340:	53 e4       	ldi	r21, 0x43	; 67
     342:	0e 94 6f 07 	call	0xede	; 0xede <__divsf3>
     346:	20 e0       	ldi	r18, 0x00	; 0
     348:	30 e0       	ldi	r19, 0x00	; 0
     34a:	46 e3       	ldi	r20, 0x36	; 54
     34c:	52 e4       	ldi	r21, 0x42	; 66
     34e:	0e 94 0b 07 	call	0xe16	; 0xe16 <__addsf3>

        }

    }
    return 1;
}/*read_temp_celsius*/
     352:	cf 91       	pop	r28
     354:	08 95       	ret

00000356 <read_pressure_hpa>:
 Read the pressure
 
 Return: float value in hpa
 
************************************************************************/
float read_pressure_hpa(void) {
     356:	0f 93       	push	r16
     358:	1f 93       	push	r17
     35a:	cf 93       	push	r28
     35c:	df 93       	push	r29
    if (i2c_start(BAR_SLAVE_ADDRESS << 1) == 0) {
     35e:	8a eb       	ldi	r24, 0xBA	; 186
     360:	0e 94 04 01 	call	0x208	; 0x208 <i2c_start>
     364:	88 23       	and	r24, r24
     366:	29 f0       	breq	.+10     	; 0x372 <read_pressure_hpa+0x1c>

            int32_t temp = (int32_t) (int8_t) ph << 16 | (uint16_t) pl << 8 | pxl;
            return ((float) temp / 4096);
        }
    }
    return 1;
     368:	60 e0       	ldi	r22, 0x00	; 0
     36a:	70 e0       	ldi	r23, 0x00	; 0
     36c:	80 e8       	ldi	r24, 0x80	; 128
     36e:	9f e3       	ldi	r25, 0x3F	; 63
     370:	2f c0       	rjmp	.+94     	; 0x3d0 <read_pressure_hpa+0x7a>
 Return: float value in hpa
 
************************************************************************/
float read_pressure_hpa(void) {
    if (i2c_start(BAR_SLAVE_ADDRESS << 1) == 0) {
        i2c_write(BAR_PRESS_POUT_XL | (1 << 7));
     372:	88 ea       	ldi	r24, 0xA8	; 168
     374:	0e 94 57 01 	call	0x2ae	; 0x2ae <i2c_write>

        if (i2c_rep_start(((uint8_t) BAR_SLAVE_ADDRESS << 1) | 1) == 0) {
     378:	8b eb       	ldi	r24, 0xBB	; 187
     37a:	0e 94 4d 01 	call	0x29a	; 0x29a <i2c_rep_start>
     37e:	81 11       	cpse	r24, r1
     380:	f3 cf       	rjmp	.-26     	; 0x368 <read_pressure_hpa+0x12>
            uint8_t pxl = i2c_read(ACK);
     382:	0e 94 68 01 	call	0x2d0	; 0x2d0 <i2c_readAck>
     386:	d8 2f       	mov	r29, r24
            uint8_t pl = i2c_read(ACK);
     388:	0e 94 68 01 	call	0x2d0	; 0x2d0 <i2c_readAck>
     38c:	c8 2f       	mov	r28, r24
            uint8_t ph = i2c_read(NAK);
     38e:	0e 94 72 01 	call	0x2e4	; 0x2e4 <i2c_readNak>

            int32_t temp = (int32_t) (int8_t) ph << 16 | (uint16_t) pl << 8 | pxl;
     392:	99 27       	eor	r25, r25
     394:	87 fd       	sbrc	r24, 7
     396:	90 95       	com	r25
     398:	a9 2f       	mov	r26, r25
     39a:	b9 2f       	mov	r27, r25
     39c:	9c 01       	movw	r18, r24
     39e:	11 27       	eor	r17, r17
     3a0:	00 27       	eor	r16, r16
     3a2:	4c 2f       	mov	r20, r28
     3a4:	50 e0       	ldi	r21, 0x00	; 0
     3a6:	54 2f       	mov	r21, r20
     3a8:	44 27       	eor	r20, r20
     3aa:	60 e0       	ldi	r22, 0x00	; 0
     3ac:	70 e0       	ldi	r23, 0x00	; 0
     3ae:	d9 01       	movw	r26, r18
     3b0:	c8 01       	movw	r24, r16
     3b2:	84 2b       	or	r24, r20
     3b4:	95 2b       	or	r25, r21
     3b6:	a6 2b       	or	r26, r22
     3b8:	b7 2b       	or	r27, r23
     3ba:	bc 01       	movw	r22, r24
     3bc:	cd 01       	movw	r24, r26
     3be:	6d 2b       	or	r22, r29
            return ((float) temp / 4096);
     3c0:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <__floatsisf>
     3c4:	20 e0       	ldi	r18, 0x00	; 0
     3c6:	30 e0       	ldi	r19, 0x00	; 0
     3c8:	40 e8       	ldi	r20, 0x80	; 128
     3ca:	59 e3       	ldi	r21, 0x39	; 57
     3cc:	0e 94 65 08 	call	0x10ca	; 0x10ca <__mulsf3>
        }
    }
    return 1;

}/*read_pressure_hpa*/
     3d0:	df 91       	pop	r29
     3d2:	cf 91       	pop	r28
     3d4:	1f 91       	pop	r17
     3d6:	0f 91       	pop	r16
     3d8:	08 95       	ret

000003da <init_bar>:
 Initialize the bar,, more info on the way
 
************************************************************************/

void init_bar(void) {
    write_to_reg(BAR_SLAVE_ADDRESS,BAR_CTRL_REG1, 0xB0);
     3da:	40 eb       	ldi	r20, 0xB0	; 176
     3dc:	60 e2       	ldi	r22, 0x20	; 32
     3de:	8d e5       	ldi	r24, 0x5D	; 93
     3e0:	0c 94 18 03 	jmp	0x630	; 0x630 <write_to_reg>

000003e4 <init_gyro>:
 
 *************************************************************************/

void init_gyro(void) {

    write_to_reg(GYRO_SLAVE_ADDRESS, GYRO_LOW_ODR, 0x00);
     3e4:	40 e0       	ldi	r20, 0x00	; 0
     3e6:	69 e3       	ldi	r22, 0x39	; 57
     3e8:	8b e6       	ldi	r24, 0x6B	; 107
     3ea:	0e 94 18 03 	call	0x630	; 0x630 <write_to_reg>
    write_to_reg(GYRO_SLAVE_ADDRESS, GYRO_CTRL4, 0x00);
     3ee:	40 e0       	ldi	r20, 0x00	; 0
     3f0:	63 e2       	ldi	r22, 0x23	; 35
     3f2:	8b e6       	ldi	r24, 0x6B	; 107
     3f4:	0e 94 18 03 	call	0x630	; 0x630 <write_to_reg>
    write_to_reg(GYRO_SLAVE_ADDRESS, GYRO_CTRL1, 0x6F);
     3f8:	4f e6       	ldi	r20, 0x6F	; 111
     3fa:	60 e2       	ldi	r22, 0x20	; 32
     3fc:	8b e6       	ldi	r24, 0x6B	; 107
     3fe:	0c 94 18 03 	jmp	0x630	; 0x630 <write_to_reg>

00000402 <read_gyro_values>:
 Read the raw values from all three axis. 16-bit resolution
 
 Input: Pointer to data structure, passed by reference.
 
 *************************************************************************/
void read_gyro_values(struct gyro_data *_gyro_data_) {
     402:	df 92       	push	r13
     404:	ef 92       	push	r14
     406:	ff 92       	push	r15
     408:	0f 93       	push	r16
     40a:	1f 93       	push	r17
     40c:	cf 93       	push	r28
     40e:	df 93       	push	r29
     410:	8c 01       	movw	r16, r24

    if (i2c_start(GYRO_SLAVE_ADDRESS << 1) == 0) {
     412:	86 ed       	ldi	r24, 0xD6	; 214
     414:	0e 94 04 01 	call	0x208	; 0x208 <i2c_start>
     418:	81 11       	cpse	r24, r1
     41a:	29 c0       	rjmp	.+82     	; 0x46e <read_gyro_values+0x6c>
        i2c_write(GYRO_OUT_X_L | (1 << 7)); //Auto increment registers by writing the MSB high
     41c:	88 ea       	ldi	r24, 0xA8	; 168
     41e:	0e 94 57 01 	call	0x2ae	; 0x2ae <i2c_write>

        if (i2c_rep_start(((uint8_t) GYRO_SLAVE_ADDRESS << 1) | 1) == 0) {
     422:	87 ed       	ldi	r24, 0xD7	; 215
     424:	0e 94 4d 01 	call	0x29a	; 0x29a <i2c_rep_start>
     428:	81 11       	cpse	r24, r1
     42a:	21 c0       	rjmp	.+66     	; 0x46e <read_gyro_values+0x6c>
            uint8_t xlg = i2c_read(ACK);
     42c:	0e 94 68 01 	call	0x2d0	; 0x2d0 <i2c_readAck>
     430:	f8 2e       	mov	r15, r24
            uint8_t xhg = i2c_read(ACK);
     432:	0e 94 68 01 	call	0x2d0	; 0x2d0 <i2c_readAck>
     436:	d8 2e       	mov	r13, r24

            uint8_t ylg = i2c_read(ACK);
     438:	0e 94 68 01 	call	0x2d0	; 0x2d0 <i2c_readAck>
     43c:	d8 2f       	mov	r29, r24
            uint8_t yhg = i2c_read(ACK);
     43e:	0e 94 68 01 	call	0x2d0	; 0x2d0 <i2c_readAck>
     442:	e8 2e       	mov	r14, r24

            uint8_t zlg = i2c_read(ACK);
     444:	0e 94 68 01 	call	0x2d0	; 0x2d0 <i2c_readAck>
     448:	c8 2f       	mov	r28, r24
            uint8_t zhg = i2c_read(NAK);
     44a:	0e 94 72 01 	call	0x2e4	; 0x2e4 <i2c_readNak>

            _gyro_data_->x = (int16_t) (xhg << 8 | xlg);
     44e:	2f 2d       	mov	r18, r15
     450:	30 e0       	ldi	r19, 0x00	; 0
     452:	3d 29       	or	r19, r13
     454:	f8 01       	movw	r30, r16
     456:	31 83       	std	Z+1, r19	; 0x01
     458:	20 83       	st	Z, r18
            _gyro_data_->y = (int16_t) (yhg << 8 | ylg);
     45a:	2d 2f       	mov	r18, r29
     45c:	30 e0       	ldi	r19, 0x00	; 0
     45e:	3e 29       	or	r19, r14
     460:	33 83       	std	Z+3, r19	; 0x03
     462:	22 83       	std	Z+2, r18	; 0x02
            _gyro_data_->z = (int16_t) (zhg << 8 | zlg);
     464:	2c 2f       	mov	r18, r28
     466:	30 e0       	ldi	r19, 0x00	; 0
     468:	38 2b       	or	r19, r24
     46a:	35 83       	std	Z+5, r19	; 0x05
     46c:	24 83       	std	Z+4, r18	; 0x04

        }
    }
}/*read_gyro_values*/
     46e:	df 91       	pop	r29
     470:	cf 91       	pop	r28
     472:	1f 91       	pop	r17
     474:	0f 91       	pop	r16
     476:	ff 90       	pop	r15
     478:	ef 90       	pop	r14
     47a:	df 90       	pop	r13
     47c:	08 95       	ret

0000047e <read_gyro_values_dps>:

void read_gyro_values_dps(struct gyro_data *_gyro_data_, struct gyro_data_dps *gyro_data_dps) {
     47e:	0f 93       	push	r16
     480:	1f 93       	push	r17
     482:	cf 93       	push	r28
     484:	df 93       	push	r29
     486:	8c 01       	movw	r16, r24
     488:	eb 01       	movw	r28, r22
    gyro_data_dps->x=(float)_gyro_data_->x *.00875;
     48a:	fc 01       	movw	r30, r24
     48c:	60 81       	ld	r22, Z
     48e:	71 81       	ldd	r23, Z+1	; 0x01
     490:	88 27       	eor	r24, r24
     492:	77 fd       	sbrc	r23, 7
     494:	80 95       	com	r24
     496:	98 2f       	mov	r25, r24
     498:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <__floatsisf>
     49c:	29 e2       	ldi	r18, 0x29	; 41
     49e:	3c e5       	ldi	r19, 0x5C	; 92
     4a0:	4f e0       	ldi	r20, 0x0F	; 15
     4a2:	5c e3       	ldi	r21, 0x3C	; 60
     4a4:	0e 94 65 08 	call	0x10ca	; 0x10ca <__mulsf3>
     4a8:	68 83       	st	Y, r22
     4aa:	79 83       	std	Y+1, r23	; 0x01
     4ac:	8a 83       	std	Y+2, r24	; 0x02
     4ae:	9b 83       	std	Y+3, r25	; 0x03
    gyro_data_dps->y=(float)_gyro_data_->y *.00875;
     4b0:	f8 01       	movw	r30, r16
     4b2:	62 81       	ldd	r22, Z+2	; 0x02
     4b4:	73 81       	ldd	r23, Z+3	; 0x03
     4b6:	88 27       	eor	r24, r24
     4b8:	77 fd       	sbrc	r23, 7
     4ba:	80 95       	com	r24
     4bc:	98 2f       	mov	r25, r24
     4be:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <__floatsisf>
     4c2:	29 e2       	ldi	r18, 0x29	; 41
     4c4:	3c e5       	ldi	r19, 0x5C	; 92
     4c6:	4f e0       	ldi	r20, 0x0F	; 15
     4c8:	5c e3       	ldi	r21, 0x3C	; 60
     4ca:	0e 94 65 08 	call	0x10ca	; 0x10ca <__mulsf3>
     4ce:	6c 83       	std	Y+4, r22	; 0x04
     4d0:	7d 83       	std	Y+5, r23	; 0x05
     4d2:	8e 83       	std	Y+6, r24	; 0x06
     4d4:	9f 83       	std	Y+7, r25	; 0x07
    gyro_data_dps->z=(float)_gyro_data_->z *.00875;
     4d6:	f8 01       	movw	r30, r16
     4d8:	64 81       	ldd	r22, Z+4	; 0x04
     4da:	75 81       	ldd	r23, Z+5	; 0x05
     4dc:	88 27       	eor	r24, r24
     4de:	77 fd       	sbrc	r23, 7
     4e0:	80 95       	com	r24
     4e2:	98 2f       	mov	r25, r24
     4e4:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <__floatsisf>
     4e8:	29 e2       	ldi	r18, 0x29	; 41
     4ea:	3c e5       	ldi	r19, 0x5C	; 92
     4ec:	4f e0       	ldi	r20, 0x0F	; 15
     4ee:	5c e3       	ldi	r21, 0x3C	; 60
     4f0:	0e 94 65 08 	call	0x10ca	; 0x10ca <__mulsf3>
     4f4:	68 87       	std	Y+8, r22	; 0x08
     4f6:	79 87       	std	Y+9, r23	; 0x09
     4f8:	8a 87       	std	Y+10, r24	; 0x0a
     4fa:	9b 87       	std	Y+11, r25	; 0x0b

}/*read_gyro_values_dps*/
     4fc:	df 91       	pop	r29
     4fe:	cf 91       	pop	r28
     500:	1f 91       	pop	r17
     502:	0f 91       	pop	r16
     504:	08 95       	ret

00000506 <init_acc>:
 * (+/- 2 g full scale)
 * (50 Hz ODR); AZEN = AYEN = AXEN = 1 (all axes enabled)
 
 *************************************************************************/
void init_acc(void) {
    write_to_reg(ACC_MAG_SLAVE_ADDRESS, ACC_MAG_CTRL2, 0x00);
     506:	40 e0       	ldi	r20, 0x00	; 0
     508:	61 e2       	ldi	r22, 0x21	; 33
     50a:	8d e1       	ldi	r24, 0x1D	; 29
     50c:	0e 94 18 03 	call	0x630	; 0x630 <write_to_reg>
    write_to_reg(ACC_MAG_SLAVE_ADDRESS, ACC_MAG_CTRL1, 0x57);
     510:	47 e5       	ldi	r20, 0x57	; 87
     512:	60 e2       	ldi	r22, 0x20	; 32
     514:	8d e1       	ldi	r24, 0x1D	; 29
     516:	0c 94 18 03 	jmp	0x630	; 0x630 <write_to_reg>

0000051a <init_mag>:
 * (low power mode off); MD = 00 (continuous-conversion mode)
 
 *************************************************************************/

void init_mag(void) {
    write_to_reg(ACC_MAG_SLAVE_ADDRESS, ACC_MAG_CTRL5, 0x64);
     51a:	44 e6       	ldi	r20, 0x64	; 100
     51c:	64 e2       	ldi	r22, 0x24	; 36
     51e:	8d e1       	ldi	r24, 0x1D	; 29
     520:	0e 94 18 03 	call	0x630	; 0x630 <write_to_reg>
    write_to_reg(ACC_MAG_SLAVE_ADDRESS, ACC_MAG_CTRL6, 0x20);
     524:	40 e2       	ldi	r20, 0x20	; 32
     526:	65 e2       	ldi	r22, 0x25	; 37
     528:	8d e1       	ldi	r24, 0x1D	; 29
     52a:	0e 94 18 03 	call	0x630	; 0x630 <write_to_reg>
    write_to_reg(ACC_MAG_SLAVE_ADDRESS, ACC_MAG_CTRL7, 0x00);
     52e:	40 e0       	ldi	r20, 0x00	; 0
     530:	66 e2       	ldi	r22, 0x26	; 38
     532:	8d e1       	ldi	r24, 0x1D	; 29
     534:	0c 94 18 03 	jmp	0x630	; 0x630 <write_to_reg>

00000538 <read_acc_raw>:
/*************************************************************************
 * read_acc_raw values
 
 *************************************************************************/

void read_acc_raw(struct acc_val_raw *_acc_raw_) {
     538:	df 92       	push	r13
     53a:	ef 92       	push	r14
     53c:	ff 92       	push	r15
     53e:	0f 93       	push	r16
     540:	1f 93       	push	r17
     542:	cf 93       	push	r28
     544:	df 93       	push	r29
     546:	8c 01       	movw	r16, r24
    if (i2c_start(ACC_MAG_SLAVE_ADDRESS << 1) == 0) {
     548:	8a e3       	ldi	r24, 0x3A	; 58
     54a:	0e 94 04 01 	call	0x208	; 0x208 <i2c_start>
     54e:	81 11       	cpse	r24, r1
     550:	29 c0       	rjmp	.+82     	; 0x5a4 <read_acc_raw+0x6c>
        i2c_write(ACC_MAG_OUT_X_L_A | (1 << 7)); //Auto increment registers by writing the MSB high
     552:	88 ea       	ldi	r24, 0xA8	; 168
     554:	0e 94 57 01 	call	0x2ae	; 0x2ae <i2c_write>

        if (i2c_rep_start(((uint8_t) ACC_MAG_SLAVE_ADDRESS << 1) | 1) == 0) {
     558:	8b e3       	ldi	r24, 0x3B	; 59
     55a:	0e 94 4d 01 	call	0x29a	; 0x29a <i2c_rep_start>
     55e:	81 11       	cpse	r24, r1
     560:	21 c0       	rjmp	.+66     	; 0x5a4 <read_acc_raw+0x6c>
            uint8_t xlg = i2c_read(ACK);
     562:	0e 94 68 01 	call	0x2d0	; 0x2d0 <i2c_readAck>
     566:	f8 2e       	mov	r15, r24
            uint8_t xhg = i2c_read(ACK);
     568:	0e 94 68 01 	call	0x2d0	; 0x2d0 <i2c_readAck>
     56c:	d8 2e       	mov	r13, r24

            uint8_t ylg = i2c_read(ACK);
     56e:	0e 94 68 01 	call	0x2d0	; 0x2d0 <i2c_readAck>
     572:	d8 2f       	mov	r29, r24
            uint8_t yhg = i2c_read(ACK);
     574:	0e 94 68 01 	call	0x2d0	; 0x2d0 <i2c_readAck>
     578:	e8 2e       	mov	r14, r24

            uint8_t zlg = i2c_read(ACK);
     57a:	0e 94 68 01 	call	0x2d0	; 0x2d0 <i2c_readAck>
     57e:	c8 2f       	mov	r28, r24
            uint8_t zhg = i2c_read(NAK);
     580:	0e 94 72 01 	call	0x2e4	; 0x2e4 <i2c_readNak>

            _acc_raw_->x = (int16_t) (xhg << 8 | xlg);
     584:	2f 2d       	mov	r18, r15
     586:	30 e0       	ldi	r19, 0x00	; 0
     588:	3d 29       	or	r19, r13
     58a:	f8 01       	movw	r30, r16
     58c:	31 83       	std	Z+1, r19	; 0x01
     58e:	20 83       	st	Z, r18
            _acc_raw_->y = (int16_t) (yhg << 8 | ylg);
     590:	2d 2f       	mov	r18, r29
     592:	30 e0       	ldi	r19, 0x00	; 0
     594:	3e 29       	or	r19, r14
     596:	33 83       	std	Z+3, r19	; 0x03
     598:	22 83       	std	Z+2, r18	; 0x02
            _acc_raw_->z = (int16_t) (zhg << 8 | zlg);
     59a:	2c 2f       	mov	r18, r28
     59c:	30 e0       	ldi	r19, 0x00	; 0
     59e:	38 2b       	or	r19, r24
     5a0:	35 83       	std	Z+5, r19	; 0x05
     5a2:	24 83       	std	Z+4, r18	; 0x04

        }
    }

}/*read_acc_raw*/
     5a4:	df 91       	pop	r29
     5a6:	cf 91       	pop	r28
     5a8:	1f 91       	pop	r17
     5aa:	0f 91       	pop	r16
     5ac:	ff 90       	pop	r15
     5ae:	ef 90       	pop	r14
     5b0:	df 90       	pop	r13
     5b2:	08 95       	ret

000005b4 <read_mag_raw>:

void read_mag_raw(struct mag_val_raw *_mag_raw_) {
     5b4:	df 92       	push	r13
     5b6:	ef 92       	push	r14
     5b8:	ff 92       	push	r15
     5ba:	0f 93       	push	r16
     5bc:	1f 93       	push	r17
     5be:	cf 93       	push	r28
     5c0:	df 93       	push	r29
     5c2:	8c 01       	movw	r16, r24
    if (i2c_start(ACC_MAG_SLAVE_ADDRESS << 1) == 0) {
     5c4:	8a e3       	ldi	r24, 0x3A	; 58
     5c6:	0e 94 04 01 	call	0x208	; 0x208 <i2c_start>
     5ca:	81 11       	cpse	r24, r1
     5cc:	29 c0       	rjmp	.+82     	; 0x620 <read_mag_raw+0x6c>
        i2c_write(ACC_MAG_OUT_X_L_M | (1 << 7)); //Auto increment registers by writing the MSB high
     5ce:	88 e8       	ldi	r24, 0x88	; 136
     5d0:	0e 94 57 01 	call	0x2ae	; 0x2ae <i2c_write>

        if (i2c_rep_start(((uint8_t) ACC_MAG_SLAVE_ADDRESS << 1) | 1) == 0) {
     5d4:	8b e3       	ldi	r24, 0x3B	; 59
     5d6:	0e 94 4d 01 	call	0x29a	; 0x29a <i2c_rep_start>
     5da:	81 11       	cpse	r24, r1
     5dc:	21 c0       	rjmp	.+66     	; 0x620 <read_mag_raw+0x6c>
            uint8_t xlm = i2c_read(ACK);
     5de:	0e 94 68 01 	call	0x2d0	; 0x2d0 <i2c_readAck>
     5e2:	f8 2e       	mov	r15, r24
            uint8_t xhm = i2c_read(ACK);
     5e4:	0e 94 68 01 	call	0x2d0	; 0x2d0 <i2c_readAck>
     5e8:	d8 2e       	mov	r13, r24

            uint8_t ylm = i2c_read(ACK);
     5ea:	0e 94 68 01 	call	0x2d0	; 0x2d0 <i2c_readAck>
     5ee:	d8 2f       	mov	r29, r24
            uint8_t yhm = i2c_read(ACK);
     5f0:	0e 94 68 01 	call	0x2d0	; 0x2d0 <i2c_readAck>
     5f4:	e8 2e       	mov	r14, r24

            uint8_t zlm = i2c_read(ACK);
     5f6:	0e 94 68 01 	call	0x2d0	; 0x2d0 <i2c_readAck>
     5fa:	c8 2f       	mov	r28, r24
            uint8_t zhm = i2c_read(NAK);
     5fc:	0e 94 72 01 	call	0x2e4	; 0x2e4 <i2c_readNak>

            _mag_raw_->x = (int16_t) (xhm << 8 | xlm);
     600:	2f 2d       	mov	r18, r15
     602:	30 e0       	ldi	r19, 0x00	; 0
     604:	3d 29       	or	r19, r13
     606:	f8 01       	movw	r30, r16
     608:	31 83       	std	Z+1, r19	; 0x01
     60a:	20 83       	st	Z, r18
            _mag_raw_->y = (int16_t) (yhm << 8 | ylm);
     60c:	2d 2f       	mov	r18, r29
     60e:	30 e0       	ldi	r19, 0x00	; 0
     610:	3e 29       	or	r19, r14
     612:	33 83       	std	Z+3, r19	; 0x03
     614:	22 83       	std	Z+2, r18	; 0x02
            _mag_raw_->z = (int16_t) (zhm << 8 | zlm);
     616:	2c 2f       	mov	r18, r28
     618:	30 e0       	ldi	r19, 0x00	; 0
     61a:	38 2b       	or	r19, r24
     61c:	35 83       	std	Z+5, r19	; 0x05
     61e:	24 83       	std	Z+4, r18	; 0x04

        }
    }

     620:	df 91       	pop	r29
     622:	cf 91       	pop	r28
     624:	1f 91       	pop	r17
     626:	0f 91       	pop	r16
     628:	ff 90       	pop	r15
     62a:	ef 90       	pop	r14
     62c:	df 90       	pop	r13
     62e:	08 95       	ret

00000630 <write_to_reg>:
 Return: 0 if success
         1 if fail
 
*************************************************************************/

uint8_t write_to_reg(unsigned char address_slave,unsigned char reg_slave, uint8_t data){
     630:	0f 93       	push	r16
     632:	1f 93       	push	r17
     634:	cf 93       	push	r28
     636:	df 93       	push	r29
     638:	1f 92       	push	r1
     63a:	cd b7       	in	r28, 0x3d	; 61
     63c:	de b7       	in	r29, 0x3e	; 62
     63e:	04 2f       	mov	r16, r20
     if (i2c_start(address_slave << 1) == 0) {
     640:	88 0f       	add	r24, r24
     642:	69 83       	std	Y+1, r22	; 0x01
     644:	0e 94 04 01 	call	0x208	; 0x208 <i2c_start>
     648:	18 2f       	mov	r17, r24
     64a:	69 81       	ldd	r22, Y+1	; 0x01
     64c:	81 11       	cpse	r24, r1
     64e:	09 c0       	rjmp	.+18     	; 0x662 <write_to_reg+0x32>
        i2c_write(reg_slave);
     650:	86 2f       	mov	r24, r22
     652:	0e 94 57 01 	call	0x2ae	; 0x2ae <i2c_write>
        i2c_write(data);
     656:	80 2f       	mov	r24, r16
     658:	0e 94 57 01 	call	0x2ae	; 0x2ae <i2c_write>
        i2c_stop();
     65c:	0e 94 4f 01 	call	0x29e	; 0x29e <i2c_stop>
        return 0;
     660:	01 c0       	rjmp	.+2      	; 0x664 <write_to_reg+0x34>
    } else {
        return 1;
     662:	11 e0       	ldi	r17, 0x01	; 1
    }
}/*write_to_reg*/
     664:	81 2f       	mov	r24, r17
     666:	0f 90       	pop	r0
     668:	df 91       	pop	r29
     66a:	cf 91       	pop	r28
     66c:	1f 91       	pop	r17
     66e:	0f 91       	pop	r16
     670:	08 95       	ret

00000672 <read_from_reg>:
     672:	1f 93       	push	r17
     674:	cf 93       	push	r28
     676:	df 93       	push	r29
     678:	1f 92       	push	r1
     67a:	cd b7       	in	r28, 0x3d	; 61
     67c:	de b7       	in	r29, 0x3e	; 62
     67e:	18 2f       	mov	r17, r24
     680:	88 0f       	add	r24, r24
     682:	69 83       	std	Y+1, r22	; 0x01
     684:	0e 94 04 01 	call	0x208	; 0x208 <i2c_start>
     688:	69 81       	ldd	r22, Y+1	; 0x01
     68a:	81 11       	cpse	r24, r1
     68c:	10 c0       	rjmp	.+32     	; 0x6ae <read_from_reg+0x3c>
     68e:	86 2f       	mov	r24, r22
     690:	0e 94 57 01 	call	0x2ae	; 0x2ae <i2c_write>
     694:	81 2f       	mov	r24, r17
     696:	88 0f       	add	r24, r24
     698:	81 60       	ori	r24, 0x01	; 1
     69a:	0e 94 4d 01 	call	0x29a	; 0x29a <i2c_rep_start>
     69e:	81 11       	cpse	r24, r1
     6a0:	06 c0       	rjmp	.+12     	; 0x6ae <read_from_reg+0x3c>
     6a2:	0f 90       	pop	r0
     6a4:	df 91       	pop	r29
     6a6:	cf 91       	pop	r28
     6a8:	1f 91       	pop	r17
     6aa:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <i2c_readNak>
     6ae:	81 e0       	ldi	r24, 0x01	; 1
     6b0:	0f 90       	pop	r0
     6b2:	df 91       	pop	r29
     6b4:	cf 91       	pop	r28
     6b6:	1f 91       	pop	r17
     6b8:	08 95       	ret

000006ba <main>:
 * 
 *  
 */


int main(void) {
     6ba:	cf 93       	push	r28
     6bc:	df 93       	push	r29
     6be:	cd b7       	in	r28, 0x3d	; 61
     6c0:	de b7       	in	r29, 0x3e	; 62
     6c2:	2e 97       	sbiw	r28, 0x0e	; 14
     6c4:	0f b6       	in	r0, 0x3f	; 63
     6c6:	f8 94       	cli
     6c8:	de bf       	out	0x3e, r29	; 62
     6ca:	0f be       	out	0x3f, r0	; 63
     6cc:	cd bf       	out	0x3d, r28	; 61
    USART0Init();
     6ce:	0e 94 c9 00 	call	0x192	; 0x192 <USART0Init>
    TWIInit();
     6d2:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <TWIInit>
    Val_dps val_dps;
    Acc_raw acc_raw;
    Mag_raw mag_raw;

    //Set stream pointer
    FILE usart0_str = FDEV_SETUP_STREAM(USART0SendByte, USART0ReceiveByte, _FDEV_SETUP_RW);
     6d6:	fe 01       	movw	r30, r28
     6d8:	31 96       	adiw	r30, 0x01	; 1
     6da:	8e e0       	ldi	r24, 0x0E	; 14
     6dc:	df 01       	movw	r26, r30
     6de:	1d 92       	st	X+, r1
     6e0:	8a 95       	dec	r24
     6e2:	e9 f7       	brne	.-6      	; 0x6de <main+0x24>
     6e4:	83 e0       	ldi	r24, 0x03	; 3
     6e6:	8c 83       	std	Y+4, r24	; 0x04
     6e8:	89 ed       	ldi	r24, 0xD9	; 217
     6ea:	90 e0       	ldi	r25, 0x00	; 0
     6ec:	9a 87       	std	Y+10, r25	; 0x0a
     6ee:	89 87       	std	Y+9, r24	; 0x09
     6f0:	8c ee       	ldi	r24, 0xEC	; 236
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	9c 87       	std	Y+12, r25	; 0x0c
     6f6:	8b 87       	std	Y+11, r24	; 0x0b
    //assign our stream to standart I/O streams, cause why re-invent the wheel? Great for debuging :-)
    stdin = stdout = &usart0_str;
     6f8:	f0 93 03 01 	sts	0x0103, r31
     6fc:	e0 93 02 01 	sts	0x0102, r30
     700:	f0 93 01 01 	sts	0x0101, r31
     704:	e0 93 00 01 	sts	0x0100, r30
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     708:	bf ef       	ldi	r27, 0xFF	; 255
     70a:	25 ea       	ldi	r18, 0xA5	; 165
     70c:	8e e0       	ldi	r24, 0x0E	; 14
     70e:	b1 50       	subi	r27, 0x01	; 1
     710:	20 40       	sbci	r18, 0x00	; 0
     712:	80 40       	sbci	r24, 0x00	; 0
     714:	e1 f7       	brne	.-8      	; 0x70e <main+0x54>
     716:	00 c0       	rjmp	.+0      	; 0x718 <main+0x5e>
     718:	00 00       	nop
     71a:	f6 cf       	rjmp	.-20     	; 0x708 <main+0x4e>

0000071c <vfprintf>:
     71c:	a3 e1       	ldi	r26, 0x13	; 19
     71e:	b0 e0       	ldi	r27, 0x00	; 0
     720:	e4 e9       	ldi	r30, 0x94	; 148
     722:	f3 e0       	ldi	r31, 0x03	; 3
     724:	0c 94 c8 08 	jmp	0x1190	; 0x1190 <__prologue_saves__>
     728:	6c 01       	movw	r12, r24
     72a:	4b 01       	movw	r8, r22
     72c:	2a 01       	movw	r4, r20
     72e:	fc 01       	movw	r30, r24
     730:	17 82       	std	Z+7, r1	; 0x07
     732:	16 82       	std	Z+6, r1	; 0x06
     734:	83 81       	ldd	r24, Z+3	; 0x03
     736:	81 ff       	sbrs	r24, 1
     738:	43 c3       	rjmp	.+1670   	; 0xdc0 <__stack+0x4c1>
     73a:	ae 01       	movw	r20, r28
     73c:	4f 5f       	subi	r20, 0xFF	; 255
     73e:	5f 4f       	sbci	r21, 0xFF	; 255
     740:	3a 01       	movw	r6, r20
     742:	f6 01       	movw	r30, r12
     744:	93 81       	ldd	r25, Z+3	; 0x03
     746:	f4 01       	movw	r30, r8
     748:	93 fd       	sbrc	r25, 3
     74a:	85 91       	lpm	r24, Z+
     74c:	93 ff       	sbrs	r25, 3
     74e:	81 91       	ld	r24, Z+
     750:	4f 01       	movw	r8, r30
     752:	88 23       	and	r24, r24
     754:	09 f4       	brne	.+2      	; 0x758 <vfprintf+0x3c>
     756:	30 c3       	rjmp	.+1632   	; 0xdb8 <__stack+0x4b9>
     758:	85 32       	cpi	r24, 0x25	; 37
     75a:	39 f4       	brne	.+14     	; 0x76a <vfprintf+0x4e>
     75c:	93 fd       	sbrc	r25, 3
     75e:	85 91       	lpm	r24, Z+
     760:	93 ff       	sbrs	r25, 3
     762:	81 91       	ld	r24, Z+
     764:	4f 01       	movw	r8, r30
     766:	85 32       	cpi	r24, 0x25	; 37
     768:	39 f4       	brne	.+14     	; 0x778 <vfprintf+0x5c>
     76a:	b6 01       	movw	r22, r12
     76c:	90 e0       	ldi	r25, 0x00	; 0
     76e:	0e 94 ed 09 	call	0x13da	; 0x13da <fputc>
     772:	52 01       	movw	r10, r4
     774:	25 01       	movw	r4, r10
     776:	e5 cf       	rjmp	.-54     	; 0x742 <vfprintf+0x26>
     778:	10 e0       	ldi	r17, 0x00	; 0
     77a:	f1 2c       	mov	r15, r1
     77c:	20 e0       	ldi	r18, 0x00	; 0
     77e:	20 32       	cpi	r18, 0x20	; 32
     780:	a0 f4       	brcc	.+40     	; 0x7aa <vfprintf+0x8e>
     782:	8b 32       	cpi	r24, 0x2B	; 43
     784:	69 f0       	breq	.+26     	; 0x7a0 <vfprintf+0x84>
     786:	30 f4       	brcc	.+12     	; 0x794 <vfprintf+0x78>
     788:	80 32       	cpi	r24, 0x20	; 32
     78a:	59 f0       	breq	.+22     	; 0x7a2 <vfprintf+0x86>
     78c:	83 32       	cpi	r24, 0x23	; 35
     78e:	69 f4       	brne	.+26     	; 0x7aa <vfprintf+0x8e>
     790:	20 61       	ori	r18, 0x10	; 16
     792:	2c c0       	rjmp	.+88     	; 0x7ec <vfprintf+0xd0>
     794:	8d 32       	cpi	r24, 0x2D	; 45
     796:	39 f0       	breq	.+14     	; 0x7a6 <vfprintf+0x8a>
     798:	80 33       	cpi	r24, 0x30	; 48
     79a:	39 f4       	brne	.+14     	; 0x7aa <vfprintf+0x8e>
     79c:	21 60       	ori	r18, 0x01	; 1
     79e:	26 c0       	rjmp	.+76     	; 0x7ec <vfprintf+0xd0>
     7a0:	22 60       	ori	r18, 0x02	; 2
     7a2:	24 60       	ori	r18, 0x04	; 4
     7a4:	23 c0       	rjmp	.+70     	; 0x7ec <vfprintf+0xd0>
     7a6:	28 60       	ori	r18, 0x08	; 8
     7a8:	21 c0       	rjmp	.+66     	; 0x7ec <vfprintf+0xd0>
     7aa:	27 fd       	sbrc	r18, 7
     7ac:	27 c0       	rjmp	.+78     	; 0x7fc <vfprintf+0xe0>
     7ae:	30 ed       	ldi	r19, 0xD0	; 208
     7b0:	38 0f       	add	r19, r24
     7b2:	3a 30       	cpi	r19, 0x0A	; 10
     7b4:	78 f4       	brcc	.+30     	; 0x7d4 <vfprintf+0xb8>
     7b6:	26 ff       	sbrs	r18, 6
     7b8:	06 c0       	rjmp	.+12     	; 0x7c6 <vfprintf+0xaa>
     7ba:	fa e0       	ldi	r31, 0x0A	; 10
     7bc:	1f 9f       	mul	r17, r31
     7be:	30 0d       	add	r19, r0
     7c0:	11 24       	eor	r1, r1
     7c2:	13 2f       	mov	r17, r19
     7c4:	13 c0       	rjmp	.+38     	; 0x7ec <vfprintf+0xd0>
     7c6:	4a e0       	ldi	r20, 0x0A	; 10
     7c8:	f4 9e       	mul	r15, r20
     7ca:	30 0d       	add	r19, r0
     7cc:	11 24       	eor	r1, r1
     7ce:	f3 2e       	mov	r15, r19
     7d0:	20 62       	ori	r18, 0x20	; 32
     7d2:	0c c0       	rjmp	.+24     	; 0x7ec <vfprintf+0xd0>
     7d4:	8e 32       	cpi	r24, 0x2E	; 46
     7d6:	21 f4       	brne	.+8      	; 0x7e0 <vfprintf+0xc4>
     7d8:	26 fd       	sbrc	r18, 6
     7da:	ee c2       	rjmp	.+1500   	; 0xdb8 <__stack+0x4b9>
     7dc:	20 64       	ori	r18, 0x40	; 64
     7de:	06 c0       	rjmp	.+12     	; 0x7ec <vfprintf+0xd0>
     7e0:	8c 36       	cpi	r24, 0x6C	; 108
     7e2:	11 f4       	brne	.+4      	; 0x7e8 <vfprintf+0xcc>
     7e4:	20 68       	ori	r18, 0x80	; 128
     7e6:	02 c0       	rjmp	.+4      	; 0x7ec <vfprintf+0xd0>
     7e8:	88 36       	cpi	r24, 0x68	; 104
     7ea:	41 f4       	brne	.+16     	; 0x7fc <vfprintf+0xe0>
     7ec:	f4 01       	movw	r30, r8
     7ee:	93 fd       	sbrc	r25, 3
     7f0:	85 91       	lpm	r24, Z+
     7f2:	93 ff       	sbrs	r25, 3
     7f4:	81 91       	ld	r24, Z+
     7f6:	4f 01       	movw	r8, r30
     7f8:	81 11       	cpse	r24, r1
     7fa:	c1 cf       	rjmp	.-126    	; 0x77e <vfprintf+0x62>
     7fc:	9b eb       	ldi	r25, 0xBB	; 187
     7fe:	98 0f       	add	r25, r24
     800:	93 30       	cpi	r25, 0x03	; 3
     802:	18 f4       	brcc	.+6      	; 0x80a <vfprintf+0xee>
     804:	20 61       	ori	r18, 0x10	; 16
     806:	80 5e       	subi	r24, 0xE0	; 224
     808:	06 c0       	rjmp	.+12     	; 0x816 <vfprintf+0xfa>
     80a:	9b e9       	ldi	r25, 0x9B	; 155
     80c:	98 0f       	add	r25, r24
     80e:	93 30       	cpi	r25, 0x03	; 3
     810:	08 f0       	brcs	.+2      	; 0x814 <vfprintf+0xf8>
     812:	71 c1       	rjmp	.+738    	; 0xaf6 <__stack+0x1f7>
     814:	2f 7e       	andi	r18, 0xEF	; 239
     816:	26 ff       	sbrs	r18, 6
     818:	16 e0       	ldi	r17, 0x06	; 6
     81a:	2f 73       	andi	r18, 0x3F	; 63
     81c:	32 2e       	mov	r3, r18
     81e:	85 36       	cpi	r24, 0x65	; 101
     820:	19 f4       	brne	.+6      	; 0x828 <vfprintf+0x10c>
     822:	20 64       	ori	r18, 0x40	; 64
     824:	32 2e       	mov	r3, r18
     826:	08 c0       	rjmp	.+16     	; 0x838 <vfprintf+0x11c>
     828:	86 36       	cpi	r24, 0x66	; 102
     82a:	21 f4       	brne	.+8      	; 0x834 <vfprintf+0x118>
     82c:	f2 2f       	mov	r31, r18
     82e:	f0 68       	ori	r31, 0x80	; 128
     830:	3f 2e       	mov	r3, r31
     832:	02 c0       	rjmp	.+4      	; 0x838 <vfprintf+0x11c>
     834:	11 11       	cpse	r17, r1
     836:	11 50       	subi	r17, 0x01	; 1
     838:	37 fe       	sbrs	r3, 7
     83a:	07 c0       	rjmp	.+14     	; 0x84a <vfprintf+0x12e>
     83c:	1c 33       	cpi	r17, 0x3C	; 60
     83e:	50 f4       	brcc	.+20     	; 0x854 <vfprintf+0x138>
     840:	ee 24       	eor	r14, r14
     842:	e3 94       	inc	r14
     844:	e1 0e       	add	r14, r17
     846:	27 e0       	ldi	r18, 0x07	; 7
     848:	0b c0       	rjmp	.+22     	; 0x860 <vfprintf+0x144>
     84a:	18 30       	cpi	r17, 0x08	; 8
     84c:	38 f0       	brcs	.+14     	; 0x85c <vfprintf+0x140>
     84e:	27 e0       	ldi	r18, 0x07	; 7
     850:	17 e0       	ldi	r17, 0x07	; 7
     852:	05 c0       	rjmp	.+10     	; 0x85e <vfprintf+0x142>
     854:	27 e0       	ldi	r18, 0x07	; 7
     856:	4c e3       	ldi	r20, 0x3C	; 60
     858:	e4 2e       	mov	r14, r20
     85a:	02 c0       	rjmp	.+4      	; 0x860 <vfprintf+0x144>
     85c:	21 2f       	mov	r18, r17
     85e:	e1 2c       	mov	r14, r1
     860:	52 01       	movw	r10, r4
     862:	44 e0       	ldi	r20, 0x04	; 4
     864:	a4 0e       	add	r10, r20
     866:	b1 1c       	adc	r11, r1
     868:	f2 01       	movw	r30, r4
     86a:	60 81       	ld	r22, Z
     86c:	71 81       	ldd	r23, Z+1	; 0x01
     86e:	82 81       	ldd	r24, Z+2	; 0x02
     870:	93 81       	ldd	r25, Z+3	; 0x03
     872:	0e 2d       	mov	r16, r14
     874:	a3 01       	movw	r20, r6
     876:	0e 94 ff 08 	call	0x11fe	; 0x11fe <__ftoa_engine>
     87a:	2c 01       	movw	r4, r24
     87c:	09 81       	ldd	r16, Y+1	; 0x01
     87e:	00 ff       	sbrs	r16, 0
     880:	02 c0       	rjmp	.+4      	; 0x886 <vfprintf+0x16a>
     882:	03 ff       	sbrs	r16, 3
     884:	07 c0       	rjmp	.+14     	; 0x894 <vfprintf+0x178>
     886:	31 fc       	sbrc	r3, 1
     888:	08 c0       	rjmp	.+16     	; 0x89a <vfprintf+0x17e>
     88a:	32 fe       	sbrs	r3, 2
     88c:	09 c0       	rjmp	.+18     	; 0x8a0 <vfprintf+0x184>
     88e:	30 e2       	ldi	r19, 0x20	; 32
     890:	23 2e       	mov	r2, r19
     892:	07 c0       	rjmp	.+14     	; 0x8a2 <vfprintf+0x186>
     894:	2d e2       	ldi	r18, 0x2D	; 45
     896:	22 2e       	mov	r2, r18
     898:	04 c0       	rjmp	.+8      	; 0x8a2 <vfprintf+0x186>
     89a:	9b e2       	ldi	r25, 0x2B	; 43
     89c:	29 2e       	mov	r2, r25
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <vfprintf+0x186>
     8a0:	21 2c       	mov	r2, r1
     8a2:	80 2f       	mov	r24, r16
     8a4:	8c 70       	andi	r24, 0x0C	; 12
     8a6:	19 f0       	breq	.+6      	; 0x8ae <vfprintf+0x192>
     8a8:	21 10       	cpse	r2, r1
     8aa:	68 c2       	rjmp	.+1232   	; 0xd7c <__stack+0x47d>
     8ac:	a8 c2       	rjmp	.+1360   	; 0xdfe <__stack+0x4ff>
     8ae:	37 fe       	sbrs	r3, 7
     8b0:	0f c0       	rjmp	.+30     	; 0x8d0 <vfprintf+0x1b4>
     8b2:	e4 0c       	add	r14, r4
     8b4:	04 ff       	sbrs	r16, 4
     8b6:	04 c0       	rjmp	.+8      	; 0x8c0 <vfprintf+0x1a4>
     8b8:	8a 81       	ldd	r24, Y+2	; 0x02
     8ba:	81 33       	cpi	r24, 0x31	; 49
     8bc:	09 f4       	brne	.+2      	; 0x8c0 <vfprintf+0x1a4>
     8be:	ea 94       	dec	r14
     8c0:	1e 14       	cp	r1, r14
     8c2:	74 f5       	brge	.+92     	; 0x920 <__stack+0x21>
     8c4:	f8 e0       	ldi	r31, 0x08	; 8
     8c6:	fe 15       	cp	r31, r14
     8c8:	78 f5       	brcc	.+94     	; 0x928 <__stack+0x29>
     8ca:	88 e0       	ldi	r24, 0x08	; 8
     8cc:	e8 2e       	mov	r14, r24
     8ce:	2c c0       	rjmp	.+88     	; 0x928 <__stack+0x29>
     8d0:	36 fc       	sbrc	r3, 6
     8d2:	2a c0       	rjmp	.+84     	; 0x928 <__stack+0x29>
     8d4:	81 2f       	mov	r24, r17
     8d6:	90 e0       	ldi	r25, 0x00	; 0
     8d8:	84 15       	cp	r24, r4
     8da:	95 05       	cpc	r25, r5
     8dc:	9c f0       	brlt	.+38     	; 0x904 <__stack+0x5>
     8de:	2c ef       	ldi	r18, 0xFC	; 252
     8e0:	42 16       	cp	r4, r18
     8e2:	2f ef       	ldi	r18, 0xFF	; 255
     8e4:	52 06       	cpc	r5, r18
     8e6:	74 f0       	brlt	.+28     	; 0x904 <__stack+0x5>
     8e8:	43 2d       	mov	r20, r3
     8ea:	40 68       	ori	r20, 0x80	; 128
     8ec:	34 2e       	mov	r3, r20
     8ee:	0a c0       	rjmp	.+20     	; 0x904 <__stack+0x5>
     8f0:	e2 e0       	ldi	r30, 0x02	; 2
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	ec 0f       	add	r30, r28
     8f6:	fd 1f       	adc	r31, r29
     8f8:	e1 0f       	add	r30, r17
     8fa:	f1 1d       	adc	r31, r1
     8fc:	80 81       	ld	r24, Z
     8fe:	80 33       	cpi	r24, 0x30	; 48
     900:	19 f4       	brne	.+6      	; 0x908 <__stack+0x9>
     902:	11 50       	subi	r17, 0x01	; 1
     904:	11 11       	cpse	r17, r1
     906:	f4 cf       	rjmp	.-24     	; 0x8f0 <vfprintf+0x1d4>
     908:	37 fe       	sbrs	r3, 7
     90a:	0e c0       	rjmp	.+28     	; 0x928 <__stack+0x29>
     90c:	ee 24       	eor	r14, r14
     90e:	e3 94       	inc	r14
     910:	e1 0e       	add	r14, r17
     912:	81 2f       	mov	r24, r17
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	48 16       	cp	r4, r24
     918:	59 06       	cpc	r5, r25
     91a:	2c f4       	brge	.+10     	; 0x926 <__stack+0x27>
     91c:	14 19       	sub	r17, r4
     91e:	04 c0       	rjmp	.+8      	; 0x928 <__stack+0x29>
     920:	ee 24       	eor	r14, r14
     922:	e3 94       	inc	r14
     924:	01 c0       	rjmp	.+2      	; 0x928 <__stack+0x29>
     926:	10 e0       	ldi	r17, 0x00	; 0
     928:	37 fe       	sbrs	r3, 7
     92a:	06 c0       	rjmp	.+12     	; 0x938 <__stack+0x39>
     92c:	14 14       	cp	r1, r4
     92e:	15 04       	cpc	r1, r5
     930:	34 f4       	brge	.+12     	; 0x93e <__stack+0x3f>
     932:	c2 01       	movw	r24, r4
     934:	01 96       	adiw	r24, 0x01	; 1
     936:	05 c0       	rjmp	.+10     	; 0x942 <__stack+0x43>
     938:	85 e0       	ldi	r24, 0x05	; 5
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	02 c0       	rjmp	.+4      	; 0x942 <__stack+0x43>
     93e:	81 e0       	ldi	r24, 0x01	; 1
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	21 10       	cpse	r2, r1
     944:	01 96       	adiw	r24, 0x01	; 1
     946:	11 23       	and	r17, r17
     948:	31 f0       	breq	.+12     	; 0x956 <__stack+0x57>
     94a:	21 2f       	mov	r18, r17
     94c:	30 e0       	ldi	r19, 0x00	; 0
     94e:	2f 5f       	subi	r18, 0xFF	; 255
     950:	3f 4f       	sbci	r19, 0xFF	; 255
     952:	82 0f       	add	r24, r18
     954:	93 1f       	adc	r25, r19
     956:	2f 2d       	mov	r18, r15
     958:	30 e0       	ldi	r19, 0x00	; 0
     95a:	82 17       	cp	r24, r18
     95c:	93 07       	cpc	r25, r19
     95e:	14 f4       	brge	.+4      	; 0x964 <__stack+0x65>
     960:	f8 1a       	sub	r15, r24
     962:	01 c0       	rjmp	.+2      	; 0x966 <__stack+0x67>
     964:	f1 2c       	mov	r15, r1
     966:	83 2d       	mov	r24, r3
     968:	89 70       	andi	r24, 0x09	; 9
     96a:	49 f4       	brne	.+18     	; 0x97e <__stack+0x7f>
     96c:	ff 20       	and	r15, r15
     96e:	39 f0       	breq	.+14     	; 0x97e <__stack+0x7f>
     970:	b6 01       	movw	r22, r12
     972:	80 e2       	ldi	r24, 0x20	; 32
     974:	90 e0       	ldi	r25, 0x00	; 0
     976:	0e 94 ed 09 	call	0x13da	; 0x13da <fputc>
     97a:	fa 94       	dec	r15
     97c:	f7 cf       	rjmp	.-18     	; 0x96c <__stack+0x6d>
     97e:	22 20       	and	r2, r2
     980:	29 f0       	breq	.+10     	; 0x98c <__stack+0x8d>
     982:	b6 01       	movw	r22, r12
     984:	82 2d       	mov	r24, r2
     986:	90 e0       	ldi	r25, 0x00	; 0
     988:	0e 94 ed 09 	call	0x13da	; 0x13da <fputc>
     98c:	33 fc       	sbrc	r3, 3
     98e:	09 c0       	rjmp	.+18     	; 0x9a2 <__stack+0xa3>
     990:	ff 20       	and	r15, r15
     992:	39 f0       	breq	.+14     	; 0x9a2 <__stack+0xa3>
     994:	b6 01       	movw	r22, r12
     996:	80 e3       	ldi	r24, 0x30	; 48
     998:	90 e0       	ldi	r25, 0x00	; 0
     99a:	0e 94 ed 09 	call	0x13da	; 0x13da <fputc>
     99e:	fa 94       	dec	r15
     9a0:	f7 cf       	rjmp	.-18     	; 0x990 <__stack+0x91>
     9a2:	37 fe       	sbrs	r3, 7
     9a4:	5a c0       	rjmp	.+180    	; 0xa5a <__stack+0x15b>
     9a6:	94 2d       	mov	r25, r4
     9a8:	85 2d       	mov	r24, r5
     9aa:	57 fe       	sbrs	r5, 7
     9ac:	02 c0       	rjmp	.+4      	; 0x9b2 <__stack+0xb3>
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	80 e0       	ldi	r24, 0x00	; 0
     9b2:	29 2e       	mov	r2, r25
     9b4:	38 2e       	mov	r3, r24
     9b6:	20 e0       	ldi	r18, 0x00	; 0
     9b8:	30 e0       	ldi	r19, 0x00	; 0
     9ba:	a2 01       	movw	r20, r4
     9bc:	4e 19       	sub	r20, r14
     9be:	51 09       	sbc	r21, r1
     9c0:	5d 87       	std	Y+13, r21	; 0x0d
     9c2:	4c 87       	std	Y+12, r20	; 0x0c
     9c4:	a2 01       	movw	r20, r4
     9c6:	42 19       	sub	r20, r2
     9c8:	53 09       	sbc	r21, r3
     9ca:	5f 87       	std	Y+15, r21	; 0x0f
     9cc:	4e 87       	std	Y+14, r20	; 0x0e
     9ce:	61 2f       	mov	r22, r17
     9d0:	70 e0       	ldi	r23, 0x00	; 0
     9d2:	44 27       	eor	r20, r20
     9d4:	55 27       	eor	r21, r21
     9d6:	46 1b       	sub	r20, r22
     9d8:	57 0b       	sbc	r21, r23
     9da:	59 8b       	std	Y+17, r21	; 0x11
     9dc:	48 8b       	std	Y+16, r20	; 0x10
     9de:	5f ef       	ldi	r21, 0xFF	; 255
     9e0:	25 16       	cp	r2, r21
     9e2:	35 06       	cpc	r3, r21
     9e4:	49 f4       	brne	.+18     	; 0x9f8 <__stack+0xf9>
     9e6:	b6 01       	movw	r22, r12
     9e8:	8e e2       	ldi	r24, 0x2E	; 46
     9ea:	90 e0       	ldi	r25, 0x00	; 0
     9ec:	2a 8b       	std	Y+18, r18	; 0x12
     9ee:	3b 8b       	std	Y+19, r19	; 0x13
     9f0:	0e 94 ed 09 	call	0x13da	; 0x13da <fputc>
     9f4:	3b 89       	ldd	r19, Y+19	; 0x13
     9f6:	2a 89       	ldd	r18, Y+18	; 0x12
     9f8:	42 14       	cp	r4, r2
     9fa:	53 04       	cpc	r5, r3
     9fc:	6c f0       	brlt	.+26     	; 0xa18 <__stack+0x119>
     9fe:	4c 85       	ldd	r20, Y+12	; 0x0c
     a00:	5d 85       	ldd	r21, Y+13	; 0x0d
     a02:	42 15       	cp	r20, r2
     a04:	53 05       	cpc	r21, r3
     a06:	44 f4       	brge	.+16     	; 0xa18 <__stack+0x119>
     a08:	ee 85       	ldd	r30, Y+14	; 0x0e
     a0a:	ff 85       	ldd	r31, Y+15	; 0x0f
     a0c:	e2 0f       	add	r30, r18
     a0e:	f3 1f       	adc	r31, r19
     a10:	e6 0d       	add	r30, r6
     a12:	f7 1d       	adc	r31, r7
     a14:	81 81       	ldd	r24, Z+1	; 0x01
     a16:	01 c0       	rjmp	.+2      	; 0xa1a <__stack+0x11b>
     a18:	80 e3       	ldi	r24, 0x30	; 48
     a1a:	51 e0       	ldi	r21, 0x01	; 1
     a1c:	25 1a       	sub	r2, r21
     a1e:	31 08       	sbc	r3, r1
     a20:	2f 5f       	subi	r18, 0xFF	; 255
     a22:	3f 4f       	sbci	r19, 0xFF	; 255
     a24:	48 89       	ldd	r20, Y+16	; 0x10
     a26:	59 89       	ldd	r21, Y+17	; 0x11
     a28:	24 16       	cp	r2, r20
     a2a:	35 06       	cpc	r3, r21
     a2c:	4c f0       	brlt	.+18     	; 0xa40 <__stack+0x141>
     a2e:	b6 01       	movw	r22, r12
     a30:	90 e0       	ldi	r25, 0x00	; 0
     a32:	2a 8b       	std	Y+18, r18	; 0x12
     a34:	3b 8b       	std	Y+19, r19	; 0x13
     a36:	0e 94 ed 09 	call	0x13da	; 0x13da <fputc>
     a3a:	2a 89       	ldd	r18, Y+18	; 0x12
     a3c:	3b 89       	ldd	r19, Y+19	; 0x13
     a3e:	cf cf       	rjmp	.-98     	; 0x9de <__stack+0xdf>
     a40:	24 14       	cp	r2, r4
     a42:	35 04       	cpc	r3, r5
     a44:	39 f4       	brne	.+14     	; 0xa54 <__stack+0x155>
     a46:	9a 81       	ldd	r25, Y+2	; 0x02
     a48:	96 33       	cpi	r25, 0x36	; 54
     a4a:	18 f4       	brcc	.+6      	; 0xa52 <__stack+0x153>
     a4c:	95 33       	cpi	r25, 0x35	; 53
     a4e:	11 f4       	brne	.+4      	; 0xa54 <__stack+0x155>
     a50:	04 ff       	sbrs	r16, 4
     a52:	81 e3       	ldi	r24, 0x31	; 49
     a54:	b6 01       	movw	r22, r12
     a56:	90 e0       	ldi	r25, 0x00	; 0
     a58:	4b c0       	rjmp	.+150    	; 0xaf0 <__stack+0x1f1>
     a5a:	8a 81       	ldd	r24, Y+2	; 0x02
     a5c:	81 33       	cpi	r24, 0x31	; 49
     a5e:	09 f0       	breq	.+2      	; 0xa62 <__stack+0x163>
     a60:	0f 7e       	andi	r16, 0xEF	; 239
     a62:	b6 01       	movw	r22, r12
     a64:	90 e0       	ldi	r25, 0x00	; 0
     a66:	0e 94 ed 09 	call	0x13da	; 0x13da <fputc>
     a6a:	11 11       	cpse	r17, r1
     a6c:	05 c0       	rjmp	.+10     	; 0xa78 <__stack+0x179>
     a6e:	34 fc       	sbrc	r3, 4
     a70:	18 c0       	rjmp	.+48     	; 0xaa2 <__stack+0x1a3>
     a72:	85 e6       	ldi	r24, 0x65	; 101
     a74:	90 e0       	ldi	r25, 0x00	; 0
     a76:	17 c0       	rjmp	.+46     	; 0xaa6 <__stack+0x1a7>
     a78:	b6 01       	movw	r22, r12
     a7a:	8e e2       	ldi	r24, 0x2E	; 46
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	0e 94 ed 09 	call	0x13da	; 0x13da <fputc>
     a82:	82 e0       	ldi	r24, 0x02	; 2
     a84:	ee 24       	eor	r14, r14
     a86:	e3 94       	inc	r14
     a88:	e8 0e       	add	r14, r24
     a8a:	f3 01       	movw	r30, r6
     a8c:	e8 0f       	add	r30, r24
     a8e:	f1 1d       	adc	r31, r1
     a90:	80 81       	ld	r24, Z
     a92:	b6 01       	movw	r22, r12
     a94:	90 e0       	ldi	r25, 0x00	; 0
     a96:	0e 94 ed 09 	call	0x13da	; 0x13da <fputc>
     a9a:	11 50       	subi	r17, 0x01	; 1
     a9c:	8e 2d       	mov	r24, r14
     a9e:	91 f7       	brne	.-28     	; 0xa84 <__stack+0x185>
     aa0:	e6 cf       	rjmp	.-52     	; 0xa6e <__stack+0x16f>
     aa2:	85 e4       	ldi	r24, 0x45	; 69
     aa4:	90 e0       	ldi	r25, 0x00	; 0
     aa6:	b6 01       	movw	r22, r12
     aa8:	0e 94 ed 09 	call	0x13da	; 0x13da <fputc>
     aac:	57 fc       	sbrc	r5, 7
     aae:	05 c0       	rjmp	.+10     	; 0xaba <__stack+0x1bb>
     ab0:	41 14       	cp	r4, r1
     ab2:	51 04       	cpc	r5, r1
     ab4:	39 f4       	brne	.+14     	; 0xac4 <__stack+0x1c5>
     ab6:	04 ff       	sbrs	r16, 4
     ab8:	05 c0       	rjmp	.+10     	; 0xac4 <__stack+0x1c5>
     aba:	51 94       	neg	r5
     abc:	41 94       	neg	r4
     abe:	51 08       	sbc	r5, r1
     ac0:	8d e2       	ldi	r24, 0x2D	; 45
     ac2:	01 c0       	rjmp	.+2      	; 0xac6 <__stack+0x1c7>
     ac4:	8b e2       	ldi	r24, 0x2B	; 43
     ac6:	b6 01       	movw	r22, r12
     ac8:	90 e0       	ldi	r25, 0x00	; 0
     aca:	0e 94 ed 09 	call	0x13da	; 0x13da <fputc>
     ace:	80 e3       	ldi	r24, 0x30	; 48
     ad0:	9a e0       	ldi	r25, 0x0A	; 10
     ad2:	49 16       	cp	r4, r25
     ad4:	51 04       	cpc	r5, r1
     ad6:	2c f0       	brlt	.+10     	; 0xae2 <__stack+0x1e3>
     ad8:	8f 5f       	subi	r24, 0xFF	; 255
     ada:	5a e0       	ldi	r21, 0x0A	; 10
     adc:	45 1a       	sub	r4, r21
     ade:	51 08       	sbc	r5, r1
     ae0:	f7 cf       	rjmp	.-18     	; 0xad0 <__stack+0x1d1>
     ae2:	b6 01       	movw	r22, r12
     ae4:	90 e0       	ldi	r25, 0x00	; 0
     ae6:	0e 94 ed 09 	call	0x13da	; 0x13da <fputc>
     aea:	b6 01       	movw	r22, r12
     aec:	c2 01       	movw	r24, r4
     aee:	c0 96       	adiw	r24, 0x30	; 48
     af0:	0e 94 ed 09 	call	0x13da	; 0x13da <fputc>
     af4:	57 c1       	rjmp	.+686    	; 0xda4 <__stack+0x4a5>
     af6:	83 36       	cpi	r24, 0x63	; 99
     af8:	31 f0       	breq	.+12     	; 0xb06 <__stack+0x207>
     afa:	83 37       	cpi	r24, 0x73	; 115
     afc:	79 f0       	breq	.+30     	; 0xb1c <__stack+0x21d>
     afe:	83 35       	cpi	r24, 0x53	; 83
     b00:	09 f0       	breq	.+2      	; 0xb04 <__stack+0x205>
     b02:	58 c0       	rjmp	.+176    	; 0xbb4 <__stack+0x2b5>
     b04:	21 c0       	rjmp	.+66     	; 0xb48 <__stack+0x249>
     b06:	52 01       	movw	r10, r4
     b08:	e2 e0       	ldi	r30, 0x02	; 2
     b0a:	ae 0e       	add	r10, r30
     b0c:	b1 1c       	adc	r11, r1
     b0e:	f2 01       	movw	r30, r4
     b10:	80 81       	ld	r24, Z
     b12:	89 83       	std	Y+1, r24	; 0x01
     b14:	01 e0       	ldi	r16, 0x01	; 1
     b16:	10 e0       	ldi	r17, 0x00	; 0
     b18:	23 01       	movw	r4, r6
     b1a:	14 c0       	rjmp	.+40     	; 0xb44 <__stack+0x245>
     b1c:	52 01       	movw	r10, r4
     b1e:	f2 e0       	ldi	r31, 0x02	; 2
     b20:	af 0e       	add	r10, r31
     b22:	b1 1c       	adc	r11, r1
     b24:	f2 01       	movw	r30, r4
     b26:	40 80       	ld	r4, Z
     b28:	51 80       	ldd	r5, Z+1	; 0x01
     b2a:	26 ff       	sbrs	r18, 6
     b2c:	03 c0       	rjmp	.+6      	; 0xb34 <__stack+0x235>
     b2e:	61 2f       	mov	r22, r17
     b30:	70 e0       	ldi	r23, 0x00	; 0
     b32:	02 c0       	rjmp	.+4      	; 0xb38 <__stack+0x239>
     b34:	6f ef       	ldi	r22, 0xFF	; 255
     b36:	7f ef       	ldi	r23, 0xFF	; 255
     b38:	c2 01       	movw	r24, r4
     b3a:	2a 8b       	std	Y+18, r18	; 0x12
     b3c:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <strnlen>
     b40:	8c 01       	movw	r16, r24
     b42:	2a 89       	ldd	r18, Y+18	; 0x12
     b44:	2f 77       	andi	r18, 0x7F	; 127
     b46:	15 c0       	rjmp	.+42     	; 0xb72 <__stack+0x273>
     b48:	52 01       	movw	r10, r4
     b4a:	f2 e0       	ldi	r31, 0x02	; 2
     b4c:	af 0e       	add	r10, r31
     b4e:	b1 1c       	adc	r11, r1
     b50:	f2 01       	movw	r30, r4
     b52:	40 80       	ld	r4, Z
     b54:	51 80       	ldd	r5, Z+1	; 0x01
     b56:	26 ff       	sbrs	r18, 6
     b58:	03 c0       	rjmp	.+6      	; 0xb60 <__stack+0x261>
     b5a:	61 2f       	mov	r22, r17
     b5c:	70 e0       	ldi	r23, 0x00	; 0
     b5e:	02 c0       	rjmp	.+4      	; 0xb64 <__stack+0x265>
     b60:	6f ef       	ldi	r22, 0xFF	; 255
     b62:	7f ef       	ldi	r23, 0xFF	; 255
     b64:	c2 01       	movw	r24, r4
     b66:	2a 8b       	std	Y+18, r18	; 0x12
     b68:	0e 94 d7 09 	call	0x13ae	; 0x13ae <strnlen_P>
     b6c:	8c 01       	movw	r16, r24
     b6e:	2a 89       	ldd	r18, Y+18	; 0x12
     b70:	20 68       	ori	r18, 0x80	; 128
     b72:	32 2e       	mov	r3, r18
     b74:	23 fd       	sbrc	r18, 3
     b76:	1a c0       	rjmp	.+52     	; 0xbac <__stack+0x2ad>
     b78:	8f 2d       	mov	r24, r15
     b7a:	90 e0       	ldi	r25, 0x00	; 0
     b7c:	08 17       	cp	r16, r24
     b7e:	19 07       	cpc	r17, r25
     b80:	a8 f4       	brcc	.+42     	; 0xbac <__stack+0x2ad>
     b82:	b6 01       	movw	r22, r12
     b84:	80 e2       	ldi	r24, 0x20	; 32
     b86:	90 e0       	ldi	r25, 0x00	; 0
     b88:	0e 94 ed 09 	call	0x13da	; 0x13da <fputc>
     b8c:	fa 94       	dec	r15
     b8e:	f4 cf       	rjmp	.-24     	; 0xb78 <__stack+0x279>
     b90:	f2 01       	movw	r30, r4
     b92:	37 fc       	sbrc	r3, 7
     b94:	85 91       	lpm	r24, Z+
     b96:	37 fe       	sbrs	r3, 7
     b98:	81 91       	ld	r24, Z+
     b9a:	2f 01       	movw	r4, r30
     b9c:	b6 01       	movw	r22, r12
     b9e:	90 e0       	ldi	r25, 0x00	; 0
     ba0:	0e 94 ed 09 	call	0x13da	; 0x13da <fputc>
     ba4:	f1 10       	cpse	r15, r1
     ba6:	fa 94       	dec	r15
     ba8:	01 50       	subi	r16, 0x01	; 1
     baa:	11 09       	sbc	r17, r1
     bac:	01 15       	cp	r16, r1
     bae:	11 05       	cpc	r17, r1
     bb0:	79 f7       	brne	.-34     	; 0xb90 <__stack+0x291>
     bb2:	f8 c0       	rjmp	.+496    	; 0xda4 <__stack+0x4a5>
     bb4:	84 36       	cpi	r24, 0x64	; 100
     bb6:	11 f0       	breq	.+4      	; 0xbbc <__stack+0x2bd>
     bb8:	89 36       	cpi	r24, 0x69	; 105
     bba:	59 f5       	brne	.+86     	; 0xc12 <__stack+0x313>
     bbc:	52 01       	movw	r10, r4
     bbe:	27 ff       	sbrs	r18, 7
     bc0:	09 c0       	rjmp	.+18     	; 0xbd4 <__stack+0x2d5>
     bc2:	f4 e0       	ldi	r31, 0x04	; 4
     bc4:	af 0e       	add	r10, r31
     bc6:	b1 1c       	adc	r11, r1
     bc8:	f2 01       	movw	r30, r4
     bca:	60 81       	ld	r22, Z
     bcc:	71 81       	ldd	r23, Z+1	; 0x01
     bce:	82 81       	ldd	r24, Z+2	; 0x02
     bd0:	93 81       	ldd	r25, Z+3	; 0x03
     bd2:	0a c0       	rjmp	.+20     	; 0xbe8 <__stack+0x2e9>
     bd4:	f2 e0       	ldi	r31, 0x02	; 2
     bd6:	af 0e       	add	r10, r31
     bd8:	b1 1c       	adc	r11, r1
     bda:	f2 01       	movw	r30, r4
     bdc:	60 81       	ld	r22, Z
     bde:	71 81       	ldd	r23, Z+1	; 0x01
     be0:	88 27       	eor	r24, r24
     be2:	77 fd       	sbrc	r23, 7
     be4:	80 95       	com	r24
     be6:	98 2f       	mov	r25, r24
     be8:	2f 76       	andi	r18, 0x6F	; 111
     bea:	32 2e       	mov	r3, r18
     bec:	97 ff       	sbrs	r25, 7
     bee:	09 c0       	rjmp	.+18     	; 0xc02 <__stack+0x303>
     bf0:	90 95       	com	r25
     bf2:	80 95       	com	r24
     bf4:	70 95       	com	r23
     bf6:	61 95       	neg	r22
     bf8:	7f 4f       	sbci	r23, 0xFF	; 255
     bfa:	8f 4f       	sbci	r24, 0xFF	; 255
     bfc:	9f 4f       	sbci	r25, 0xFF	; 255
     bfe:	20 68       	ori	r18, 0x80	; 128
     c00:	32 2e       	mov	r3, r18
     c02:	2a e0       	ldi	r18, 0x0A	; 10
     c04:	30 e0       	ldi	r19, 0x00	; 0
     c06:	a3 01       	movw	r20, r6
     c08:	0e 94 25 0a 	call	0x144a	; 0x144a <__ultoa_invert>
     c0c:	e8 2e       	mov	r14, r24
     c0e:	e6 18       	sub	r14, r6
     c10:	3f c0       	rjmp	.+126    	; 0xc90 <__stack+0x391>
     c12:	02 2f       	mov	r16, r18
     c14:	85 37       	cpi	r24, 0x75	; 117
     c16:	21 f4       	brne	.+8      	; 0xc20 <__stack+0x321>
     c18:	0f 7e       	andi	r16, 0xEF	; 239
     c1a:	2a e0       	ldi	r18, 0x0A	; 10
     c1c:	30 e0       	ldi	r19, 0x00	; 0
     c1e:	1d c0       	rjmp	.+58     	; 0xc5a <__stack+0x35b>
     c20:	09 7f       	andi	r16, 0xF9	; 249
     c22:	8f 36       	cpi	r24, 0x6F	; 111
     c24:	91 f0       	breq	.+36     	; 0xc4a <__stack+0x34b>
     c26:	18 f4       	brcc	.+6      	; 0xc2e <__stack+0x32f>
     c28:	88 35       	cpi	r24, 0x58	; 88
     c2a:	59 f0       	breq	.+22     	; 0xc42 <__stack+0x343>
     c2c:	c5 c0       	rjmp	.+394    	; 0xdb8 <__stack+0x4b9>
     c2e:	80 37       	cpi	r24, 0x70	; 112
     c30:	19 f0       	breq	.+6      	; 0xc38 <__stack+0x339>
     c32:	88 37       	cpi	r24, 0x78	; 120
     c34:	11 f0       	breq	.+4      	; 0xc3a <__stack+0x33b>
     c36:	c0 c0       	rjmp	.+384    	; 0xdb8 <__stack+0x4b9>
     c38:	00 61       	ori	r16, 0x10	; 16
     c3a:	04 ff       	sbrs	r16, 4
     c3c:	09 c0       	rjmp	.+18     	; 0xc50 <__stack+0x351>
     c3e:	04 60       	ori	r16, 0x04	; 4
     c40:	07 c0       	rjmp	.+14     	; 0xc50 <__stack+0x351>
     c42:	24 ff       	sbrs	r18, 4
     c44:	08 c0       	rjmp	.+16     	; 0xc56 <__stack+0x357>
     c46:	06 60       	ori	r16, 0x06	; 6
     c48:	06 c0       	rjmp	.+12     	; 0xc56 <__stack+0x357>
     c4a:	28 e0       	ldi	r18, 0x08	; 8
     c4c:	30 e0       	ldi	r19, 0x00	; 0
     c4e:	05 c0       	rjmp	.+10     	; 0xc5a <__stack+0x35b>
     c50:	20 e1       	ldi	r18, 0x10	; 16
     c52:	30 e0       	ldi	r19, 0x00	; 0
     c54:	02 c0       	rjmp	.+4      	; 0xc5a <__stack+0x35b>
     c56:	20 e1       	ldi	r18, 0x10	; 16
     c58:	32 e0       	ldi	r19, 0x02	; 2
     c5a:	52 01       	movw	r10, r4
     c5c:	07 ff       	sbrs	r16, 7
     c5e:	09 c0       	rjmp	.+18     	; 0xc72 <__stack+0x373>
     c60:	f4 e0       	ldi	r31, 0x04	; 4
     c62:	af 0e       	add	r10, r31
     c64:	b1 1c       	adc	r11, r1
     c66:	f2 01       	movw	r30, r4
     c68:	60 81       	ld	r22, Z
     c6a:	71 81       	ldd	r23, Z+1	; 0x01
     c6c:	82 81       	ldd	r24, Z+2	; 0x02
     c6e:	93 81       	ldd	r25, Z+3	; 0x03
     c70:	08 c0       	rjmp	.+16     	; 0xc82 <__stack+0x383>
     c72:	f2 e0       	ldi	r31, 0x02	; 2
     c74:	af 0e       	add	r10, r31
     c76:	b1 1c       	adc	r11, r1
     c78:	f2 01       	movw	r30, r4
     c7a:	60 81       	ld	r22, Z
     c7c:	71 81       	ldd	r23, Z+1	; 0x01
     c7e:	80 e0       	ldi	r24, 0x00	; 0
     c80:	90 e0       	ldi	r25, 0x00	; 0
     c82:	a3 01       	movw	r20, r6
     c84:	0e 94 25 0a 	call	0x144a	; 0x144a <__ultoa_invert>
     c88:	e8 2e       	mov	r14, r24
     c8a:	e6 18       	sub	r14, r6
     c8c:	0f 77       	andi	r16, 0x7F	; 127
     c8e:	30 2e       	mov	r3, r16
     c90:	36 fe       	sbrs	r3, 6
     c92:	0b c0       	rjmp	.+22     	; 0xcaa <__stack+0x3ab>
     c94:	33 2d       	mov	r19, r3
     c96:	3e 7f       	andi	r19, 0xFE	; 254
     c98:	e1 16       	cp	r14, r17
     c9a:	50 f4       	brcc	.+20     	; 0xcb0 <__stack+0x3b1>
     c9c:	34 fe       	sbrs	r3, 4
     c9e:	0a c0       	rjmp	.+20     	; 0xcb4 <__stack+0x3b5>
     ca0:	32 fc       	sbrc	r3, 2
     ca2:	08 c0       	rjmp	.+16     	; 0xcb4 <__stack+0x3b5>
     ca4:	33 2d       	mov	r19, r3
     ca6:	3e 7e       	andi	r19, 0xEE	; 238
     ca8:	05 c0       	rjmp	.+10     	; 0xcb4 <__stack+0x3b5>
     caa:	0e 2d       	mov	r16, r14
     cac:	33 2d       	mov	r19, r3
     cae:	03 c0       	rjmp	.+6      	; 0xcb6 <__stack+0x3b7>
     cb0:	0e 2d       	mov	r16, r14
     cb2:	01 c0       	rjmp	.+2      	; 0xcb6 <__stack+0x3b7>
     cb4:	01 2f       	mov	r16, r17
     cb6:	34 ff       	sbrs	r19, 4
     cb8:	0c c0       	rjmp	.+24     	; 0xcd2 <__stack+0x3d3>
     cba:	fe 01       	movw	r30, r28
     cbc:	ee 0d       	add	r30, r14
     cbe:	f1 1d       	adc	r31, r1
     cc0:	80 81       	ld	r24, Z
     cc2:	80 33       	cpi	r24, 0x30	; 48
     cc4:	11 f4       	brne	.+4      	; 0xcca <__stack+0x3cb>
     cc6:	39 7e       	andi	r19, 0xE9	; 233
     cc8:	08 c0       	rjmp	.+16     	; 0xcda <__stack+0x3db>
     cca:	32 ff       	sbrs	r19, 2
     ccc:	05 c0       	rjmp	.+10     	; 0xcd8 <__stack+0x3d9>
     cce:	0e 5f       	subi	r16, 0xFE	; 254
     cd0:	04 c0       	rjmp	.+8      	; 0xcda <__stack+0x3db>
     cd2:	83 2f       	mov	r24, r19
     cd4:	86 78       	andi	r24, 0x86	; 134
     cd6:	09 f0       	breq	.+2      	; 0xcda <__stack+0x3db>
     cd8:	0f 5f       	subi	r16, 0xFF	; 255
     cda:	33 fd       	sbrc	r19, 3
     cdc:	13 c0       	rjmp	.+38     	; 0xd04 <__stack+0x405>
     cde:	30 ff       	sbrs	r19, 0
     ce0:	06 c0       	rjmp	.+12     	; 0xcee <__stack+0x3ef>
     ce2:	1e 2d       	mov	r17, r14
     ce4:	0f 15       	cp	r16, r15
     ce6:	18 f4       	brcc	.+6      	; 0xcee <__stack+0x3ef>
     ce8:	1f 0d       	add	r17, r15
     cea:	10 1b       	sub	r17, r16
     cec:	0f 2d       	mov	r16, r15
     cee:	0f 15       	cp	r16, r15
     cf0:	68 f4       	brcc	.+26     	; 0xd0c <__stack+0x40d>
     cf2:	b6 01       	movw	r22, r12
     cf4:	80 e2       	ldi	r24, 0x20	; 32
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	3b 8b       	std	Y+19, r19	; 0x13
     cfa:	0e 94 ed 09 	call	0x13da	; 0x13da <fputc>
     cfe:	0f 5f       	subi	r16, 0xFF	; 255
     d00:	3b 89       	ldd	r19, Y+19	; 0x13
     d02:	f5 cf       	rjmp	.-22     	; 0xcee <__stack+0x3ef>
     d04:	0f 15       	cp	r16, r15
     d06:	10 f4       	brcc	.+4      	; 0xd0c <__stack+0x40d>
     d08:	f0 1a       	sub	r15, r16
     d0a:	01 c0       	rjmp	.+2      	; 0xd0e <__stack+0x40f>
     d0c:	f1 2c       	mov	r15, r1
     d0e:	34 ff       	sbrs	r19, 4
     d10:	12 c0       	rjmp	.+36     	; 0xd36 <__stack+0x437>
     d12:	b6 01       	movw	r22, r12
     d14:	80 e3       	ldi	r24, 0x30	; 48
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	3b 8b       	std	Y+19, r19	; 0x13
     d1a:	0e 94 ed 09 	call	0x13da	; 0x13da <fputc>
     d1e:	3b 89       	ldd	r19, Y+19	; 0x13
     d20:	32 ff       	sbrs	r19, 2
     d22:	17 c0       	rjmp	.+46     	; 0xd52 <__stack+0x453>
     d24:	31 fd       	sbrc	r19, 1
     d26:	03 c0       	rjmp	.+6      	; 0xd2e <__stack+0x42f>
     d28:	88 e7       	ldi	r24, 0x78	; 120
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	02 c0       	rjmp	.+4      	; 0xd32 <__stack+0x433>
     d2e:	88 e5       	ldi	r24, 0x58	; 88
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	b6 01       	movw	r22, r12
     d34:	0c c0       	rjmp	.+24     	; 0xd4e <__stack+0x44f>
     d36:	83 2f       	mov	r24, r19
     d38:	86 78       	andi	r24, 0x86	; 134
     d3a:	59 f0       	breq	.+22     	; 0xd52 <__stack+0x453>
     d3c:	31 ff       	sbrs	r19, 1
     d3e:	02 c0       	rjmp	.+4      	; 0xd44 <__stack+0x445>
     d40:	8b e2       	ldi	r24, 0x2B	; 43
     d42:	01 c0       	rjmp	.+2      	; 0xd46 <__stack+0x447>
     d44:	80 e2       	ldi	r24, 0x20	; 32
     d46:	37 fd       	sbrc	r19, 7
     d48:	8d e2       	ldi	r24, 0x2D	; 45
     d4a:	b6 01       	movw	r22, r12
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	0e 94 ed 09 	call	0x13da	; 0x13da <fputc>
     d52:	e1 16       	cp	r14, r17
     d54:	38 f4       	brcc	.+14     	; 0xd64 <__stack+0x465>
     d56:	b6 01       	movw	r22, r12
     d58:	80 e3       	ldi	r24, 0x30	; 48
     d5a:	90 e0       	ldi	r25, 0x00	; 0
     d5c:	0e 94 ed 09 	call	0x13da	; 0x13da <fputc>
     d60:	11 50       	subi	r17, 0x01	; 1
     d62:	f7 cf       	rjmp	.-18     	; 0xd52 <__stack+0x453>
     d64:	ea 94       	dec	r14
     d66:	f3 01       	movw	r30, r6
     d68:	ee 0d       	add	r30, r14
     d6a:	f1 1d       	adc	r31, r1
     d6c:	80 81       	ld	r24, Z
     d6e:	b6 01       	movw	r22, r12
     d70:	90 e0       	ldi	r25, 0x00	; 0
     d72:	0e 94 ed 09 	call	0x13da	; 0x13da <fputc>
     d76:	e1 10       	cpse	r14, r1
     d78:	f5 cf       	rjmp	.-22     	; 0xd64 <__stack+0x465>
     d7a:	14 c0       	rjmp	.+40     	; 0xda4 <__stack+0x4a5>
     d7c:	f4 e0       	ldi	r31, 0x04	; 4
     d7e:	ff 15       	cp	r31, r15
     d80:	58 f5       	brcc	.+86     	; 0xdd8 <__stack+0x4d9>
     d82:	84 e0       	ldi	r24, 0x04	; 4
     d84:	f8 1a       	sub	r15, r24
     d86:	33 fe       	sbrs	r3, 3
     d88:	1e c0       	rjmp	.+60     	; 0xdc6 <__stack+0x4c7>
     d8a:	21 10       	cpse	r2, r1
     d8c:	26 c0       	rjmp	.+76     	; 0xdda <__stack+0x4db>
     d8e:	03 ff       	sbrs	r16, 3
     d90:	2a c0       	rjmp	.+84     	; 0xde6 <__stack+0x4e7>
     d92:	08 e6       	ldi	r16, 0x68	; 104
     d94:	10 e0       	ldi	r17, 0x00	; 0
     d96:	f3 2d       	mov	r31, r3
     d98:	f0 71       	andi	r31, 0x10	; 16
     d9a:	3f 2e       	mov	r3, r31
     d9c:	f8 01       	movw	r30, r16
     d9e:	84 91       	lpm	r24, Z
     da0:	81 11       	cpse	r24, r1
     da2:	24 c0       	rjmp	.+72     	; 0xdec <__stack+0x4ed>
     da4:	ff 20       	and	r15, r15
     da6:	09 f4       	brne	.+2      	; 0xdaa <__stack+0x4ab>
     da8:	e5 cc       	rjmp	.-1590   	; 0x774 <vfprintf+0x58>
     daa:	b6 01       	movw	r22, r12
     dac:	80 e2       	ldi	r24, 0x20	; 32
     dae:	90 e0       	ldi	r25, 0x00	; 0
     db0:	0e 94 ed 09 	call	0x13da	; 0x13da <fputc>
     db4:	fa 94       	dec	r15
     db6:	f6 cf       	rjmp	.-20     	; 0xda4 <__stack+0x4a5>
     db8:	f6 01       	movw	r30, r12
     dba:	86 81       	ldd	r24, Z+6	; 0x06
     dbc:	97 81       	ldd	r25, Z+7	; 0x07
     dbe:	26 c0       	rjmp	.+76     	; 0xe0c <__stack+0x50d>
     dc0:	8f ef       	ldi	r24, 0xFF	; 255
     dc2:	9f ef       	ldi	r25, 0xFF	; 255
     dc4:	23 c0       	rjmp	.+70     	; 0xe0c <__stack+0x50d>
     dc6:	b6 01       	movw	r22, r12
     dc8:	80 e2       	ldi	r24, 0x20	; 32
     dca:	90 e0       	ldi	r25, 0x00	; 0
     dcc:	0e 94 ed 09 	call	0x13da	; 0x13da <fputc>
     dd0:	fa 94       	dec	r15
     dd2:	f1 10       	cpse	r15, r1
     dd4:	f8 cf       	rjmp	.-16     	; 0xdc6 <__stack+0x4c7>
     dd6:	d9 cf       	rjmp	.-78     	; 0xd8a <__stack+0x48b>
     dd8:	f1 2c       	mov	r15, r1
     dda:	b6 01       	movw	r22, r12
     ddc:	82 2d       	mov	r24, r2
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	0e 94 ed 09 	call	0x13da	; 0x13da <fputc>
     de4:	d4 cf       	rjmp	.-88     	; 0xd8e <__stack+0x48f>
     de6:	0c e6       	ldi	r16, 0x6C	; 108
     de8:	10 e0       	ldi	r17, 0x00	; 0
     dea:	d5 cf       	rjmp	.-86     	; 0xd96 <__stack+0x497>
     dec:	31 10       	cpse	r3, r1
     dee:	80 52       	subi	r24, 0x20	; 32
     df0:	b6 01       	movw	r22, r12
     df2:	90 e0       	ldi	r25, 0x00	; 0
     df4:	0e 94 ed 09 	call	0x13da	; 0x13da <fputc>
     df8:	0f 5f       	subi	r16, 0xFF	; 255
     dfa:	1f 4f       	sbci	r17, 0xFF	; 255
     dfc:	cf cf       	rjmp	.-98     	; 0xd9c <__stack+0x49d>
     dfe:	23 e0       	ldi	r18, 0x03	; 3
     e00:	2f 15       	cp	r18, r15
     e02:	10 f4       	brcc	.+4      	; 0xe08 <__stack+0x509>
     e04:	83 e0       	ldi	r24, 0x03	; 3
     e06:	be cf       	rjmp	.-132    	; 0xd84 <__stack+0x485>
     e08:	f1 2c       	mov	r15, r1
     e0a:	c1 cf       	rjmp	.-126    	; 0xd8e <__stack+0x48f>
     e0c:	63 96       	adiw	r28, 0x13	; 19
     e0e:	e2 e1       	ldi	r30, 0x12	; 18
     e10:	0c 94 e4 08 	jmp	0x11c8	; 0x11c8 <__epilogue_restores__>

00000e14 <__subsf3>:
     e14:	50 58       	subi	r21, 0x80	; 128

00000e16 <__addsf3>:
     e16:	bb 27       	eor	r27, r27
     e18:	aa 27       	eor	r26, r26
     e1a:	0e d0       	rcall	.+28     	; 0xe38 <__addsf3x>
     e1c:	1c c1       	rjmp	.+568    	; 0x1056 <__fp_round>
     e1e:	0d d1       	rcall	.+538    	; 0x103a <__fp_pscA>
     e20:	30 f0       	brcs	.+12     	; 0xe2e <__addsf3+0x18>
     e22:	12 d1       	rcall	.+548    	; 0x1048 <__fp_pscB>
     e24:	20 f0       	brcs	.+8      	; 0xe2e <__addsf3+0x18>
     e26:	31 f4       	brne	.+12     	; 0xe34 <__addsf3+0x1e>
     e28:	9f 3f       	cpi	r25, 0xFF	; 255
     e2a:	11 f4       	brne	.+4      	; 0xe30 <__addsf3+0x1a>
     e2c:	1e f4       	brtc	.+6      	; 0xe34 <__addsf3+0x1e>
     e2e:	02 c1       	rjmp	.+516    	; 0x1034 <__fp_nan>
     e30:	0e f4       	brtc	.+2      	; 0xe34 <__addsf3+0x1e>
     e32:	e0 95       	com	r30
     e34:	e7 fb       	bst	r30, 7
     e36:	f8 c0       	rjmp	.+496    	; 0x1028 <__fp_inf>

00000e38 <__addsf3x>:
     e38:	e9 2f       	mov	r30, r25
     e3a:	1e d1       	rcall	.+572    	; 0x1078 <__fp_split3>
     e3c:	80 f3       	brcs	.-32     	; 0xe1e <__addsf3+0x8>
     e3e:	ba 17       	cp	r27, r26
     e40:	62 07       	cpc	r22, r18
     e42:	73 07       	cpc	r23, r19
     e44:	84 07       	cpc	r24, r20
     e46:	95 07       	cpc	r25, r21
     e48:	18 f0       	brcs	.+6      	; 0xe50 <__addsf3x+0x18>
     e4a:	71 f4       	brne	.+28     	; 0xe68 <__addsf3x+0x30>
     e4c:	9e f5       	brtc	.+102    	; 0xeb4 <__addsf3x+0x7c>
     e4e:	36 c1       	rjmp	.+620    	; 0x10bc <__fp_zero>
     e50:	0e f4       	brtc	.+2      	; 0xe54 <__addsf3x+0x1c>
     e52:	e0 95       	com	r30
     e54:	0b 2e       	mov	r0, r27
     e56:	ba 2f       	mov	r27, r26
     e58:	a0 2d       	mov	r26, r0
     e5a:	0b 01       	movw	r0, r22
     e5c:	b9 01       	movw	r22, r18
     e5e:	90 01       	movw	r18, r0
     e60:	0c 01       	movw	r0, r24
     e62:	ca 01       	movw	r24, r20
     e64:	a0 01       	movw	r20, r0
     e66:	11 24       	eor	r1, r1
     e68:	ff 27       	eor	r31, r31
     e6a:	59 1b       	sub	r21, r25
     e6c:	99 f0       	breq	.+38     	; 0xe94 <__addsf3x+0x5c>
     e6e:	59 3f       	cpi	r21, 0xF9	; 249
     e70:	50 f4       	brcc	.+20     	; 0xe86 <__addsf3x+0x4e>
     e72:	50 3e       	cpi	r21, 0xE0	; 224
     e74:	68 f1       	brcs	.+90     	; 0xed0 <__addsf3x+0x98>
     e76:	1a 16       	cp	r1, r26
     e78:	f0 40       	sbci	r31, 0x00	; 0
     e7a:	a2 2f       	mov	r26, r18
     e7c:	23 2f       	mov	r18, r19
     e7e:	34 2f       	mov	r19, r20
     e80:	44 27       	eor	r20, r20
     e82:	58 5f       	subi	r21, 0xF8	; 248
     e84:	f3 cf       	rjmp	.-26     	; 0xe6c <__addsf3x+0x34>
     e86:	46 95       	lsr	r20
     e88:	37 95       	ror	r19
     e8a:	27 95       	ror	r18
     e8c:	a7 95       	ror	r26
     e8e:	f0 40       	sbci	r31, 0x00	; 0
     e90:	53 95       	inc	r21
     e92:	c9 f7       	brne	.-14     	; 0xe86 <__addsf3x+0x4e>
     e94:	7e f4       	brtc	.+30     	; 0xeb4 <__addsf3x+0x7c>
     e96:	1f 16       	cp	r1, r31
     e98:	ba 0b       	sbc	r27, r26
     e9a:	62 0b       	sbc	r22, r18
     e9c:	73 0b       	sbc	r23, r19
     e9e:	84 0b       	sbc	r24, r20
     ea0:	ba f0       	brmi	.+46     	; 0xed0 <__addsf3x+0x98>
     ea2:	91 50       	subi	r25, 0x01	; 1
     ea4:	a1 f0       	breq	.+40     	; 0xece <__addsf3x+0x96>
     ea6:	ff 0f       	add	r31, r31
     ea8:	bb 1f       	adc	r27, r27
     eaa:	66 1f       	adc	r22, r22
     eac:	77 1f       	adc	r23, r23
     eae:	88 1f       	adc	r24, r24
     eb0:	c2 f7       	brpl	.-16     	; 0xea2 <__addsf3x+0x6a>
     eb2:	0e c0       	rjmp	.+28     	; 0xed0 <__addsf3x+0x98>
     eb4:	ba 0f       	add	r27, r26
     eb6:	62 1f       	adc	r22, r18
     eb8:	73 1f       	adc	r23, r19
     eba:	84 1f       	adc	r24, r20
     ebc:	48 f4       	brcc	.+18     	; 0xed0 <__addsf3x+0x98>
     ebe:	87 95       	ror	r24
     ec0:	77 95       	ror	r23
     ec2:	67 95       	ror	r22
     ec4:	b7 95       	ror	r27
     ec6:	f7 95       	ror	r31
     ec8:	9e 3f       	cpi	r25, 0xFE	; 254
     eca:	08 f0       	brcs	.+2      	; 0xece <__addsf3x+0x96>
     ecc:	b3 cf       	rjmp	.-154    	; 0xe34 <__addsf3+0x1e>
     ece:	93 95       	inc	r25
     ed0:	88 0f       	add	r24, r24
     ed2:	08 f0       	brcs	.+2      	; 0xed6 <__addsf3x+0x9e>
     ed4:	99 27       	eor	r25, r25
     ed6:	ee 0f       	add	r30, r30
     ed8:	97 95       	ror	r25
     eda:	87 95       	ror	r24
     edc:	08 95       	ret

00000ede <__divsf3>:
     ede:	0c d0       	rcall	.+24     	; 0xef8 <__divsf3x>
     ee0:	ba c0       	rjmp	.+372    	; 0x1056 <__fp_round>
     ee2:	b2 d0       	rcall	.+356    	; 0x1048 <__fp_pscB>
     ee4:	40 f0       	brcs	.+16     	; 0xef6 <__divsf3+0x18>
     ee6:	a9 d0       	rcall	.+338    	; 0x103a <__fp_pscA>
     ee8:	30 f0       	brcs	.+12     	; 0xef6 <__divsf3+0x18>
     eea:	21 f4       	brne	.+8      	; 0xef4 <__divsf3+0x16>
     eec:	5f 3f       	cpi	r21, 0xFF	; 255
     eee:	19 f0       	breq	.+6      	; 0xef6 <__divsf3+0x18>
     ef0:	9b c0       	rjmp	.+310    	; 0x1028 <__fp_inf>
     ef2:	51 11       	cpse	r21, r1
     ef4:	e4 c0       	rjmp	.+456    	; 0x10be <__fp_szero>
     ef6:	9e c0       	rjmp	.+316    	; 0x1034 <__fp_nan>

00000ef8 <__divsf3x>:
     ef8:	bf d0       	rcall	.+382    	; 0x1078 <__fp_split3>
     efa:	98 f3       	brcs	.-26     	; 0xee2 <__divsf3+0x4>

00000efc <__divsf3_pse>:
     efc:	99 23       	and	r25, r25
     efe:	c9 f3       	breq	.-14     	; 0xef2 <__divsf3+0x14>
     f00:	55 23       	and	r21, r21
     f02:	b1 f3       	breq	.-20     	; 0xef0 <__divsf3+0x12>
     f04:	95 1b       	sub	r25, r21
     f06:	55 0b       	sbc	r21, r21
     f08:	bb 27       	eor	r27, r27
     f0a:	aa 27       	eor	r26, r26
     f0c:	62 17       	cp	r22, r18
     f0e:	73 07       	cpc	r23, r19
     f10:	84 07       	cpc	r24, r20
     f12:	38 f0       	brcs	.+14     	; 0xf22 <__divsf3_pse+0x26>
     f14:	9f 5f       	subi	r25, 0xFF	; 255
     f16:	5f 4f       	sbci	r21, 0xFF	; 255
     f18:	22 0f       	add	r18, r18
     f1a:	33 1f       	adc	r19, r19
     f1c:	44 1f       	adc	r20, r20
     f1e:	aa 1f       	adc	r26, r26
     f20:	a9 f3       	breq	.-22     	; 0xf0c <__divsf3_pse+0x10>
     f22:	33 d0       	rcall	.+102    	; 0xf8a <__divsf3_pse+0x8e>
     f24:	0e 2e       	mov	r0, r30
     f26:	3a f0       	brmi	.+14     	; 0xf36 <__divsf3_pse+0x3a>
     f28:	e0 e8       	ldi	r30, 0x80	; 128
     f2a:	30 d0       	rcall	.+96     	; 0xf8c <__divsf3_pse+0x90>
     f2c:	91 50       	subi	r25, 0x01	; 1
     f2e:	50 40       	sbci	r21, 0x00	; 0
     f30:	e6 95       	lsr	r30
     f32:	00 1c       	adc	r0, r0
     f34:	ca f7       	brpl	.-14     	; 0xf28 <__divsf3_pse+0x2c>
     f36:	29 d0       	rcall	.+82     	; 0xf8a <__divsf3_pse+0x8e>
     f38:	fe 2f       	mov	r31, r30
     f3a:	27 d0       	rcall	.+78     	; 0xf8a <__divsf3_pse+0x8e>
     f3c:	66 0f       	add	r22, r22
     f3e:	77 1f       	adc	r23, r23
     f40:	88 1f       	adc	r24, r24
     f42:	bb 1f       	adc	r27, r27
     f44:	26 17       	cp	r18, r22
     f46:	37 07       	cpc	r19, r23
     f48:	48 07       	cpc	r20, r24
     f4a:	ab 07       	cpc	r26, r27
     f4c:	b0 e8       	ldi	r27, 0x80	; 128
     f4e:	09 f0       	breq	.+2      	; 0xf52 <__divsf3_pse+0x56>
     f50:	bb 0b       	sbc	r27, r27
     f52:	80 2d       	mov	r24, r0
     f54:	bf 01       	movw	r22, r30
     f56:	ff 27       	eor	r31, r31
     f58:	93 58       	subi	r25, 0x83	; 131
     f5a:	5f 4f       	sbci	r21, 0xFF	; 255
     f5c:	2a f0       	brmi	.+10     	; 0xf68 <__divsf3_pse+0x6c>
     f5e:	9e 3f       	cpi	r25, 0xFE	; 254
     f60:	51 05       	cpc	r21, r1
     f62:	68 f0       	brcs	.+26     	; 0xf7e <__divsf3_pse+0x82>
     f64:	61 c0       	rjmp	.+194    	; 0x1028 <__fp_inf>
     f66:	ab c0       	rjmp	.+342    	; 0x10be <__fp_szero>
     f68:	5f 3f       	cpi	r21, 0xFF	; 255
     f6a:	ec f3       	brlt	.-6      	; 0xf66 <__divsf3_pse+0x6a>
     f6c:	98 3e       	cpi	r25, 0xE8	; 232
     f6e:	dc f3       	brlt	.-10     	; 0xf66 <__divsf3_pse+0x6a>
     f70:	86 95       	lsr	r24
     f72:	77 95       	ror	r23
     f74:	67 95       	ror	r22
     f76:	b7 95       	ror	r27
     f78:	f7 95       	ror	r31
     f7a:	9f 5f       	subi	r25, 0xFF	; 255
     f7c:	c9 f7       	brne	.-14     	; 0xf70 <__divsf3_pse+0x74>
     f7e:	88 0f       	add	r24, r24
     f80:	91 1d       	adc	r25, r1
     f82:	96 95       	lsr	r25
     f84:	87 95       	ror	r24
     f86:	97 f9       	bld	r25, 7
     f88:	08 95       	ret
     f8a:	e1 e0       	ldi	r30, 0x01	; 1
     f8c:	66 0f       	add	r22, r22
     f8e:	77 1f       	adc	r23, r23
     f90:	88 1f       	adc	r24, r24
     f92:	bb 1f       	adc	r27, r27
     f94:	62 17       	cp	r22, r18
     f96:	73 07       	cpc	r23, r19
     f98:	84 07       	cpc	r24, r20
     f9a:	ba 07       	cpc	r27, r26
     f9c:	20 f0       	brcs	.+8      	; 0xfa6 <__divsf3_pse+0xaa>
     f9e:	62 1b       	sub	r22, r18
     fa0:	73 0b       	sbc	r23, r19
     fa2:	84 0b       	sbc	r24, r20
     fa4:	ba 0b       	sbc	r27, r26
     fa6:	ee 1f       	adc	r30, r30
     fa8:	88 f7       	brcc	.-30     	; 0xf8c <__divsf3_pse+0x90>
     faa:	e0 95       	com	r30
     fac:	08 95       	ret

00000fae <__floatunsisf>:
     fae:	e8 94       	clt
     fb0:	09 c0       	rjmp	.+18     	; 0xfc4 <__floatsisf+0x12>

00000fb2 <__floatsisf>:
     fb2:	97 fb       	bst	r25, 7
     fb4:	3e f4       	brtc	.+14     	; 0xfc4 <__floatsisf+0x12>
     fb6:	90 95       	com	r25
     fb8:	80 95       	com	r24
     fba:	70 95       	com	r23
     fbc:	61 95       	neg	r22
     fbe:	7f 4f       	sbci	r23, 0xFF	; 255
     fc0:	8f 4f       	sbci	r24, 0xFF	; 255
     fc2:	9f 4f       	sbci	r25, 0xFF	; 255
     fc4:	99 23       	and	r25, r25
     fc6:	a9 f0       	breq	.+42     	; 0xff2 <__floatsisf+0x40>
     fc8:	f9 2f       	mov	r31, r25
     fca:	96 e9       	ldi	r25, 0x96	; 150
     fcc:	bb 27       	eor	r27, r27
     fce:	93 95       	inc	r25
     fd0:	f6 95       	lsr	r31
     fd2:	87 95       	ror	r24
     fd4:	77 95       	ror	r23
     fd6:	67 95       	ror	r22
     fd8:	b7 95       	ror	r27
     fda:	f1 11       	cpse	r31, r1
     fdc:	f8 cf       	rjmp	.-16     	; 0xfce <__floatsisf+0x1c>
     fde:	fa f4       	brpl	.+62     	; 0x101e <__floatsisf+0x6c>
     fe0:	bb 0f       	add	r27, r27
     fe2:	11 f4       	brne	.+4      	; 0xfe8 <__floatsisf+0x36>
     fe4:	60 ff       	sbrs	r22, 0
     fe6:	1b c0       	rjmp	.+54     	; 0x101e <__floatsisf+0x6c>
     fe8:	6f 5f       	subi	r22, 0xFF	; 255
     fea:	7f 4f       	sbci	r23, 0xFF	; 255
     fec:	8f 4f       	sbci	r24, 0xFF	; 255
     fee:	9f 4f       	sbci	r25, 0xFF	; 255
     ff0:	16 c0       	rjmp	.+44     	; 0x101e <__floatsisf+0x6c>
     ff2:	88 23       	and	r24, r24
     ff4:	11 f0       	breq	.+4      	; 0xffa <__floatsisf+0x48>
     ff6:	96 e9       	ldi	r25, 0x96	; 150
     ff8:	11 c0       	rjmp	.+34     	; 0x101c <__floatsisf+0x6a>
     ffa:	77 23       	and	r23, r23
     ffc:	21 f0       	breq	.+8      	; 0x1006 <__floatsisf+0x54>
     ffe:	9e e8       	ldi	r25, 0x8E	; 142
    1000:	87 2f       	mov	r24, r23
    1002:	76 2f       	mov	r23, r22
    1004:	05 c0       	rjmp	.+10     	; 0x1010 <__floatsisf+0x5e>
    1006:	66 23       	and	r22, r22
    1008:	71 f0       	breq	.+28     	; 0x1026 <__floatsisf+0x74>
    100a:	96 e8       	ldi	r25, 0x86	; 134
    100c:	86 2f       	mov	r24, r22
    100e:	70 e0       	ldi	r23, 0x00	; 0
    1010:	60 e0       	ldi	r22, 0x00	; 0
    1012:	2a f0       	brmi	.+10     	; 0x101e <__floatsisf+0x6c>
    1014:	9a 95       	dec	r25
    1016:	66 0f       	add	r22, r22
    1018:	77 1f       	adc	r23, r23
    101a:	88 1f       	adc	r24, r24
    101c:	da f7       	brpl	.-10     	; 0x1014 <__floatsisf+0x62>
    101e:	88 0f       	add	r24, r24
    1020:	96 95       	lsr	r25
    1022:	87 95       	ror	r24
    1024:	97 f9       	bld	r25, 7
    1026:	08 95       	ret

00001028 <__fp_inf>:
    1028:	97 f9       	bld	r25, 7
    102a:	9f 67       	ori	r25, 0x7F	; 127
    102c:	80 e8       	ldi	r24, 0x80	; 128
    102e:	70 e0       	ldi	r23, 0x00	; 0
    1030:	60 e0       	ldi	r22, 0x00	; 0
    1032:	08 95       	ret

00001034 <__fp_nan>:
    1034:	9f ef       	ldi	r25, 0xFF	; 255
    1036:	80 ec       	ldi	r24, 0xC0	; 192
    1038:	08 95       	ret

0000103a <__fp_pscA>:
    103a:	00 24       	eor	r0, r0
    103c:	0a 94       	dec	r0
    103e:	16 16       	cp	r1, r22
    1040:	17 06       	cpc	r1, r23
    1042:	18 06       	cpc	r1, r24
    1044:	09 06       	cpc	r0, r25
    1046:	08 95       	ret

00001048 <__fp_pscB>:
    1048:	00 24       	eor	r0, r0
    104a:	0a 94       	dec	r0
    104c:	12 16       	cp	r1, r18
    104e:	13 06       	cpc	r1, r19
    1050:	14 06       	cpc	r1, r20
    1052:	05 06       	cpc	r0, r21
    1054:	08 95       	ret

00001056 <__fp_round>:
    1056:	09 2e       	mov	r0, r25
    1058:	03 94       	inc	r0
    105a:	00 0c       	add	r0, r0
    105c:	11 f4       	brne	.+4      	; 0x1062 <__fp_round+0xc>
    105e:	88 23       	and	r24, r24
    1060:	52 f0       	brmi	.+20     	; 0x1076 <__fp_round+0x20>
    1062:	bb 0f       	add	r27, r27
    1064:	40 f4       	brcc	.+16     	; 0x1076 <__fp_round+0x20>
    1066:	bf 2b       	or	r27, r31
    1068:	11 f4       	brne	.+4      	; 0x106e <__fp_round+0x18>
    106a:	60 ff       	sbrs	r22, 0
    106c:	04 c0       	rjmp	.+8      	; 0x1076 <__fp_round+0x20>
    106e:	6f 5f       	subi	r22, 0xFF	; 255
    1070:	7f 4f       	sbci	r23, 0xFF	; 255
    1072:	8f 4f       	sbci	r24, 0xFF	; 255
    1074:	9f 4f       	sbci	r25, 0xFF	; 255
    1076:	08 95       	ret

00001078 <__fp_split3>:
    1078:	57 fd       	sbrc	r21, 7
    107a:	90 58       	subi	r25, 0x80	; 128
    107c:	44 0f       	add	r20, r20
    107e:	55 1f       	adc	r21, r21
    1080:	59 f0       	breq	.+22     	; 0x1098 <__fp_splitA+0x10>
    1082:	5f 3f       	cpi	r21, 0xFF	; 255
    1084:	71 f0       	breq	.+28     	; 0x10a2 <__fp_splitA+0x1a>
    1086:	47 95       	ror	r20

00001088 <__fp_splitA>:
    1088:	88 0f       	add	r24, r24
    108a:	97 fb       	bst	r25, 7
    108c:	99 1f       	adc	r25, r25
    108e:	61 f0       	breq	.+24     	; 0x10a8 <__fp_splitA+0x20>
    1090:	9f 3f       	cpi	r25, 0xFF	; 255
    1092:	79 f0       	breq	.+30     	; 0x10b2 <__fp_splitA+0x2a>
    1094:	87 95       	ror	r24
    1096:	08 95       	ret
    1098:	12 16       	cp	r1, r18
    109a:	13 06       	cpc	r1, r19
    109c:	14 06       	cpc	r1, r20
    109e:	55 1f       	adc	r21, r21
    10a0:	f2 cf       	rjmp	.-28     	; 0x1086 <__fp_split3+0xe>
    10a2:	46 95       	lsr	r20
    10a4:	f1 df       	rcall	.-30     	; 0x1088 <__fp_splitA>
    10a6:	08 c0       	rjmp	.+16     	; 0x10b8 <__fp_splitA+0x30>
    10a8:	16 16       	cp	r1, r22
    10aa:	17 06       	cpc	r1, r23
    10ac:	18 06       	cpc	r1, r24
    10ae:	99 1f       	adc	r25, r25
    10b0:	f1 cf       	rjmp	.-30     	; 0x1094 <__fp_splitA+0xc>
    10b2:	86 95       	lsr	r24
    10b4:	71 05       	cpc	r23, r1
    10b6:	61 05       	cpc	r22, r1
    10b8:	08 94       	sec
    10ba:	08 95       	ret

000010bc <__fp_zero>:
    10bc:	e8 94       	clt

000010be <__fp_szero>:
    10be:	bb 27       	eor	r27, r27
    10c0:	66 27       	eor	r22, r22
    10c2:	77 27       	eor	r23, r23
    10c4:	cb 01       	movw	r24, r22
    10c6:	97 f9       	bld	r25, 7
    10c8:	08 95       	ret

000010ca <__mulsf3>:
    10ca:	0b d0       	rcall	.+22     	; 0x10e2 <__mulsf3x>
    10cc:	c4 cf       	rjmp	.-120    	; 0x1056 <__fp_round>
    10ce:	b5 df       	rcall	.-150    	; 0x103a <__fp_pscA>
    10d0:	28 f0       	brcs	.+10     	; 0x10dc <__mulsf3+0x12>
    10d2:	ba df       	rcall	.-140    	; 0x1048 <__fp_pscB>
    10d4:	18 f0       	brcs	.+6      	; 0x10dc <__mulsf3+0x12>
    10d6:	95 23       	and	r25, r21
    10d8:	09 f0       	breq	.+2      	; 0x10dc <__mulsf3+0x12>
    10da:	a6 cf       	rjmp	.-180    	; 0x1028 <__fp_inf>
    10dc:	ab cf       	rjmp	.-170    	; 0x1034 <__fp_nan>
    10de:	11 24       	eor	r1, r1
    10e0:	ee cf       	rjmp	.-36     	; 0x10be <__fp_szero>

000010e2 <__mulsf3x>:
    10e2:	ca df       	rcall	.-108    	; 0x1078 <__fp_split3>
    10e4:	a0 f3       	brcs	.-24     	; 0x10ce <__mulsf3+0x4>

000010e6 <__mulsf3_pse>:
    10e6:	95 9f       	mul	r25, r21
    10e8:	d1 f3       	breq	.-12     	; 0x10de <__mulsf3+0x14>
    10ea:	95 0f       	add	r25, r21
    10ec:	50 e0       	ldi	r21, 0x00	; 0
    10ee:	55 1f       	adc	r21, r21
    10f0:	62 9f       	mul	r22, r18
    10f2:	f0 01       	movw	r30, r0
    10f4:	72 9f       	mul	r23, r18
    10f6:	bb 27       	eor	r27, r27
    10f8:	f0 0d       	add	r31, r0
    10fa:	b1 1d       	adc	r27, r1
    10fc:	63 9f       	mul	r22, r19
    10fe:	aa 27       	eor	r26, r26
    1100:	f0 0d       	add	r31, r0
    1102:	b1 1d       	adc	r27, r1
    1104:	aa 1f       	adc	r26, r26
    1106:	64 9f       	mul	r22, r20
    1108:	66 27       	eor	r22, r22
    110a:	b0 0d       	add	r27, r0
    110c:	a1 1d       	adc	r26, r1
    110e:	66 1f       	adc	r22, r22
    1110:	82 9f       	mul	r24, r18
    1112:	22 27       	eor	r18, r18
    1114:	b0 0d       	add	r27, r0
    1116:	a1 1d       	adc	r26, r1
    1118:	62 1f       	adc	r22, r18
    111a:	73 9f       	mul	r23, r19
    111c:	b0 0d       	add	r27, r0
    111e:	a1 1d       	adc	r26, r1
    1120:	62 1f       	adc	r22, r18
    1122:	83 9f       	mul	r24, r19
    1124:	a0 0d       	add	r26, r0
    1126:	61 1d       	adc	r22, r1
    1128:	22 1f       	adc	r18, r18
    112a:	74 9f       	mul	r23, r20
    112c:	33 27       	eor	r19, r19
    112e:	a0 0d       	add	r26, r0
    1130:	61 1d       	adc	r22, r1
    1132:	23 1f       	adc	r18, r19
    1134:	84 9f       	mul	r24, r20
    1136:	60 0d       	add	r22, r0
    1138:	21 1d       	adc	r18, r1
    113a:	82 2f       	mov	r24, r18
    113c:	76 2f       	mov	r23, r22
    113e:	6a 2f       	mov	r22, r26
    1140:	11 24       	eor	r1, r1
    1142:	9f 57       	subi	r25, 0x7F	; 127
    1144:	50 40       	sbci	r21, 0x00	; 0
    1146:	8a f0       	brmi	.+34     	; 0x116a <__mulsf3_pse+0x84>
    1148:	e1 f0       	breq	.+56     	; 0x1182 <__mulsf3_pse+0x9c>
    114a:	88 23       	and	r24, r24
    114c:	4a f0       	brmi	.+18     	; 0x1160 <__mulsf3_pse+0x7a>
    114e:	ee 0f       	add	r30, r30
    1150:	ff 1f       	adc	r31, r31
    1152:	bb 1f       	adc	r27, r27
    1154:	66 1f       	adc	r22, r22
    1156:	77 1f       	adc	r23, r23
    1158:	88 1f       	adc	r24, r24
    115a:	91 50       	subi	r25, 0x01	; 1
    115c:	50 40       	sbci	r21, 0x00	; 0
    115e:	a9 f7       	brne	.-22     	; 0x114a <__mulsf3_pse+0x64>
    1160:	9e 3f       	cpi	r25, 0xFE	; 254
    1162:	51 05       	cpc	r21, r1
    1164:	70 f0       	brcs	.+28     	; 0x1182 <__mulsf3_pse+0x9c>
    1166:	60 cf       	rjmp	.-320    	; 0x1028 <__fp_inf>
    1168:	aa cf       	rjmp	.-172    	; 0x10be <__fp_szero>
    116a:	5f 3f       	cpi	r21, 0xFF	; 255
    116c:	ec f3       	brlt	.-6      	; 0x1168 <__mulsf3_pse+0x82>
    116e:	98 3e       	cpi	r25, 0xE8	; 232
    1170:	dc f3       	brlt	.-10     	; 0x1168 <__mulsf3_pse+0x82>
    1172:	86 95       	lsr	r24
    1174:	77 95       	ror	r23
    1176:	67 95       	ror	r22
    1178:	b7 95       	ror	r27
    117a:	f7 95       	ror	r31
    117c:	e7 95       	ror	r30
    117e:	9f 5f       	subi	r25, 0xFF	; 255
    1180:	c1 f7       	brne	.-16     	; 0x1172 <__mulsf3_pse+0x8c>
    1182:	fe 2b       	or	r31, r30
    1184:	88 0f       	add	r24, r24
    1186:	91 1d       	adc	r25, r1
    1188:	96 95       	lsr	r25
    118a:	87 95       	ror	r24
    118c:	97 f9       	bld	r25, 7
    118e:	08 95       	ret

00001190 <__prologue_saves__>:
    1190:	2f 92       	push	r2
    1192:	3f 92       	push	r3
    1194:	4f 92       	push	r4
    1196:	5f 92       	push	r5
    1198:	6f 92       	push	r6
    119a:	7f 92       	push	r7
    119c:	8f 92       	push	r8
    119e:	9f 92       	push	r9
    11a0:	af 92       	push	r10
    11a2:	bf 92       	push	r11
    11a4:	cf 92       	push	r12
    11a6:	df 92       	push	r13
    11a8:	ef 92       	push	r14
    11aa:	ff 92       	push	r15
    11ac:	0f 93       	push	r16
    11ae:	1f 93       	push	r17
    11b0:	cf 93       	push	r28
    11b2:	df 93       	push	r29
    11b4:	cd b7       	in	r28, 0x3d	; 61
    11b6:	de b7       	in	r29, 0x3e	; 62
    11b8:	ca 1b       	sub	r28, r26
    11ba:	db 0b       	sbc	r29, r27
    11bc:	0f b6       	in	r0, 0x3f	; 63
    11be:	f8 94       	cli
    11c0:	de bf       	out	0x3e, r29	; 62
    11c2:	0f be       	out	0x3f, r0	; 63
    11c4:	cd bf       	out	0x3d, r28	; 61
    11c6:	09 94       	ijmp

000011c8 <__epilogue_restores__>:
    11c8:	2a 88       	ldd	r2, Y+18	; 0x12
    11ca:	39 88       	ldd	r3, Y+17	; 0x11
    11cc:	48 88       	ldd	r4, Y+16	; 0x10
    11ce:	5f 84       	ldd	r5, Y+15	; 0x0f
    11d0:	6e 84       	ldd	r6, Y+14	; 0x0e
    11d2:	7d 84       	ldd	r7, Y+13	; 0x0d
    11d4:	8c 84       	ldd	r8, Y+12	; 0x0c
    11d6:	9b 84       	ldd	r9, Y+11	; 0x0b
    11d8:	aa 84       	ldd	r10, Y+10	; 0x0a
    11da:	b9 84       	ldd	r11, Y+9	; 0x09
    11dc:	c8 84       	ldd	r12, Y+8	; 0x08
    11de:	df 80       	ldd	r13, Y+7	; 0x07
    11e0:	ee 80       	ldd	r14, Y+6	; 0x06
    11e2:	fd 80       	ldd	r15, Y+5	; 0x05
    11e4:	0c 81       	ldd	r16, Y+4	; 0x04
    11e6:	1b 81       	ldd	r17, Y+3	; 0x03
    11e8:	aa 81       	ldd	r26, Y+2	; 0x02
    11ea:	b9 81       	ldd	r27, Y+1	; 0x01
    11ec:	ce 0f       	add	r28, r30
    11ee:	d1 1d       	adc	r29, r1
    11f0:	0f b6       	in	r0, 0x3f	; 63
    11f2:	f8 94       	cli
    11f4:	de bf       	out	0x3e, r29	; 62
    11f6:	0f be       	out	0x3f, r0	; 63
    11f8:	cd bf       	out	0x3d, r28	; 61
    11fa:	ed 01       	movw	r28, r26
    11fc:	08 95       	ret

000011fe <__ftoa_engine>:
    11fe:	28 30       	cpi	r18, 0x08	; 8
    1200:	08 f0       	brcs	.+2      	; 0x1204 <__ftoa_engine+0x6>
    1202:	27 e0       	ldi	r18, 0x07	; 7
    1204:	33 27       	eor	r19, r19
    1206:	da 01       	movw	r26, r20
    1208:	99 0f       	add	r25, r25
    120a:	31 1d       	adc	r19, r1
    120c:	87 fd       	sbrc	r24, 7
    120e:	91 60       	ori	r25, 0x01	; 1
    1210:	00 96       	adiw	r24, 0x00	; 0
    1212:	61 05       	cpc	r22, r1
    1214:	71 05       	cpc	r23, r1
    1216:	39 f4       	brne	.+14     	; 0x1226 <__ftoa_engine+0x28>
    1218:	32 60       	ori	r19, 0x02	; 2
    121a:	2e 5f       	subi	r18, 0xFE	; 254
    121c:	3d 93       	st	X+, r19
    121e:	30 e3       	ldi	r19, 0x30	; 48
    1220:	2a 95       	dec	r18
    1222:	e1 f7       	brne	.-8      	; 0x121c <__ftoa_engine+0x1e>
    1224:	08 95       	ret
    1226:	9f 3f       	cpi	r25, 0xFF	; 255
    1228:	30 f0       	brcs	.+12     	; 0x1236 <__ftoa_engine+0x38>
    122a:	80 38       	cpi	r24, 0x80	; 128
    122c:	71 05       	cpc	r23, r1
    122e:	61 05       	cpc	r22, r1
    1230:	09 f0       	breq	.+2      	; 0x1234 <__ftoa_engine+0x36>
    1232:	3c 5f       	subi	r19, 0xFC	; 252
    1234:	3c 5f       	subi	r19, 0xFC	; 252
    1236:	3d 93       	st	X+, r19
    1238:	91 30       	cpi	r25, 0x01	; 1
    123a:	08 f0       	brcs	.+2      	; 0x123e <__ftoa_engine+0x40>
    123c:	80 68       	ori	r24, 0x80	; 128
    123e:	91 1d       	adc	r25, r1
    1240:	df 93       	push	r29
    1242:	cf 93       	push	r28
    1244:	1f 93       	push	r17
    1246:	0f 93       	push	r16
    1248:	ff 92       	push	r15
    124a:	ef 92       	push	r14
    124c:	19 2f       	mov	r17, r25
    124e:	98 7f       	andi	r25, 0xF8	; 248
    1250:	96 95       	lsr	r25
    1252:	e9 2f       	mov	r30, r25
    1254:	96 95       	lsr	r25
    1256:	96 95       	lsr	r25
    1258:	e9 0f       	add	r30, r25
    125a:	ff 27       	eor	r31, r31
    125c:	e6 53       	subi	r30, 0x36	; 54
    125e:	ff 4f       	sbci	r31, 0xFF	; 255
    1260:	99 27       	eor	r25, r25
    1262:	33 27       	eor	r19, r19
    1264:	ee 24       	eor	r14, r14
    1266:	ff 24       	eor	r15, r15
    1268:	a7 01       	movw	r20, r14
    126a:	e7 01       	movw	r28, r14
    126c:	05 90       	lpm	r0, Z+
    126e:	08 94       	sec
    1270:	07 94       	ror	r0
    1272:	28 f4       	brcc	.+10     	; 0x127e <__ftoa_engine+0x80>
    1274:	36 0f       	add	r19, r22
    1276:	e7 1e       	adc	r14, r23
    1278:	f8 1e       	adc	r15, r24
    127a:	49 1f       	adc	r20, r25
    127c:	51 1d       	adc	r21, r1
    127e:	66 0f       	add	r22, r22
    1280:	77 1f       	adc	r23, r23
    1282:	88 1f       	adc	r24, r24
    1284:	99 1f       	adc	r25, r25
    1286:	06 94       	lsr	r0
    1288:	a1 f7       	brne	.-24     	; 0x1272 <__ftoa_engine+0x74>
    128a:	05 90       	lpm	r0, Z+
    128c:	07 94       	ror	r0
    128e:	28 f4       	brcc	.+10     	; 0x129a <__ftoa_engine+0x9c>
    1290:	e7 0e       	add	r14, r23
    1292:	f8 1e       	adc	r15, r24
    1294:	49 1f       	adc	r20, r25
    1296:	56 1f       	adc	r21, r22
    1298:	c1 1d       	adc	r28, r1
    129a:	77 0f       	add	r23, r23
    129c:	88 1f       	adc	r24, r24
    129e:	99 1f       	adc	r25, r25
    12a0:	66 1f       	adc	r22, r22
    12a2:	06 94       	lsr	r0
    12a4:	a1 f7       	brne	.-24     	; 0x128e <__ftoa_engine+0x90>
    12a6:	05 90       	lpm	r0, Z+
    12a8:	07 94       	ror	r0
    12aa:	28 f4       	brcc	.+10     	; 0x12b6 <__ftoa_engine+0xb8>
    12ac:	f8 0e       	add	r15, r24
    12ae:	49 1f       	adc	r20, r25
    12b0:	56 1f       	adc	r21, r22
    12b2:	c7 1f       	adc	r28, r23
    12b4:	d1 1d       	adc	r29, r1
    12b6:	88 0f       	add	r24, r24
    12b8:	99 1f       	adc	r25, r25
    12ba:	66 1f       	adc	r22, r22
    12bc:	77 1f       	adc	r23, r23
    12be:	06 94       	lsr	r0
    12c0:	a1 f7       	brne	.-24     	; 0x12aa <__ftoa_engine+0xac>
    12c2:	05 90       	lpm	r0, Z+
    12c4:	07 94       	ror	r0
    12c6:	20 f4       	brcc	.+8      	; 0x12d0 <__ftoa_engine+0xd2>
    12c8:	49 0f       	add	r20, r25
    12ca:	56 1f       	adc	r21, r22
    12cc:	c7 1f       	adc	r28, r23
    12ce:	d8 1f       	adc	r29, r24
    12d0:	99 0f       	add	r25, r25
    12d2:	66 1f       	adc	r22, r22
    12d4:	77 1f       	adc	r23, r23
    12d6:	88 1f       	adc	r24, r24
    12d8:	06 94       	lsr	r0
    12da:	a9 f7       	brne	.-22     	; 0x12c6 <__ftoa_engine+0xc8>
    12dc:	84 91       	lpm	r24, Z
    12de:	10 95       	com	r17
    12e0:	17 70       	andi	r17, 0x07	; 7
    12e2:	41 f0       	breq	.+16     	; 0x12f4 <__ftoa_engine+0xf6>
    12e4:	d6 95       	lsr	r29
    12e6:	c7 95       	ror	r28
    12e8:	57 95       	ror	r21
    12ea:	47 95       	ror	r20
    12ec:	f7 94       	ror	r15
    12ee:	e7 94       	ror	r14
    12f0:	1a 95       	dec	r17
    12f2:	c1 f7       	brne	.-16     	; 0x12e4 <__ftoa_engine+0xe6>
    12f4:	e0 e7       	ldi	r30, 0x70	; 112
    12f6:	f0 e0       	ldi	r31, 0x00	; 0
    12f8:	68 94       	set
    12fa:	15 90       	lpm	r1, Z+
    12fc:	15 91       	lpm	r17, Z+
    12fe:	35 91       	lpm	r19, Z+
    1300:	65 91       	lpm	r22, Z+
    1302:	95 91       	lpm	r25, Z+
    1304:	05 90       	lpm	r0, Z+
    1306:	7f e2       	ldi	r23, 0x2F	; 47
    1308:	73 95       	inc	r23
    130a:	e1 18       	sub	r14, r1
    130c:	f1 0a       	sbc	r15, r17
    130e:	43 0b       	sbc	r20, r19
    1310:	56 0b       	sbc	r21, r22
    1312:	c9 0b       	sbc	r28, r25
    1314:	d0 09       	sbc	r29, r0
    1316:	c0 f7       	brcc	.-16     	; 0x1308 <__ftoa_engine+0x10a>
    1318:	e1 0c       	add	r14, r1
    131a:	f1 1e       	adc	r15, r17
    131c:	43 1f       	adc	r20, r19
    131e:	56 1f       	adc	r21, r22
    1320:	c9 1f       	adc	r28, r25
    1322:	d0 1d       	adc	r29, r0
    1324:	7e f4       	brtc	.+30     	; 0x1344 <__ftoa_engine+0x146>
    1326:	70 33       	cpi	r23, 0x30	; 48
    1328:	11 f4       	brne	.+4      	; 0x132e <__ftoa_engine+0x130>
    132a:	8a 95       	dec	r24
    132c:	e6 cf       	rjmp	.-52     	; 0x12fa <__ftoa_engine+0xfc>
    132e:	e8 94       	clt
    1330:	01 50       	subi	r16, 0x01	; 1
    1332:	30 f0       	brcs	.+12     	; 0x1340 <__ftoa_engine+0x142>
    1334:	08 0f       	add	r16, r24
    1336:	0a f4       	brpl	.+2      	; 0x133a <__ftoa_engine+0x13c>
    1338:	00 27       	eor	r16, r16
    133a:	02 17       	cp	r16, r18
    133c:	08 f4       	brcc	.+2      	; 0x1340 <__ftoa_engine+0x142>
    133e:	20 2f       	mov	r18, r16
    1340:	23 95       	inc	r18
    1342:	02 2f       	mov	r16, r18
    1344:	7a 33       	cpi	r23, 0x3A	; 58
    1346:	28 f0       	brcs	.+10     	; 0x1352 <__ftoa_engine+0x154>
    1348:	79 e3       	ldi	r23, 0x39	; 57
    134a:	7d 93       	st	X+, r23
    134c:	2a 95       	dec	r18
    134e:	e9 f7       	brne	.-6      	; 0x134a <__ftoa_engine+0x14c>
    1350:	10 c0       	rjmp	.+32     	; 0x1372 <__ftoa_engine+0x174>
    1352:	7d 93       	st	X+, r23
    1354:	2a 95       	dec	r18
    1356:	89 f6       	brne	.-94     	; 0x12fa <__ftoa_engine+0xfc>
    1358:	06 94       	lsr	r0
    135a:	97 95       	ror	r25
    135c:	67 95       	ror	r22
    135e:	37 95       	ror	r19
    1360:	17 95       	ror	r17
    1362:	17 94       	ror	r1
    1364:	e1 18       	sub	r14, r1
    1366:	f1 0a       	sbc	r15, r17
    1368:	43 0b       	sbc	r20, r19
    136a:	56 0b       	sbc	r21, r22
    136c:	c9 0b       	sbc	r28, r25
    136e:	d0 09       	sbc	r29, r0
    1370:	98 f0       	brcs	.+38     	; 0x1398 <__ftoa_engine+0x19a>
    1372:	23 95       	inc	r18
    1374:	7e 91       	ld	r23, -X
    1376:	73 95       	inc	r23
    1378:	7a 33       	cpi	r23, 0x3A	; 58
    137a:	08 f0       	brcs	.+2      	; 0x137e <__ftoa_engine+0x180>
    137c:	70 e3       	ldi	r23, 0x30	; 48
    137e:	7c 93       	st	X, r23
    1380:	20 13       	cpse	r18, r16
    1382:	b8 f7       	brcc	.-18     	; 0x1372 <__ftoa_engine+0x174>
    1384:	7e 91       	ld	r23, -X
    1386:	70 61       	ori	r23, 0x10	; 16
    1388:	7d 93       	st	X+, r23
    138a:	30 f0       	brcs	.+12     	; 0x1398 <__ftoa_engine+0x19a>
    138c:	83 95       	inc	r24
    138e:	71 e3       	ldi	r23, 0x31	; 49
    1390:	7d 93       	st	X+, r23
    1392:	70 e3       	ldi	r23, 0x30	; 48
    1394:	2a 95       	dec	r18
    1396:	e1 f7       	brne	.-8      	; 0x1390 <__ftoa_engine+0x192>
    1398:	11 24       	eor	r1, r1
    139a:	ef 90       	pop	r14
    139c:	ff 90       	pop	r15
    139e:	0f 91       	pop	r16
    13a0:	1f 91       	pop	r17
    13a2:	cf 91       	pop	r28
    13a4:	df 91       	pop	r29
    13a6:	99 27       	eor	r25, r25
    13a8:	87 fd       	sbrc	r24, 7
    13aa:	90 95       	com	r25
    13ac:	08 95       	ret

000013ae <strnlen_P>:
    13ae:	fc 01       	movw	r30, r24
    13b0:	05 90       	lpm	r0, Z+
    13b2:	61 50       	subi	r22, 0x01	; 1
    13b4:	70 40       	sbci	r23, 0x00	; 0
    13b6:	01 10       	cpse	r0, r1
    13b8:	d8 f7       	brcc	.-10     	; 0x13b0 <strnlen_P+0x2>
    13ba:	80 95       	com	r24
    13bc:	90 95       	com	r25
    13be:	8e 0f       	add	r24, r30
    13c0:	9f 1f       	adc	r25, r31
    13c2:	08 95       	ret

000013c4 <strnlen>:
    13c4:	fc 01       	movw	r30, r24
    13c6:	61 50       	subi	r22, 0x01	; 1
    13c8:	70 40       	sbci	r23, 0x00	; 0
    13ca:	01 90       	ld	r0, Z+
    13cc:	01 10       	cpse	r0, r1
    13ce:	d8 f7       	brcc	.-10     	; 0x13c6 <strnlen+0x2>
    13d0:	80 95       	com	r24
    13d2:	90 95       	com	r25
    13d4:	8e 0f       	add	r24, r30
    13d6:	9f 1f       	adc	r25, r31
    13d8:	08 95       	ret

000013da <fputc>:
    13da:	0f 93       	push	r16
    13dc:	1f 93       	push	r17
    13de:	cf 93       	push	r28
    13e0:	df 93       	push	r29
    13e2:	fb 01       	movw	r30, r22
    13e4:	23 81       	ldd	r18, Z+3	; 0x03
    13e6:	21 fd       	sbrc	r18, 1
    13e8:	03 c0       	rjmp	.+6      	; 0x13f0 <fputc+0x16>
    13ea:	8f ef       	ldi	r24, 0xFF	; 255
    13ec:	9f ef       	ldi	r25, 0xFF	; 255
    13ee:	28 c0       	rjmp	.+80     	; 0x1440 <fputc+0x66>
    13f0:	22 ff       	sbrs	r18, 2
    13f2:	16 c0       	rjmp	.+44     	; 0x1420 <fputc+0x46>
    13f4:	46 81       	ldd	r20, Z+6	; 0x06
    13f6:	57 81       	ldd	r21, Z+7	; 0x07
    13f8:	24 81       	ldd	r18, Z+4	; 0x04
    13fa:	35 81       	ldd	r19, Z+5	; 0x05
    13fc:	42 17       	cp	r20, r18
    13fe:	53 07       	cpc	r21, r19
    1400:	44 f4       	brge	.+16     	; 0x1412 <fputc+0x38>
    1402:	a0 81       	ld	r26, Z
    1404:	b1 81       	ldd	r27, Z+1	; 0x01
    1406:	9d 01       	movw	r18, r26
    1408:	2f 5f       	subi	r18, 0xFF	; 255
    140a:	3f 4f       	sbci	r19, 0xFF	; 255
    140c:	31 83       	std	Z+1, r19	; 0x01
    140e:	20 83       	st	Z, r18
    1410:	8c 93       	st	X, r24
    1412:	26 81       	ldd	r18, Z+6	; 0x06
    1414:	37 81       	ldd	r19, Z+7	; 0x07
    1416:	2f 5f       	subi	r18, 0xFF	; 255
    1418:	3f 4f       	sbci	r19, 0xFF	; 255
    141a:	37 83       	std	Z+7, r19	; 0x07
    141c:	26 83       	std	Z+6, r18	; 0x06
    141e:	10 c0       	rjmp	.+32     	; 0x1440 <fputc+0x66>
    1420:	eb 01       	movw	r28, r22
    1422:	09 2f       	mov	r16, r25
    1424:	18 2f       	mov	r17, r24
    1426:	00 84       	ldd	r0, Z+8	; 0x08
    1428:	f1 85       	ldd	r31, Z+9	; 0x09
    142a:	e0 2d       	mov	r30, r0
    142c:	09 95       	icall
    142e:	89 2b       	or	r24, r25
    1430:	e1 f6       	brne	.-72     	; 0x13ea <fputc+0x10>
    1432:	8e 81       	ldd	r24, Y+6	; 0x06
    1434:	9f 81       	ldd	r25, Y+7	; 0x07
    1436:	01 96       	adiw	r24, 0x01	; 1
    1438:	9f 83       	std	Y+7, r25	; 0x07
    143a:	8e 83       	std	Y+6, r24	; 0x06
    143c:	81 2f       	mov	r24, r17
    143e:	90 2f       	mov	r25, r16
    1440:	df 91       	pop	r29
    1442:	cf 91       	pop	r28
    1444:	1f 91       	pop	r17
    1446:	0f 91       	pop	r16
    1448:	08 95       	ret

0000144a <__ultoa_invert>:
    144a:	fa 01       	movw	r30, r20
    144c:	aa 27       	eor	r26, r26
    144e:	28 30       	cpi	r18, 0x08	; 8
    1450:	51 f1       	breq	.+84     	; 0x14a6 <__ultoa_invert+0x5c>
    1452:	20 31       	cpi	r18, 0x10	; 16
    1454:	81 f1       	breq	.+96     	; 0x14b6 <__ultoa_invert+0x6c>
    1456:	e8 94       	clt
    1458:	6f 93       	push	r22
    145a:	6e 7f       	andi	r22, 0xFE	; 254
    145c:	6e 5f       	subi	r22, 0xFE	; 254
    145e:	7f 4f       	sbci	r23, 0xFF	; 255
    1460:	8f 4f       	sbci	r24, 0xFF	; 255
    1462:	9f 4f       	sbci	r25, 0xFF	; 255
    1464:	af 4f       	sbci	r26, 0xFF	; 255
    1466:	b1 e0       	ldi	r27, 0x01	; 1
    1468:	3e d0       	rcall	.+124    	; 0x14e6 <__ultoa_invert+0x9c>
    146a:	b4 e0       	ldi	r27, 0x04	; 4
    146c:	3c d0       	rcall	.+120    	; 0x14e6 <__ultoa_invert+0x9c>
    146e:	67 0f       	add	r22, r23
    1470:	78 1f       	adc	r23, r24
    1472:	89 1f       	adc	r24, r25
    1474:	9a 1f       	adc	r25, r26
    1476:	a1 1d       	adc	r26, r1
    1478:	68 0f       	add	r22, r24
    147a:	79 1f       	adc	r23, r25
    147c:	8a 1f       	adc	r24, r26
    147e:	91 1d       	adc	r25, r1
    1480:	a1 1d       	adc	r26, r1
    1482:	6a 0f       	add	r22, r26
    1484:	71 1d       	adc	r23, r1
    1486:	81 1d       	adc	r24, r1
    1488:	91 1d       	adc	r25, r1
    148a:	a1 1d       	adc	r26, r1
    148c:	20 d0       	rcall	.+64     	; 0x14ce <__ultoa_invert+0x84>
    148e:	09 f4       	brne	.+2      	; 0x1492 <__ultoa_invert+0x48>
    1490:	68 94       	set
    1492:	3f 91       	pop	r19
    1494:	2a e0       	ldi	r18, 0x0A	; 10
    1496:	26 9f       	mul	r18, r22
    1498:	11 24       	eor	r1, r1
    149a:	30 19       	sub	r19, r0
    149c:	30 5d       	subi	r19, 0xD0	; 208
    149e:	31 93       	st	Z+, r19
    14a0:	de f6       	brtc	.-74     	; 0x1458 <__ultoa_invert+0xe>
    14a2:	cf 01       	movw	r24, r30
    14a4:	08 95       	ret
    14a6:	46 2f       	mov	r20, r22
    14a8:	47 70       	andi	r20, 0x07	; 7
    14aa:	40 5d       	subi	r20, 0xD0	; 208
    14ac:	41 93       	st	Z+, r20
    14ae:	b3 e0       	ldi	r27, 0x03	; 3
    14b0:	0f d0       	rcall	.+30     	; 0x14d0 <__ultoa_invert+0x86>
    14b2:	c9 f7       	brne	.-14     	; 0x14a6 <__ultoa_invert+0x5c>
    14b4:	f6 cf       	rjmp	.-20     	; 0x14a2 <__ultoa_invert+0x58>
    14b6:	46 2f       	mov	r20, r22
    14b8:	4f 70       	andi	r20, 0x0F	; 15
    14ba:	40 5d       	subi	r20, 0xD0	; 208
    14bc:	4a 33       	cpi	r20, 0x3A	; 58
    14be:	18 f0       	brcs	.+6      	; 0x14c6 <__ultoa_invert+0x7c>
    14c0:	49 5d       	subi	r20, 0xD9	; 217
    14c2:	31 fd       	sbrc	r19, 1
    14c4:	40 52       	subi	r20, 0x20	; 32
    14c6:	41 93       	st	Z+, r20
    14c8:	02 d0       	rcall	.+4      	; 0x14ce <__ultoa_invert+0x84>
    14ca:	a9 f7       	brne	.-22     	; 0x14b6 <__ultoa_invert+0x6c>
    14cc:	ea cf       	rjmp	.-44     	; 0x14a2 <__ultoa_invert+0x58>
    14ce:	b4 e0       	ldi	r27, 0x04	; 4
    14d0:	a6 95       	lsr	r26
    14d2:	97 95       	ror	r25
    14d4:	87 95       	ror	r24
    14d6:	77 95       	ror	r23
    14d8:	67 95       	ror	r22
    14da:	ba 95       	dec	r27
    14dc:	c9 f7       	brne	.-14     	; 0x14d0 <__ultoa_invert+0x86>
    14de:	00 97       	sbiw	r24, 0x00	; 0
    14e0:	61 05       	cpc	r22, r1
    14e2:	71 05       	cpc	r23, r1
    14e4:	08 95       	ret
    14e6:	9b 01       	movw	r18, r22
    14e8:	ac 01       	movw	r20, r24
    14ea:	0a 2e       	mov	r0, r26
    14ec:	06 94       	lsr	r0
    14ee:	57 95       	ror	r21
    14f0:	47 95       	ror	r20
    14f2:	37 95       	ror	r19
    14f4:	27 95       	ror	r18
    14f6:	ba 95       	dec	r27
    14f8:	c9 f7       	brne	.-14     	; 0x14ec <__ultoa_invert+0xa2>
    14fa:	62 0f       	add	r22, r18
    14fc:	73 1f       	adc	r23, r19
    14fe:	84 1f       	adc	r24, r20
    1500:	95 1f       	adc	r25, r21
    1502:	a0 1d       	adc	r26, r0
    1504:	08 95       	ret

00001506 <_exit>:
    1506:	f8 94       	cli

00001508 <__stop_program>:
    1508:	ff cf       	rjmp	.-2      	; 0x1508 <__stop_program>
