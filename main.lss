
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  0000164c  000016e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000164c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800116  00800116  000016f6  2**0
                  ALLOC
  3 .stab         00002304  00000000  00000000  000016f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000013f4  00000000  00000000  000039fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000027  00000000  00000000  00004df0  2**0
                  CONTENTS, READONLY
  6 .debug_info   000005f4  00000000  00000000  00004e17  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005a2  00000000  00000000  0000540b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001d  00000000  00000000  000059ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  000059ca  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__ctors_end>
       4:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
       8:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
       c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      10:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      14:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      18:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      1c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      20:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      24:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      28:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      2c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      30:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      34:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      38:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      3c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      40:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      44:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      48:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      4c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      50:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      54:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      58:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      5c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      60:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      64:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	6e 61       	ori	r22, 0x1E	; 30
      6a:	6e 00       	.word	0x006e	; ????

0000006c <__c.2240>:
      6c:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      7c:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      8c:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      9c:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
      ac:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
      bc:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
      cc:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
      dc:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
      ec:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
      fc:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     10c:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     11c:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     12c:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     13c:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     14c:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     15c:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000016a <__ctors_end>:
     16a:	11 24       	eor	r1, r1
     16c:	1f be       	out	0x3f, r1	; 63
     16e:	cf ef       	ldi	r28, 0xFF	; 255
     170:	d8 e0       	ldi	r29, 0x08	; 8
     172:	de bf       	out	0x3e, r29	; 62
     174:	cd bf       	out	0x3d, r28	; 61

00000176 <__do_copy_data>:
     176:	11 e0       	ldi	r17, 0x01	; 1
     178:	a0 e0       	ldi	r26, 0x00	; 0
     17a:	b1 e0       	ldi	r27, 0x01	; 1
     17c:	ec e4       	ldi	r30, 0x4C	; 76
     17e:	f6 e1       	ldi	r31, 0x16	; 22
     180:	02 c0       	rjmp	.+4      	; 0x186 <__do_copy_data+0x10>
     182:	05 90       	lpm	r0, Z+
     184:	0d 92       	st	X+, r0
     186:	a6 31       	cpi	r26, 0x16	; 22
     188:	b1 07       	cpc	r27, r17
     18a:	d9 f7       	brne	.-10     	; 0x182 <__do_copy_data+0xc>

0000018c <__do_clear_bss>:
     18c:	11 e0       	ldi	r17, 0x01	; 1
     18e:	a6 e1       	ldi	r26, 0x16	; 22
     190:	b1 e0       	ldi	r27, 0x01	; 1
     192:	01 c0       	rjmp	.+2      	; 0x196 <.do_clear_bss_start>

00000194 <.do_clear_bss_loop>:
     194:	1d 92       	st	X+, r1

00000196 <.do_clear_bss_start>:
     196:	ac 31       	cpi	r26, 0x1C	; 28
     198:	b1 07       	cpc	r27, r17
     19a:	e1 f7       	brne	.-8      	; 0x194 <.do_clear_bss_loop>
     19c:	0e 94 b8 03 	call	0x770	; 0x770 <main>
     1a0:	0c 94 24 0b 	jmp	0x1648	; 0x1648 <_exit>

000001a4 <__bad_interrupt>:
     1a4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001a8 <USART0Init>:
#include "usart.h"
#include <avr/io.h>

void USART0Init(void) {
    // Set baud rate
    UBRR0H = (uint8_t) (UBRR_VALUE >> 8);
     1a8:	10 92 c5 00 	sts	0x00C5, r1
    UBRR0L = (uint8_t) UBRR_VALUE;
     1ac:	87 e6       	ldi	r24, 0x67	; 103
     1ae:	80 93 c4 00 	sts	0x00C4, r24
    // Set frame format to 8 data bits, no parity, 1 stop bit
    UCSR0C |= (1 << UCSZ01) | (1 << UCSZ00);
     1b2:	e2 ec       	ldi	r30, 0xC2	; 194
     1b4:	f0 e0       	ldi	r31, 0x00	; 0
     1b6:	80 81       	ld	r24, Z
     1b8:	86 60       	ori	r24, 0x06	; 6
     1ba:	80 83       	st	Z, r24
    //enable transmission and reception
    UCSR0B |= (1 << RXEN0) | (1 << TXEN0);
     1bc:	e1 ec       	ldi	r30, 0xC1	; 193
     1be:	f0 e0       	ldi	r31, 0x00	; 0
     1c0:	80 81       	ld	r24, Z
     1c2:	88 61       	ori	r24, 0x18	; 24
     1c4:	80 83       	st	Z, r24
     1c6:	08 95       	ret

000001c8 <USART0SendByte>:
}

int USART0SendByte(char u8Data, FILE *stream) {
     1c8:	cf 93       	push	r28
     1ca:	c8 2f       	mov	r28, r24
    if (u8Data == '\n') {
     1cc:	8a 30       	cpi	r24, 0x0A	; 10
     1ce:	29 f4       	brne	.+10     	; 0x1da <USART0SendByte+0x12>
        USART0SendByte('\r', 0);
     1d0:	60 e0       	ldi	r22, 0x00	; 0
     1d2:	70 e0       	ldi	r23, 0x00	; 0
     1d4:	8d e0       	ldi	r24, 0x0D	; 13
     1d6:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <USART0SendByte>
    }
    //wait while previous byte is completed
    while (!(UCSR0A & (1 << UDRE0))) {
     1da:	80 91 c0 00 	lds	r24, 0x00C0
     1de:	85 ff       	sbrs	r24, 5
     1e0:	fc cf       	rjmp	.-8      	; 0x1da <USART0SendByte+0x12>
    };
    // Transmit data
    UDR0 = u8Data;
     1e2:	c0 93 c6 00 	sts	0x00C6, r28
    return 0;
}
     1e6:	80 e0       	ldi	r24, 0x00	; 0
     1e8:	90 e0       	ldi	r25, 0x00	; 0
     1ea:	cf 91       	pop	r28
     1ec:	08 95       	ret

000001ee <USART0ReceiveByte>:
int USART0ReceiveByte(FILE *stream) {
     1ee:	cf 93       	push	r28
    uint8_t u8Data;
    // Wait for byte to be received
    while (!(UCSR0A & (1 << RXC0))) {
     1f0:	20 91 c0 00 	lds	r18, 0x00C0
     1f4:	27 ff       	sbrs	r18, 7
     1f6:	fc cf       	rjmp	.-8      	; 0x1f0 <USART0ReceiveByte+0x2>
    };
    u8Data = UDR0;
     1f8:	c0 91 c6 00 	lds	r28, 0x00C6
    //echo input data
    USART0SendByte(u8Data, stream);
     1fc:	bc 01       	movw	r22, r24
     1fe:	8c 2f       	mov	r24, r28
     200:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <USART0SendByte>
    // Return received data
    return u8Data;
}
     204:	8c 2f       	mov	r24, r28
     206:	90 e0       	ldi	r25, 0x00	; 0
     208:	cf 91       	pop	r28
     20a:	08 95       	ret

0000020c <TWIInit>:
#include <compat/twi.h>
#include <util/delay.h>
void TWIInit(void)
{
    //set SCL to 400kHz
    TWSR = 0x00;
     20c:	10 92 b9 00 	sts	0x00B9, r1
    TWBR = 0x0C;
     210:	8c e0       	ldi	r24, 0x0C	; 12
     212:	80 93 b8 00 	sts	0x00B8, r24
    //enable TWI
    TWCR = (1<<TWEN);
     216:	84 e0       	ldi	r24, 0x04	; 4
     218:	80 93 bc 00 	sts	0x00BC, r24
     21c:	08 95       	ret

0000021e <i2c_start>:
uint8_t i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     21e:	94 ea       	ldi	r25, 0xA4	; 164
     220:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
     224:	90 91 bc 00 	lds	r25, 0x00BC
     228:	97 ff       	sbrs	r25, 7
     22a:	fc cf       	rjmp	.-8      	; 0x224 <i2c_start+0x6>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
     22c:	90 91 b9 00 	lds	r25, 0x00B9
     230:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
     232:	98 30       	cpi	r25, 0x08	; 8
     234:	21 f0       	breq	.+8      	; 0x23e <i2c_start+0x20>
     236:	90 31       	cpi	r25, 0x10	; 16
     238:	11 f0       	breq	.+4      	; 0x23e <i2c_start+0x20>
     23a:	81 e0       	ldi	r24, 0x01	; 1
     23c:	08 95       	ret

	// send device address
	TWDR = address;
     23e:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
     242:	84 e8       	ldi	r24, 0x84	; 132
     244:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
     248:	80 91 bc 00 	lds	r24, 0x00BC
     24c:	87 ff       	sbrs	r24, 7
     24e:	fc cf       	rjmp	.-8      	; 0x248 <i2c_start+0x2a>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
     250:	80 91 b9 00 	lds	r24, 0x00B9
     254:	88 7f       	andi	r24, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
     256:	88 31       	cpi	r24, 0x18	; 24
     258:	11 f0       	breq	.+4      	; 0x25e <i2c_start+0x40>
     25a:	80 34       	cpi	r24, 0x40	; 64
     25c:	71 f7       	brne	.-36     	; 0x23a <i2c_start+0x1c>

	return 0;
     25e:	80 e0       	ldi	r24, 0x00	; 0

}
     260:	08 95       	ret

00000262 <i2c_start_wait>:


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     262:	24 ea       	ldi	r18, 0xA4	; 164
    	twst = TW_STATUS & 0xF8;
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
    	TWCR = (1<<TWINT) | (1<<TWEN);
     264:	34 e8       	ldi	r19, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     266:	44 e9       	ldi	r20, 0x94	; 148


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     268:	20 93 bc 00 	sts	0x00BC, r18
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
     26c:	90 91 bc 00 	lds	r25, 0x00BC
     270:	97 ff       	sbrs	r25, 7
     272:	fc cf       	rjmp	.-8      	; 0x26c <i2c_start_wait+0xa>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
     274:	90 91 b9 00 	lds	r25, 0x00B9
     278:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
     27a:	98 30       	cpi	r25, 0x08	; 8
     27c:	11 f0       	breq	.+4      	; 0x282 <i2c_start_wait+0x20>
     27e:	90 31       	cpi	r25, 0x10	; 16
     280:	99 f7       	brne	.-26     	; 0x268 <i2c_start_wait+0x6>
    
    	// send device address
    	TWDR = address;
     282:	80 93 bb 00 	sts	0x00BB, r24
    	TWCR = (1<<TWINT) | (1<<TWEN);
     286:	30 93 bc 00 	sts	0x00BC, r19
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
     28a:	90 91 bc 00 	lds	r25, 0x00BC
     28e:	97 ff       	sbrs	r25, 7
     290:	fc cf       	rjmp	.-8      	; 0x28a <i2c_start_wait+0x28>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
     292:	90 91 b9 00 	lds	r25, 0x00B9
     296:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
     298:	90 32       	cpi	r25, 0x20	; 32
     29a:	11 f0       	breq	.+4      	; 0x2a0 <i2c_start_wait+0x3e>
     29c:	98 35       	cpi	r25, 0x58	; 88
     29e:	39 f4       	brne	.+14     	; 0x2ae <i2c_start_wait+0x4c>
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     2a0:	40 93 bc 00 	sts	0x00BC, r20
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
     2a4:	90 91 bc 00 	lds	r25, 0x00BC
     2a8:	94 fd       	sbrc	r25, 4
     2aa:	fc cf       	rjmp	.-8      	; 0x2a4 <i2c_start_wait+0x42>
     2ac:	dd cf       	rjmp	.-70     	; 0x268 <i2c_start_wait+0x6>
     2ae:	08 95       	ret

000002b0 <i2c_rep_start>:
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
uint8_t i2c_rep_start(unsigned char address)
{
    return i2c_start( address );
     2b0:	0c 94 0f 01 	jmp	0x21e	; 0x21e <i2c_start>

000002b4 <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     2b4:	84 e9       	ldi	r24, 0x94	; 148
     2b6:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
     2ba:	80 91 bc 00 	lds	r24, 0x00BC
     2be:	84 fd       	sbrc	r24, 4
     2c0:	fc cf       	rjmp	.-8      	; 0x2ba <i2c_stop+0x6>

}
     2c2:	08 95       	ret

000002c4 <i2c_write>:
uint8_t i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
     2c4:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
     2c8:	84 e8       	ldi	r24, 0x84	; 132
     2ca:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
     2ce:	80 91 bc 00 	lds	r24, 0x00BC
     2d2:	87 ff       	sbrs	r24, 7
     2d4:	fc cf       	rjmp	.-8      	; 0x2ce <i2c_write+0xa>

	// check value of TWI Status Register. Mask prescaler bits only need the top 5 bits
	twst = TW_STATUS & 0xF8;
     2d6:	90 91 b9 00 	lds	r25, 0x00B9
     2da:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
     2dc:	81 e0       	ldi	r24, 0x01	; 1
     2de:	98 32       	cpi	r25, 0x28	; 40
     2e0:	09 f4       	brne	.+2      	; 0x2e4 <i2c_write+0x20>
     2e2:	80 e0       	ldi	r24, 0x00	; 0
	return 0;

}
     2e4:	08 95       	ret

000002e6 <i2c_readAck>:
 
 Return:  byte read from I2C device
*************************************************************************/
uint8_t i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
     2e6:	84 ec       	ldi	r24, 0xC4	; 196
     2e8:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));    
     2ec:	80 91 bc 00 	lds	r24, 0x00BC
     2f0:	87 ff       	sbrs	r24, 7
     2f2:	fc cf       	rjmp	.-8      	; 0x2ec <i2c_readAck+0x6>

    return TWDR;
     2f4:	80 91 bb 00 	lds	r24, 0x00BB

}
     2f8:	08 95       	ret

000002fa <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
uint8_t i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
     2fa:	84 e8       	ldi	r24, 0x84	; 132
     2fc:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
     300:	80 91 bc 00 	lds	r24, 0x00BC
     304:	87 ff       	sbrs	r24, 7
     306:	fc cf       	rjmp	.-8      	; 0x300 <i2c_readNak+0x6>
	
    return TWDR;
     308:	80 91 bb 00 	lds	r24, 0x00BB

     30c:	08 95       	ret

0000030e <read_temp_celsius>:
 
 Return: float value in Celsius
 
*************************************************************************/

float read_temp_celsius(void) {
     30e:	cf 93       	push	r28
    if (i2c_start(BAR_SLAVE_ADDRESS << 1) == 0) {
     310:	8a eb       	ldi	r24, 0xBA	; 186
     312:	0e 94 0f 01 	call	0x21e	; 0x21e <i2c_start>
     316:	88 23       	and	r24, r24
     318:	29 f0       	breq	.+10     	; 0x324 <read_temp_celsius+0x16>
            return (45.5 + ((float) temp) / 480); //To Celsius

        }

    }
    return 1;
     31a:	60 e0       	ldi	r22, 0x00	; 0
     31c:	70 e0       	ldi	r23, 0x00	; 0
     31e:	80 e8       	ldi	r24, 0x80	; 128
     320:	9f e3       	ldi	r25, 0x3F	; 63
     322:	22 c0       	rjmp	.+68     	; 0x368 <read_temp_celsius+0x5a>
 
*************************************************************************/

float read_temp_celsius(void) {
    if (i2c_start(BAR_SLAVE_ADDRESS << 1) == 0) {
        i2c_write(BAR_TEMP_OUT_L | (1 << 7));
     324:	8b ea       	ldi	r24, 0xAB	; 171
     326:	0e 94 62 01 	call	0x2c4	; 0x2c4 <i2c_write>

        if (i2c_rep_start(((uint8_t) BAR_SLAVE_ADDRESS << 1) | 1) == 0) {
     32a:	8b eb       	ldi	r24, 0xBB	; 187
     32c:	0e 94 58 01 	call	0x2b0	; 0x2b0 <i2c_rep_start>
     330:	81 11       	cpse	r24, r1
     332:	f3 cf       	rjmp	.-26     	; 0x31a <read_temp_celsius+0xc>
            uint8_t tl = i2c_read(ACK);
     334:	0e 94 73 01 	call	0x2e6	; 0x2e6 <i2c_readAck>
     338:	c8 2f       	mov	r28, r24
            uint8_t th = i2c_read(NAK);
     33a:	0e 94 7d 01 	call	0x2fa	; 0x2fa <i2c_readNak>
            int16_t temp = (int16_t) (th << 8 | tl);
     33e:	6c 2f       	mov	r22, r28
     340:	70 e0       	ldi	r23, 0x00	; 0
     342:	78 2b       	or	r23, r24
            return (45.5 + ((float) temp) / 480); //To Celsius
     344:	88 27       	eor	r24, r24
     346:	77 fd       	sbrc	r23, 7
     348:	80 95       	com	r24
     34a:	98 2f       	mov	r25, r24
     34c:	0e 94 64 08 	call	0x10c8	; 0x10c8 <__floatsisf>
     350:	20 e0       	ldi	r18, 0x00	; 0
     352:	30 e0       	ldi	r19, 0x00	; 0
     354:	40 ef       	ldi	r20, 0xF0	; 240
     356:	53 e4       	ldi	r21, 0x43	; 67
     358:	0e 94 fa 07 	call	0xff4	; 0xff4 <__divsf3>
     35c:	20 e0       	ldi	r18, 0x00	; 0
     35e:	30 e0       	ldi	r19, 0x00	; 0
     360:	46 e3       	ldi	r20, 0x36	; 54
     362:	52 e4       	ldi	r21, 0x42	; 66
     364:	0e 94 96 07 	call	0xf2c	; 0xf2c <__addsf3>

        }

    }
    return 1;
}/*read_temp_celsius*/
     368:	cf 91       	pop	r28
     36a:	08 95       	ret

0000036c <read_pressure_hpa>:
 Read the pressure
 
 Return: float value in hpa
 
************************************************************************/
float read_pressure_hpa(void) {
     36c:	0f 93       	push	r16
     36e:	1f 93       	push	r17
     370:	cf 93       	push	r28
     372:	df 93       	push	r29
    if (i2c_start(BAR_SLAVE_ADDRESS << 1) == 0) {
     374:	8a eb       	ldi	r24, 0xBA	; 186
     376:	0e 94 0f 01 	call	0x21e	; 0x21e <i2c_start>
     37a:	88 23       	and	r24, r24
     37c:	29 f0       	breq	.+10     	; 0x388 <read_pressure_hpa+0x1c>

            int32_t temp = (int32_t) (int8_t) ph << 16 | (uint16_t) pl << 8 | pxl;
            return ((float) temp / 4096);
        }
    }
    return 1;
     37e:	60 e0       	ldi	r22, 0x00	; 0
     380:	70 e0       	ldi	r23, 0x00	; 0
     382:	80 e8       	ldi	r24, 0x80	; 128
     384:	9f e3       	ldi	r25, 0x3F	; 63
     386:	2f c0       	rjmp	.+94     	; 0x3e6 <read_pressure_hpa+0x7a>
 Return: float value in hpa
 
************************************************************************/
float read_pressure_hpa(void) {
    if (i2c_start(BAR_SLAVE_ADDRESS << 1) == 0) {
        i2c_write(BAR_PRESS_POUT_XL | (1 << 7));
     388:	88 ea       	ldi	r24, 0xA8	; 168
     38a:	0e 94 62 01 	call	0x2c4	; 0x2c4 <i2c_write>

        if (i2c_rep_start(((uint8_t) BAR_SLAVE_ADDRESS << 1) | 1) == 0) {
     38e:	8b eb       	ldi	r24, 0xBB	; 187
     390:	0e 94 58 01 	call	0x2b0	; 0x2b0 <i2c_rep_start>
     394:	81 11       	cpse	r24, r1
     396:	f3 cf       	rjmp	.-26     	; 0x37e <read_pressure_hpa+0x12>
            uint8_t pxl = i2c_read(ACK);
     398:	0e 94 73 01 	call	0x2e6	; 0x2e6 <i2c_readAck>
     39c:	d8 2f       	mov	r29, r24
            uint8_t pl = i2c_read(ACK);
     39e:	0e 94 73 01 	call	0x2e6	; 0x2e6 <i2c_readAck>
     3a2:	c8 2f       	mov	r28, r24
            uint8_t ph = i2c_read(NAK);
     3a4:	0e 94 7d 01 	call	0x2fa	; 0x2fa <i2c_readNak>

            int32_t temp = (int32_t) (int8_t) ph << 16 | (uint16_t) pl << 8 | pxl;
     3a8:	99 27       	eor	r25, r25
     3aa:	87 fd       	sbrc	r24, 7
     3ac:	90 95       	com	r25
     3ae:	a9 2f       	mov	r26, r25
     3b0:	b9 2f       	mov	r27, r25
     3b2:	9c 01       	movw	r18, r24
     3b4:	11 27       	eor	r17, r17
     3b6:	00 27       	eor	r16, r16
     3b8:	4c 2f       	mov	r20, r28
     3ba:	50 e0       	ldi	r21, 0x00	; 0
     3bc:	54 2f       	mov	r21, r20
     3be:	44 27       	eor	r20, r20
     3c0:	60 e0       	ldi	r22, 0x00	; 0
     3c2:	70 e0       	ldi	r23, 0x00	; 0
     3c4:	d9 01       	movw	r26, r18
     3c6:	c8 01       	movw	r24, r16
     3c8:	84 2b       	or	r24, r20
     3ca:	95 2b       	or	r25, r21
     3cc:	a6 2b       	or	r26, r22
     3ce:	b7 2b       	or	r27, r23
     3d0:	bc 01       	movw	r22, r24
     3d2:	cd 01       	movw	r24, r26
     3d4:	6d 2b       	or	r22, r29
            return ((float) temp / 4096);
     3d6:	0e 94 64 08 	call	0x10c8	; 0x10c8 <__floatsisf>
     3da:	20 e0       	ldi	r18, 0x00	; 0
     3dc:	30 e0       	ldi	r19, 0x00	; 0
     3de:	40 e8       	ldi	r20, 0x80	; 128
     3e0:	59 e3       	ldi	r21, 0x39	; 57
     3e2:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <__mulsf3>
        }
    }
    return 1;

}/*read_pressure_hpa*/
     3e6:	df 91       	pop	r29
     3e8:	cf 91       	pop	r28
     3ea:	1f 91       	pop	r17
     3ec:	0f 91       	pop	r16
     3ee:	08 95       	ret

000003f0 <init_bar>:
 Initialize the bar,, more info on the way
 
************************************************************************/

void init_bar(void) {
    write_to_reg(BAR_SLAVE_ADDRESS,BAR_CTRL_REG1, 0xB0);
     3f0:	40 eb       	ldi	r20, 0xB0	; 176
     3f2:	60 e2       	ldi	r22, 0x20	; 32
     3f4:	8d e5       	ldi	r24, 0x5D	; 93
     3f6:	0c 94 73 03 	jmp	0x6e6	; 0x6e6 <write_to_reg>

000003fa <init_gyro>:
 
 *************************************************************************/

void init_gyro(void) {

    write_to_reg(GYRO_SLAVE_ADDRESS, GYRO_LOW_ODR, 0x00);
     3fa:	40 e0       	ldi	r20, 0x00	; 0
     3fc:	69 e3       	ldi	r22, 0x39	; 57
     3fe:	8b e6       	ldi	r24, 0x6B	; 107
     400:	0e 94 73 03 	call	0x6e6	; 0x6e6 <write_to_reg>
    write_to_reg(GYRO_SLAVE_ADDRESS, GYRO_CTRL4, 0x00);
     404:	40 e0       	ldi	r20, 0x00	; 0
     406:	63 e2       	ldi	r22, 0x23	; 35
     408:	8b e6       	ldi	r24, 0x6B	; 107
     40a:	0e 94 73 03 	call	0x6e6	; 0x6e6 <write_to_reg>
    write_to_reg(GYRO_SLAVE_ADDRESS, GYRO_CTRL1, 0x6F);
     40e:	4f e6       	ldi	r20, 0x6F	; 111
     410:	60 e2       	ldi	r22, 0x20	; 32
     412:	8b e6       	ldi	r24, 0x6B	; 107
     414:	0c 94 73 03 	jmp	0x6e6	; 0x6e6 <write_to_reg>

00000418 <read_gyro_values>:
 Read the raw values from all three axis. 16-bit resolution
 
 Input: Pointer to data structure, passed by reference.
 
 *************************************************************************/
void read_gyro_values(struct gyro_data *_gyro_data_) {
     418:	df 92       	push	r13
     41a:	ef 92       	push	r14
     41c:	ff 92       	push	r15
     41e:	0f 93       	push	r16
     420:	1f 93       	push	r17
     422:	cf 93       	push	r28
     424:	df 93       	push	r29
     426:	8c 01       	movw	r16, r24

    if (i2c_start(GYRO_SLAVE_ADDRESS << 1) == 0) {
     428:	86 ed       	ldi	r24, 0xD6	; 214
     42a:	0e 94 0f 01 	call	0x21e	; 0x21e <i2c_start>
     42e:	81 11       	cpse	r24, r1
     430:	29 c0       	rjmp	.+82     	; 0x484 <read_gyro_values+0x6c>
        i2c_write(GYRO_OUT_X_L | (1 << 7)); //Auto increment registers by writing the MSB high
     432:	88 ea       	ldi	r24, 0xA8	; 168
     434:	0e 94 62 01 	call	0x2c4	; 0x2c4 <i2c_write>

        if (i2c_rep_start(((uint8_t) GYRO_SLAVE_ADDRESS << 1) | 1) == 0) {
     438:	87 ed       	ldi	r24, 0xD7	; 215
     43a:	0e 94 58 01 	call	0x2b0	; 0x2b0 <i2c_rep_start>
     43e:	81 11       	cpse	r24, r1
     440:	21 c0       	rjmp	.+66     	; 0x484 <read_gyro_values+0x6c>
            uint8_t xlg = i2c_read(ACK);
     442:	0e 94 73 01 	call	0x2e6	; 0x2e6 <i2c_readAck>
     446:	f8 2e       	mov	r15, r24
            uint8_t xhg = i2c_read(ACK);
     448:	0e 94 73 01 	call	0x2e6	; 0x2e6 <i2c_readAck>
     44c:	d8 2e       	mov	r13, r24

            uint8_t ylg = i2c_read(ACK);
     44e:	0e 94 73 01 	call	0x2e6	; 0x2e6 <i2c_readAck>
     452:	d8 2f       	mov	r29, r24
            uint8_t yhg = i2c_read(ACK);
     454:	0e 94 73 01 	call	0x2e6	; 0x2e6 <i2c_readAck>
     458:	e8 2e       	mov	r14, r24

            uint8_t zlg = i2c_read(ACK);
     45a:	0e 94 73 01 	call	0x2e6	; 0x2e6 <i2c_readAck>
     45e:	c8 2f       	mov	r28, r24
            uint8_t zhg = i2c_read(NAK);
     460:	0e 94 7d 01 	call	0x2fa	; 0x2fa <i2c_readNak>

            _gyro_data_->x = (int16_t) (xhg << 8 | xlg);
     464:	2f 2d       	mov	r18, r15
     466:	30 e0       	ldi	r19, 0x00	; 0
     468:	3d 29       	or	r19, r13
     46a:	f8 01       	movw	r30, r16
     46c:	31 83       	std	Z+1, r19	; 0x01
     46e:	20 83       	st	Z, r18
            _gyro_data_->y = (int16_t) (yhg << 8 | ylg);
     470:	2d 2f       	mov	r18, r29
     472:	30 e0       	ldi	r19, 0x00	; 0
     474:	3e 29       	or	r19, r14
     476:	33 83       	std	Z+3, r19	; 0x03
     478:	22 83       	std	Z+2, r18	; 0x02
            _gyro_data_->z = (int16_t) (zhg << 8 | zlg);
     47a:	2c 2f       	mov	r18, r28
     47c:	30 e0       	ldi	r19, 0x00	; 0
     47e:	38 2b       	or	r19, r24
     480:	35 83       	std	Z+5, r19	; 0x05
     482:	24 83       	std	Z+4, r18	; 0x04

        }
    }
}/*read_gyro_values*/
     484:	df 91       	pop	r29
     486:	cf 91       	pop	r28
     488:	1f 91       	pop	r17
     48a:	0f 91       	pop	r16
     48c:	ff 90       	pop	r15
     48e:	ef 90       	pop	r14
     490:	df 90       	pop	r13
     492:	08 95       	ret

00000494 <read_gyro_values_dps>:

void read_gyro_values_dps(struct gyro_data *_gyro_data_, struct gyro_data_dps *gyro_data_dps) {
     494:	0f 93       	push	r16
     496:	1f 93       	push	r17
     498:	cf 93       	push	r28
     49a:	df 93       	push	r29
     49c:	8c 01       	movw	r16, r24
     49e:	eb 01       	movw	r28, r22
    gyro_data_dps->x = (float) _gyro_data_->x * .00875;
     4a0:	fc 01       	movw	r30, r24
     4a2:	60 81       	ld	r22, Z
     4a4:	71 81       	ldd	r23, Z+1	; 0x01
     4a6:	88 27       	eor	r24, r24
     4a8:	77 fd       	sbrc	r23, 7
     4aa:	80 95       	com	r24
     4ac:	98 2f       	mov	r25, r24
     4ae:	0e 94 64 08 	call	0x10c8	; 0x10c8 <__floatsisf>
     4b2:	29 e2       	ldi	r18, 0x29	; 41
     4b4:	3c e5       	ldi	r19, 0x5C	; 92
     4b6:	4f e0       	ldi	r20, 0x0F	; 15
     4b8:	5c e3       	ldi	r21, 0x3C	; 60
     4ba:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <__mulsf3>
     4be:	68 83       	st	Y, r22
     4c0:	79 83       	std	Y+1, r23	; 0x01
     4c2:	8a 83       	std	Y+2, r24	; 0x02
     4c4:	9b 83       	std	Y+3, r25	; 0x03
    gyro_data_dps->y = (float) _gyro_data_->y * .00875;
     4c6:	f8 01       	movw	r30, r16
     4c8:	62 81       	ldd	r22, Z+2	; 0x02
     4ca:	73 81       	ldd	r23, Z+3	; 0x03
     4cc:	88 27       	eor	r24, r24
     4ce:	77 fd       	sbrc	r23, 7
     4d0:	80 95       	com	r24
     4d2:	98 2f       	mov	r25, r24
     4d4:	0e 94 64 08 	call	0x10c8	; 0x10c8 <__floatsisf>
     4d8:	29 e2       	ldi	r18, 0x29	; 41
     4da:	3c e5       	ldi	r19, 0x5C	; 92
     4dc:	4f e0       	ldi	r20, 0x0F	; 15
     4de:	5c e3       	ldi	r21, 0x3C	; 60
     4e0:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <__mulsf3>
     4e4:	6c 83       	std	Y+4, r22	; 0x04
     4e6:	7d 83       	std	Y+5, r23	; 0x05
     4e8:	8e 83       	std	Y+6, r24	; 0x06
     4ea:	9f 83       	std	Y+7, r25	; 0x07
    gyro_data_dps->z = (float) _gyro_data_->z * .00875;
     4ec:	f8 01       	movw	r30, r16
     4ee:	64 81       	ldd	r22, Z+4	; 0x04
     4f0:	75 81       	ldd	r23, Z+5	; 0x05
     4f2:	88 27       	eor	r24, r24
     4f4:	77 fd       	sbrc	r23, 7
     4f6:	80 95       	com	r24
     4f8:	98 2f       	mov	r25, r24
     4fa:	0e 94 64 08 	call	0x10c8	; 0x10c8 <__floatsisf>
     4fe:	29 e2       	ldi	r18, 0x29	; 41
     500:	3c e5       	ldi	r19, 0x5C	; 92
     502:	4f e0       	ldi	r20, 0x0F	; 15
     504:	5c e3       	ldi	r21, 0x3C	; 60
     506:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <__mulsf3>
     50a:	68 87       	std	Y+8, r22	; 0x08
     50c:	79 87       	std	Y+9, r23	; 0x09
     50e:	8a 87       	std	Y+10, r24	; 0x0a
     510:	9b 87       	std	Y+11, r25	; 0x0b

}/*read_gyro_values_dps*/
     512:	df 91       	pop	r29
     514:	cf 91       	pop	r28
     516:	1f 91       	pop	r17
     518:	0f 91       	pop	r16
     51a:	08 95       	ret

0000051c <read_gyro_values_angle>:

void read_gyro_values_angle(struct gyro_data_dps *_gyro_data_dps, struct gyro_data_angle *gyro_data_angle) {
     51c:	0f 93       	push	r16
     51e:	1f 93       	push	r17
     520:	cf 93       	push	r28
     522:	df 93       	push	r29
     524:	8c 01       	movw	r16, r24
     526:	eb 01       	movw	r28, r22
    gyro_data_angle->x += _gyro_data_dps->x * .02;
     528:	2a e0       	ldi	r18, 0x0A	; 10
     52a:	37 ed       	ldi	r19, 0xD7	; 215
     52c:	43 ea       	ldi	r20, 0xA3	; 163
     52e:	5c e3       	ldi	r21, 0x3C	; 60
     530:	fc 01       	movw	r30, r24
     532:	60 81       	ld	r22, Z
     534:	71 81       	ldd	r23, Z+1	; 0x01
     536:	82 81       	ldd	r24, Z+2	; 0x02
     538:	93 81       	ldd	r25, Z+3	; 0x03
     53a:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <__mulsf3>
     53e:	9b 01       	movw	r18, r22
     540:	ac 01       	movw	r20, r24
     542:	68 81       	ld	r22, Y
     544:	79 81       	ldd	r23, Y+1	; 0x01
     546:	8a 81       	ldd	r24, Y+2	; 0x02
     548:	9b 81       	ldd	r25, Y+3	; 0x03
     54a:	0e 94 96 07 	call	0xf2c	; 0xf2c <__addsf3>
     54e:	68 83       	st	Y, r22
     550:	79 83       	std	Y+1, r23	; 0x01
     552:	8a 83       	std	Y+2, r24	; 0x02
     554:	9b 83       	std	Y+3, r25	; 0x03
    gyro_data_angle->y += _gyro_data_dps->y * .02;
     556:	2a e0       	ldi	r18, 0x0A	; 10
     558:	37 ed       	ldi	r19, 0xD7	; 215
     55a:	43 ea       	ldi	r20, 0xA3	; 163
     55c:	5c e3       	ldi	r21, 0x3C	; 60
     55e:	f8 01       	movw	r30, r16
     560:	64 81       	ldd	r22, Z+4	; 0x04
     562:	75 81       	ldd	r23, Z+5	; 0x05
     564:	86 81       	ldd	r24, Z+6	; 0x06
     566:	97 81       	ldd	r25, Z+7	; 0x07
     568:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <__mulsf3>
     56c:	9b 01       	movw	r18, r22
     56e:	ac 01       	movw	r20, r24
     570:	6c 81       	ldd	r22, Y+4	; 0x04
     572:	7d 81       	ldd	r23, Y+5	; 0x05
     574:	8e 81       	ldd	r24, Y+6	; 0x06
     576:	9f 81       	ldd	r25, Y+7	; 0x07
     578:	0e 94 96 07 	call	0xf2c	; 0xf2c <__addsf3>
     57c:	6c 83       	std	Y+4, r22	; 0x04
     57e:	7d 83       	std	Y+5, r23	; 0x05
     580:	8e 83       	std	Y+6, r24	; 0x06
     582:	9f 83       	std	Y+7, r25	; 0x07
    gyro_data_angle->z += _gyro_data_dps->z * .02;
     584:	2a e0       	ldi	r18, 0x0A	; 10
     586:	37 ed       	ldi	r19, 0xD7	; 215
     588:	43 ea       	ldi	r20, 0xA3	; 163
     58a:	5c e3       	ldi	r21, 0x3C	; 60
     58c:	f8 01       	movw	r30, r16
     58e:	60 85       	ldd	r22, Z+8	; 0x08
     590:	71 85       	ldd	r23, Z+9	; 0x09
     592:	82 85       	ldd	r24, Z+10	; 0x0a
     594:	93 85       	ldd	r25, Z+11	; 0x0b
     596:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <__mulsf3>
     59a:	9b 01       	movw	r18, r22
     59c:	ac 01       	movw	r20, r24
     59e:	68 85       	ldd	r22, Y+8	; 0x08
     5a0:	79 85       	ldd	r23, Y+9	; 0x09
     5a2:	8a 85       	ldd	r24, Y+10	; 0x0a
     5a4:	9b 85       	ldd	r25, Y+11	; 0x0b
     5a6:	0e 94 96 07 	call	0xf2c	; 0xf2c <__addsf3>
     5aa:	68 87       	std	Y+8, r22	; 0x08
     5ac:	79 87       	std	Y+9, r23	; 0x09
     5ae:	8a 87       	std	Y+10, r24	; 0x0a
     5b0:	9b 87       	std	Y+11, r25	; 0x0b

}/*read_gyro_values_angle*/
     5b2:	df 91       	pop	r29
     5b4:	cf 91       	pop	r28
     5b6:	1f 91       	pop	r17
     5b8:	0f 91       	pop	r16
     5ba:	08 95       	ret

000005bc <init_acc>:
 * (+/- 2 g full scale)
 * (50 Hz ODR); AZEN = AYEN = AXEN = 1 (all axes enabled)
 
 *************************************************************************/
void init_acc(void) {
    write_to_reg(ACC_MAG_SLAVE_ADDRESS, ACC_MAG_CTRL2, 0x00);
     5bc:	40 e0       	ldi	r20, 0x00	; 0
     5be:	61 e2       	ldi	r22, 0x21	; 33
     5c0:	8d e1       	ldi	r24, 0x1D	; 29
     5c2:	0e 94 73 03 	call	0x6e6	; 0x6e6 <write_to_reg>
    write_to_reg(ACC_MAG_SLAVE_ADDRESS, ACC_MAG_CTRL1, 0x57);
     5c6:	47 e5       	ldi	r20, 0x57	; 87
     5c8:	60 e2       	ldi	r22, 0x20	; 32
     5ca:	8d e1       	ldi	r24, 0x1D	; 29
     5cc:	0c 94 73 03 	jmp	0x6e6	; 0x6e6 <write_to_reg>

000005d0 <init_mag>:
 * (low power mode off); MD = 00 (continuous-conversion mode)
 
 *************************************************************************/

void init_mag(void) {
    write_to_reg(ACC_MAG_SLAVE_ADDRESS, ACC_MAG_CTRL5, 0x64);
     5d0:	44 e6       	ldi	r20, 0x64	; 100
     5d2:	64 e2       	ldi	r22, 0x24	; 36
     5d4:	8d e1       	ldi	r24, 0x1D	; 29
     5d6:	0e 94 73 03 	call	0x6e6	; 0x6e6 <write_to_reg>
    write_to_reg(ACC_MAG_SLAVE_ADDRESS, ACC_MAG_CTRL6, 0x20);
     5da:	40 e2       	ldi	r20, 0x20	; 32
     5dc:	65 e2       	ldi	r22, 0x25	; 37
     5de:	8d e1       	ldi	r24, 0x1D	; 29
     5e0:	0e 94 73 03 	call	0x6e6	; 0x6e6 <write_to_reg>
    write_to_reg(ACC_MAG_SLAVE_ADDRESS, ACC_MAG_CTRL7, 0x00);
     5e4:	40 e0       	ldi	r20, 0x00	; 0
     5e6:	66 e2       	ldi	r22, 0x26	; 38
     5e8:	8d e1       	ldi	r24, 0x1D	; 29
     5ea:	0c 94 73 03 	jmp	0x6e6	; 0x6e6 <write_to_reg>

000005ee <read_acc_raw>:
/*************************************************************************
 * read_acc_raw values
 
 *************************************************************************/

void read_acc_raw(struct acc_val_raw *_acc_raw_) {
     5ee:	df 92       	push	r13
     5f0:	ef 92       	push	r14
     5f2:	ff 92       	push	r15
     5f4:	0f 93       	push	r16
     5f6:	1f 93       	push	r17
     5f8:	cf 93       	push	r28
     5fa:	df 93       	push	r29
     5fc:	8c 01       	movw	r16, r24
    if (i2c_start(ACC_MAG_SLAVE_ADDRESS << 1) == 0) {
     5fe:	8a e3       	ldi	r24, 0x3A	; 58
     600:	0e 94 0f 01 	call	0x21e	; 0x21e <i2c_start>
     604:	81 11       	cpse	r24, r1
     606:	29 c0       	rjmp	.+82     	; 0x65a <read_acc_raw+0x6c>
        i2c_write(ACC_MAG_OUT_X_L_A | (1 << 7)); //Auto increment registers by writing the MSB high
     608:	88 ea       	ldi	r24, 0xA8	; 168
     60a:	0e 94 62 01 	call	0x2c4	; 0x2c4 <i2c_write>

        if (i2c_rep_start(((uint8_t) ACC_MAG_SLAVE_ADDRESS << 1) | 1) == 0) {
     60e:	8b e3       	ldi	r24, 0x3B	; 59
     610:	0e 94 58 01 	call	0x2b0	; 0x2b0 <i2c_rep_start>
     614:	81 11       	cpse	r24, r1
     616:	21 c0       	rjmp	.+66     	; 0x65a <read_acc_raw+0x6c>
            uint8_t xlg = i2c_read(ACK);
     618:	0e 94 73 01 	call	0x2e6	; 0x2e6 <i2c_readAck>
     61c:	f8 2e       	mov	r15, r24
            uint8_t xhg = i2c_read(ACK);
     61e:	0e 94 73 01 	call	0x2e6	; 0x2e6 <i2c_readAck>
     622:	d8 2e       	mov	r13, r24

            uint8_t ylg = i2c_read(ACK);
     624:	0e 94 73 01 	call	0x2e6	; 0x2e6 <i2c_readAck>
     628:	d8 2f       	mov	r29, r24
            uint8_t yhg = i2c_read(ACK);
     62a:	0e 94 73 01 	call	0x2e6	; 0x2e6 <i2c_readAck>
     62e:	e8 2e       	mov	r14, r24

            uint8_t zlg = i2c_read(ACK);
     630:	0e 94 73 01 	call	0x2e6	; 0x2e6 <i2c_readAck>
     634:	c8 2f       	mov	r28, r24
            uint8_t zhg = i2c_read(NAK);
     636:	0e 94 7d 01 	call	0x2fa	; 0x2fa <i2c_readNak>

            _acc_raw_->x = (int16_t) (xhg << 8 | xlg);
     63a:	2f 2d       	mov	r18, r15
     63c:	30 e0       	ldi	r19, 0x00	; 0
     63e:	3d 29       	or	r19, r13
     640:	f8 01       	movw	r30, r16
     642:	31 83       	std	Z+1, r19	; 0x01
     644:	20 83       	st	Z, r18
            _acc_raw_->y = (int16_t) (yhg << 8 | ylg);
     646:	2d 2f       	mov	r18, r29
     648:	30 e0       	ldi	r19, 0x00	; 0
     64a:	3e 29       	or	r19, r14
     64c:	33 83       	std	Z+3, r19	; 0x03
     64e:	22 83       	std	Z+2, r18	; 0x02
            _acc_raw_->z = (int16_t) (zhg << 8 | zlg);
     650:	2c 2f       	mov	r18, r28
     652:	30 e0       	ldi	r19, 0x00	; 0
     654:	38 2b       	or	r19, r24
     656:	35 83       	std	Z+5, r19	; 0x05
     658:	24 83       	std	Z+4, r18	; 0x04

        }
    }

}/*read_acc_raw*/
     65a:	df 91       	pop	r29
     65c:	cf 91       	pop	r28
     65e:	1f 91       	pop	r17
     660:	0f 91       	pop	r16
     662:	ff 90       	pop	r15
     664:	ef 90       	pop	r14
     666:	df 90       	pop	r13
     668:	08 95       	ret

0000066a <read_mag_raw>:
 * read_mag_raw values
 * 
 
 *************************************************************************/

void read_mag_raw(struct mag_val_raw *_mag_raw_) {
     66a:	df 92       	push	r13
     66c:	ef 92       	push	r14
     66e:	ff 92       	push	r15
     670:	0f 93       	push	r16
     672:	1f 93       	push	r17
     674:	cf 93       	push	r28
     676:	df 93       	push	r29
     678:	8c 01       	movw	r16, r24
    if (i2c_start(ACC_MAG_SLAVE_ADDRESS << 1) == 0) {
     67a:	8a e3       	ldi	r24, 0x3A	; 58
     67c:	0e 94 0f 01 	call	0x21e	; 0x21e <i2c_start>
     680:	81 11       	cpse	r24, r1
     682:	29 c0       	rjmp	.+82     	; 0x6d6 <read_mag_raw+0x6c>
        i2c_write(ACC_MAG_OUT_X_L_M | (1 << 7)); //Auto increment registers by writing the MSB high
     684:	88 e8       	ldi	r24, 0x88	; 136
     686:	0e 94 62 01 	call	0x2c4	; 0x2c4 <i2c_write>

        if (i2c_rep_start(((uint8_t) ACC_MAG_SLAVE_ADDRESS << 1) | 1) == 0) {
     68a:	8b e3       	ldi	r24, 0x3B	; 59
     68c:	0e 94 58 01 	call	0x2b0	; 0x2b0 <i2c_rep_start>
     690:	81 11       	cpse	r24, r1
     692:	21 c0       	rjmp	.+66     	; 0x6d6 <read_mag_raw+0x6c>
            uint8_t xlm = i2c_read(ACK);
     694:	0e 94 73 01 	call	0x2e6	; 0x2e6 <i2c_readAck>
     698:	f8 2e       	mov	r15, r24
            uint8_t xhm = i2c_read(ACK);
     69a:	0e 94 73 01 	call	0x2e6	; 0x2e6 <i2c_readAck>
     69e:	d8 2e       	mov	r13, r24

            uint8_t ylm = i2c_read(ACK);
     6a0:	0e 94 73 01 	call	0x2e6	; 0x2e6 <i2c_readAck>
     6a4:	d8 2f       	mov	r29, r24
            uint8_t yhm = i2c_read(ACK);
     6a6:	0e 94 73 01 	call	0x2e6	; 0x2e6 <i2c_readAck>
     6aa:	e8 2e       	mov	r14, r24

            uint8_t zlm = i2c_read(ACK);
     6ac:	0e 94 73 01 	call	0x2e6	; 0x2e6 <i2c_readAck>
     6b0:	c8 2f       	mov	r28, r24
            uint8_t zhm = i2c_read(NAK);
     6b2:	0e 94 7d 01 	call	0x2fa	; 0x2fa <i2c_readNak>

            _mag_raw_->x = (int16_t) (xhm << 8 | xlm);
     6b6:	2f 2d       	mov	r18, r15
     6b8:	30 e0       	ldi	r19, 0x00	; 0
     6ba:	3d 29       	or	r19, r13
     6bc:	f8 01       	movw	r30, r16
     6be:	31 83       	std	Z+1, r19	; 0x01
     6c0:	20 83       	st	Z, r18
            _mag_raw_->y = (int16_t) (yhm << 8 | ylm);
     6c2:	2d 2f       	mov	r18, r29
     6c4:	30 e0       	ldi	r19, 0x00	; 0
     6c6:	3e 29       	or	r19, r14
     6c8:	33 83       	std	Z+3, r19	; 0x03
     6ca:	22 83       	std	Z+2, r18	; 0x02
            _mag_raw_->z = (int16_t) (zhm << 8 | zlm);
     6cc:	2c 2f       	mov	r18, r28
     6ce:	30 e0       	ldi	r19, 0x00	; 0
     6d0:	38 2b       	or	r19, r24
     6d2:	35 83       	std	Z+5, r19	; 0x05
     6d4:	24 83       	std	Z+4, r18	; 0x04

        }
    }

     6d6:	df 91       	pop	r29
     6d8:	cf 91       	pop	r28
     6da:	1f 91       	pop	r17
     6dc:	0f 91       	pop	r16
     6de:	ff 90       	pop	r15
     6e0:	ef 90       	pop	r14
     6e2:	df 90       	pop	r13
     6e4:	08 95       	ret

000006e6 <write_to_reg>:
 Return: 0 if success
         1 if fail
 
*************************************************************************/

uint8_t write_to_reg(unsigned char address_slave,unsigned char reg_slave, uint8_t data){
     6e6:	0f 93       	push	r16
     6e8:	1f 93       	push	r17
     6ea:	cf 93       	push	r28
     6ec:	df 93       	push	r29
     6ee:	1f 92       	push	r1
     6f0:	cd b7       	in	r28, 0x3d	; 61
     6f2:	de b7       	in	r29, 0x3e	; 62
     6f4:	04 2f       	mov	r16, r20
     if (i2c_start(address_slave << 1) == 0) {
     6f6:	88 0f       	add	r24, r24
     6f8:	69 83       	std	Y+1, r22	; 0x01
     6fa:	0e 94 0f 01 	call	0x21e	; 0x21e <i2c_start>
     6fe:	18 2f       	mov	r17, r24
     700:	69 81       	ldd	r22, Y+1	; 0x01
     702:	81 11       	cpse	r24, r1
     704:	09 c0       	rjmp	.+18     	; 0x718 <write_to_reg+0x32>
        i2c_write(reg_slave);
     706:	86 2f       	mov	r24, r22
     708:	0e 94 62 01 	call	0x2c4	; 0x2c4 <i2c_write>
        i2c_write(data);
     70c:	80 2f       	mov	r24, r16
     70e:	0e 94 62 01 	call	0x2c4	; 0x2c4 <i2c_write>
        i2c_stop();
     712:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <i2c_stop>
        return 0;
     716:	01 c0       	rjmp	.+2      	; 0x71a <write_to_reg+0x34>
    } else {
        return 1;
     718:	11 e0       	ldi	r17, 0x01	; 1
    }
}/*write_to_reg*/
     71a:	81 2f       	mov	r24, r17
     71c:	0f 90       	pop	r0
     71e:	df 91       	pop	r29
     720:	cf 91       	pop	r28
     722:	1f 91       	pop	r17
     724:	0f 91       	pop	r16
     726:	08 95       	ret

00000728 <read_from_reg>:
     728:	1f 93       	push	r17
     72a:	cf 93       	push	r28
     72c:	df 93       	push	r29
     72e:	1f 92       	push	r1
     730:	cd b7       	in	r28, 0x3d	; 61
     732:	de b7       	in	r29, 0x3e	; 62
     734:	18 2f       	mov	r17, r24
     736:	88 0f       	add	r24, r24
     738:	69 83       	std	Y+1, r22	; 0x01
     73a:	0e 94 0f 01 	call	0x21e	; 0x21e <i2c_start>
     73e:	69 81       	ldd	r22, Y+1	; 0x01
     740:	81 11       	cpse	r24, r1
     742:	10 c0       	rjmp	.+32     	; 0x764 <read_from_reg+0x3c>
     744:	86 2f       	mov	r24, r22
     746:	0e 94 62 01 	call	0x2c4	; 0x2c4 <i2c_write>
     74a:	81 2f       	mov	r24, r17
     74c:	88 0f       	add	r24, r24
     74e:	81 60       	ori	r24, 0x01	; 1
     750:	0e 94 58 01 	call	0x2b0	; 0x2b0 <i2c_rep_start>
     754:	81 11       	cpse	r24, r1
     756:	06 c0       	rjmp	.+12     	; 0x764 <read_from_reg+0x3c>
     758:	0f 90       	pop	r0
     75a:	df 91       	pop	r29
     75c:	cf 91       	pop	r28
     75e:	1f 91       	pop	r17
     760:	0c 94 7d 01 	jmp	0x2fa	; 0x2fa <i2c_readNak>
     764:	81 e0       	ldi	r24, 0x01	; 1
     766:	0f 90       	pop	r0
     768:	df 91       	pop	r29
     76a:	cf 91       	pop	r28
     76c:	1f 91       	pop	r17
     76e:	08 95       	ret

00000770 <main>:
 * 
 *  
 */


int main(void) {
     770:	cf 93       	push	r28
     772:	df 93       	push	r29
     774:	cd b7       	in	r28, 0x3d	; 61
     776:	de b7       	in	r29, 0x3e	; 62
     778:	a0 97       	sbiw	r28, 0x20	; 32
     77a:	0f b6       	in	r0, 0x3f	; 63
     77c:	f8 94       	cli
     77e:	de bf       	out	0x3e, r29	; 62
     780:	0f be       	out	0x3f, r0	; 63
     782:	cd bf       	out	0x3d, r28	; 61
    USART0Init();
     784:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <USART0Init>
    TWIInit();
     788:	0e 94 06 01 	call	0x20c	; 0x20c <TWIInit>
    Acc_raw acc_raw;
    Mag_raw mag_raw;
    

    //Set stream pointer
    FILE usart0_str = FDEV_SETUP_STREAM(USART0SendByte, USART0ReceiveByte, _FDEV_SETUP_RW);
     78c:	fe 01       	movw	r30, r28
     78e:	31 96       	adiw	r30, 0x01	; 1
     790:	8e e0       	ldi	r24, 0x0E	; 14
     792:	df 01       	movw	r26, r30
     794:	1d 92       	st	X+, r1
     796:	8a 95       	dec	r24
     798:	e9 f7       	brne	.-6      	; 0x794 <main+0x24>
     79a:	83 e0       	ldi	r24, 0x03	; 3
     79c:	8c 83       	std	Y+4, r24	; 0x04
     79e:	84 ee       	ldi	r24, 0xE4	; 228
     7a0:	90 e0       	ldi	r25, 0x00	; 0
     7a2:	9a 87       	std	Y+10, r25	; 0x0a
     7a4:	89 87       	std	Y+9, r24	; 0x09
     7a6:	87 ef       	ldi	r24, 0xF7	; 247
     7a8:	90 e0       	ldi	r25, 0x00	; 0
     7aa:	9c 87       	std	Y+12, r25	; 0x0c
     7ac:	8b 87       	std	Y+11, r24	; 0x0b
    //assign our stream to standart I/O streams, cause why re-invent the wheel? Great for debuging :-)
    stdin = stdout = &usart0_str;
     7ae:	f0 93 19 01 	sts	0x0119, r31
     7b2:	e0 93 18 01 	sts	0x0118, r30
     7b6:	f0 93 17 01 	sts	0x0117, r31
     7ba:	e0 93 16 01 	sts	0x0116, r30
    /*gyro*/
            init_gyro();
     7be:	0e 94 fd 01 	call	0x3fa	; 0x3fa <init_gyro>

        /*gyro*/
                _delay_ms(20);
                read_gyro_values(&val);
                read_gyro_values_angle(&val,&val_angle);
                printf("[X: %f Y: %f Z: %f]\n",val_angle.x,val_angle.y,val_angle.z);
     7c2:	00 e0       	ldi	r16, 0x00	; 0
     7c4:	11 e0       	ldi	r17, 0x01	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7c6:	bf ef       	ldi	r27, 0xFF	; 255
     7c8:	29 ef       	ldi	r18, 0xF9	; 249
     7ca:	80 e0       	ldi	r24, 0x00	; 0
     7cc:	b1 50       	subi	r27, 0x01	; 1
     7ce:	20 40       	sbci	r18, 0x00	; 0
     7d0:	80 40       	sbci	r24, 0x00	; 0
     7d2:	e1 f7       	brne	.-8      	; 0x7cc <main+0x5c>
     7d4:	00 c0       	rjmp	.+0      	; 0x7d6 <main+0x66>
     7d6:	00 00       	nop
    while (1) {
        

        /*gyro*/
                _delay_ms(20);
                read_gyro_values(&val);
     7d8:	ce 01       	movw	r24, r28
     7da:	4b 96       	adiw	r24, 0x1b	; 27
     7dc:	0e 94 0c 02 	call	0x418	; 0x418 <read_gyro_values>
                read_gyro_values_angle(&val,&val_angle);
     7e0:	be 01       	movw	r22, r28
     7e2:	61 5f       	subi	r22, 0xF1	; 241
     7e4:	7f 4f       	sbci	r23, 0xFF	; 255
     7e6:	ce 01       	movw	r24, r28
     7e8:	4b 96       	adiw	r24, 0x1b	; 27
     7ea:	0e 94 8e 02 	call	0x51c	; 0x51c <read_gyro_values_angle>
                printf("[X: %f Y: %f Z: %f]\n",val_angle.x,val_angle.y,val_angle.z);
     7ee:	8a 8d       	ldd	r24, Y+26	; 0x1a
     7f0:	8f 93       	push	r24
     7f2:	89 8d       	ldd	r24, Y+25	; 0x19
     7f4:	8f 93       	push	r24
     7f6:	88 8d       	ldd	r24, Y+24	; 0x18
     7f8:	8f 93       	push	r24
     7fa:	8f 89       	ldd	r24, Y+23	; 0x17
     7fc:	8f 93       	push	r24
     7fe:	8e 89       	ldd	r24, Y+22	; 0x16
     800:	8f 93       	push	r24
     802:	8d 89       	ldd	r24, Y+21	; 0x15
     804:	8f 93       	push	r24
     806:	8c 89       	ldd	r24, Y+20	; 0x14
     808:	8f 93       	push	r24
     80a:	8b 89       	ldd	r24, Y+19	; 0x13
     80c:	8f 93       	push	r24
     80e:	8a 89       	ldd	r24, Y+18	; 0x12
     810:	8f 93       	push	r24
     812:	89 89       	ldd	r24, Y+17	; 0x11
     814:	8f 93       	push	r24
     816:	88 89       	ldd	r24, Y+16	; 0x10
     818:	8f 93       	push	r24
     81a:	8f 85       	ldd	r24, Y+15	; 0x0f
     81c:	8f 93       	push	r24
     81e:	1f 93       	push	r17
     820:	0f 93       	push	r16
     822:	0e 94 b0 0a 	call	0x1560	; 0x1560 <printf>
        /*mag*/
//        read_mag_raw(&mag_raw);
//        printf("[X: %d Y: %d Z: %d]\n",mag_raw.x,mag_raw.y,mag_raw.z);


    }
     826:	0f b6       	in	r0, 0x3f	; 63
     828:	f8 94       	cli
     82a:	de bf       	out	0x3e, r29	; 62
     82c:	0f be       	out	0x3f, r0	; 63
     82e:	cd bf       	out	0x3d, r28	; 61
     830:	ca cf       	rjmp	.-108    	; 0x7c6 <main+0x56>

00000832 <vfprintf>:
     832:	a3 e1       	ldi	r26, 0x13	; 19
     834:	b0 e0       	ldi	r27, 0x00	; 0
     836:	ef e1       	ldi	r30, 0x1F	; 31
     838:	f4 e0       	ldi	r31, 0x04	; 4
     83a:	0c 94 53 09 	jmp	0x12a6	; 0x12a6 <__prologue_saves__>
     83e:	6c 01       	movw	r12, r24
     840:	4b 01       	movw	r8, r22
     842:	2a 01       	movw	r4, r20
     844:	fc 01       	movw	r30, r24
     846:	17 82       	std	Z+7, r1	; 0x07
     848:	16 82       	std	Z+6, r1	; 0x06
     84a:	83 81       	ldd	r24, Z+3	; 0x03
     84c:	81 ff       	sbrs	r24, 1
     84e:	43 c3       	rjmp	.+1670   	; 0xed6 <__stack+0x5d7>
     850:	ae 01       	movw	r20, r28
     852:	4f 5f       	subi	r20, 0xFF	; 255
     854:	5f 4f       	sbci	r21, 0xFF	; 255
     856:	3a 01       	movw	r6, r20
     858:	f6 01       	movw	r30, r12
     85a:	93 81       	ldd	r25, Z+3	; 0x03
     85c:	f4 01       	movw	r30, r8
     85e:	93 fd       	sbrc	r25, 3
     860:	85 91       	lpm	r24, Z+
     862:	93 ff       	sbrs	r25, 3
     864:	81 91       	ld	r24, Z+
     866:	4f 01       	movw	r8, r30
     868:	88 23       	and	r24, r24
     86a:	09 f4       	brne	.+2      	; 0x86e <vfprintf+0x3c>
     86c:	30 c3       	rjmp	.+1632   	; 0xece <__stack+0x5cf>
     86e:	85 32       	cpi	r24, 0x25	; 37
     870:	39 f4       	brne	.+14     	; 0x880 <vfprintf+0x4e>
     872:	93 fd       	sbrc	r25, 3
     874:	85 91       	lpm	r24, Z+
     876:	93 ff       	sbrs	r25, 3
     878:	81 91       	ld	r24, Z+
     87a:	4f 01       	movw	r8, r30
     87c:	85 32       	cpi	r24, 0x25	; 37
     87e:	39 f4       	brne	.+14     	; 0x88e <vfprintf+0x5c>
     880:	b6 01       	movw	r22, r12
     882:	90 e0       	ldi	r25, 0x00	; 0
     884:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <fputc>
     888:	52 01       	movw	r10, r4
     88a:	25 01       	movw	r4, r10
     88c:	e5 cf       	rjmp	.-54     	; 0x858 <vfprintf+0x26>
     88e:	10 e0       	ldi	r17, 0x00	; 0
     890:	f1 2c       	mov	r15, r1
     892:	20 e0       	ldi	r18, 0x00	; 0
     894:	20 32       	cpi	r18, 0x20	; 32
     896:	a0 f4       	brcc	.+40     	; 0x8c0 <vfprintf+0x8e>
     898:	8b 32       	cpi	r24, 0x2B	; 43
     89a:	69 f0       	breq	.+26     	; 0x8b6 <vfprintf+0x84>
     89c:	30 f4       	brcc	.+12     	; 0x8aa <vfprintf+0x78>
     89e:	80 32       	cpi	r24, 0x20	; 32
     8a0:	59 f0       	breq	.+22     	; 0x8b8 <vfprintf+0x86>
     8a2:	83 32       	cpi	r24, 0x23	; 35
     8a4:	69 f4       	brne	.+26     	; 0x8c0 <vfprintf+0x8e>
     8a6:	20 61       	ori	r18, 0x10	; 16
     8a8:	2c c0       	rjmp	.+88     	; 0x902 <__stack+0x3>
     8aa:	8d 32       	cpi	r24, 0x2D	; 45
     8ac:	39 f0       	breq	.+14     	; 0x8bc <vfprintf+0x8a>
     8ae:	80 33       	cpi	r24, 0x30	; 48
     8b0:	39 f4       	brne	.+14     	; 0x8c0 <vfprintf+0x8e>
     8b2:	21 60       	ori	r18, 0x01	; 1
     8b4:	26 c0       	rjmp	.+76     	; 0x902 <__stack+0x3>
     8b6:	22 60       	ori	r18, 0x02	; 2
     8b8:	24 60       	ori	r18, 0x04	; 4
     8ba:	23 c0       	rjmp	.+70     	; 0x902 <__stack+0x3>
     8bc:	28 60       	ori	r18, 0x08	; 8
     8be:	21 c0       	rjmp	.+66     	; 0x902 <__stack+0x3>
     8c0:	27 fd       	sbrc	r18, 7
     8c2:	27 c0       	rjmp	.+78     	; 0x912 <__stack+0x13>
     8c4:	30 ed       	ldi	r19, 0xD0	; 208
     8c6:	38 0f       	add	r19, r24
     8c8:	3a 30       	cpi	r19, 0x0A	; 10
     8ca:	78 f4       	brcc	.+30     	; 0x8ea <vfprintf+0xb8>
     8cc:	26 ff       	sbrs	r18, 6
     8ce:	06 c0       	rjmp	.+12     	; 0x8dc <vfprintf+0xaa>
     8d0:	fa e0       	ldi	r31, 0x0A	; 10
     8d2:	1f 9f       	mul	r17, r31
     8d4:	30 0d       	add	r19, r0
     8d6:	11 24       	eor	r1, r1
     8d8:	13 2f       	mov	r17, r19
     8da:	13 c0       	rjmp	.+38     	; 0x902 <__stack+0x3>
     8dc:	4a e0       	ldi	r20, 0x0A	; 10
     8de:	f4 9e       	mul	r15, r20
     8e0:	30 0d       	add	r19, r0
     8e2:	11 24       	eor	r1, r1
     8e4:	f3 2e       	mov	r15, r19
     8e6:	20 62       	ori	r18, 0x20	; 32
     8e8:	0c c0       	rjmp	.+24     	; 0x902 <__stack+0x3>
     8ea:	8e 32       	cpi	r24, 0x2E	; 46
     8ec:	21 f4       	brne	.+8      	; 0x8f6 <vfprintf+0xc4>
     8ee:	26 fd       	sbrc	r18, 6
     8f0:	ee c2       	rjmp	.+1500   	; 0xece <__stack+0x5cf>
     8f2:	20 64       	ori	r18, 0x40	; 64
     8f4:	06 c0       	rjmp	.+12     	; 0x902 <__stack+0x3>
     8f6:	8c 36       	cpi	r24, 0x6C	; 108
     8f8:	11 f4       	brne	.+4      	; 0x8fe <vfprintf+0xcc>
     8fa:	20 68       	ori	r18, 0x80	; 128
     8fc:	02 c0       	rjmp	.+4      	; 0x902 <__stack+0x3>
     8fe:	88 36       	cpi	r24, 0x68	; 104
     900:	41 f4       	brne	.+16     	; 0x912 <__stack+0x13>
     902:	f4 01       	movw	r30, r8
     904:	93 fd       	sbrc	r25, 3
     906:	85 91       	lpm	r24, Z+
     908:	93 ff       	sbrs	r25, 3
     90a:	81 91       	ld	r24, Z+
     90c:	4f 01       	movw	r8, r30
     90e:	81 11       	cpse	r24, r1
     910:	c1 cf       	rjmp	.-126    	; 0x894 <vfprintf+0x62>
     912:	9b eb       	ldi	r25, 0xBB	; 187
     914:	98 0f       	add	r25, r24
     916:	93 30       	cpi	r25, 0x03	; 3
     918:	18 f4       	brcc	.+6      	; 0x920 <__stack+0x21>
     91a:	20 61       	ori	r18, 0x10	; 16
     91c:	80 5e       	subi	r24, 0xE0	; 224
     91e:	06 c0       	rjmp	.+12     	; 0x92c <__stack+0x2d>
     920:	9b e9       	ldi	r25, 0x9B	; 155
     922:	98 0f       	add	r25, r24
     924:	93 30       	cpi	r25, 0x03	; 3
     926:	08 f0       	brcs	.+2      	; 0x92a <__stack+0x2b>
     928:	71 c1       	rjmp	.+738    	; 0xc0c <__stack+0x30d>
     92a:	2f 7e       	andi	r18, 0xEF	; 239
     92c:	26 ff       	sbrs	r18, 6
     92e:	16 e0       	ldi	r17, 0x06	; 6
     930:	2f 73       	andi	r18, 0x3F	; 63
     932:	32 2e       	mov	r3, r18
     934:	85 36       	cpi	r24, 0x65	; 101
     936:	19 f4       	brne	.+6      	; 0x93e <__stack+0x3f>
     938:	20 64       	ori	r18, 0x40	; 64
     93a:	32 2e       	mov	r3, r18
     93c:	08 c0       	rjmp	.+16     	; 0x94e <__stack+0x4f>
     93e:	86 36       	cpi	r24, 0x66	; 102
     940:	21 f4       	brne	.+8      	; 0x94a <__stack+0x4b>
     942:	f2 2f       	mov	r31, r18
     944:	f0 68       	ori	r31, 0x80	; 128
     946:	3f 2e       	mov	r3, r31
     948:	02 c0       	rjmp	.+4      	; 0x94e <__stack+0x4f>
     94a:	11 11       	cpse	r17, r1
     94c:	11 50       	subi	r17, 0x01	; 1
     94e:	37 fe       	sbrs	r3, 7
     950:	07 c0       	rjmp	.+14     	; 0x960 <__stack+0x61>
     952:	1c 33       	cpi	r17, 0x3C	; 60
     954:	50 f4       	brcc	.+20     	; 0x96a <__stack+0x6b>
     956:	ee 24       	eor	r14, r14
     958:	e3 94       	inc	r14
     95a:	e1 0e       	add	r14, r17
     95c:	27 e0       	ldi	r18, 0x07	; 7
     95e:	0b c0       	rjmp	.+22     	; 0x976 <__stack+0x77>
     960:	18 30       	cpi	r17, 0x08	; 8
     962:	38 f0       	brcs	.+14     	; 0x972 <__stack+0x73>
     964:	27 e0       	ldi	r18, 0x07	; 7
     966:	17 e0       	ldi	r17, 0x07	; 7
     968:	05 c0       	rjmp	.+10     	; 0x974 <__stack+0x75>
     96a:	27 e0       	ldi	r18, 0x07	; 7
     96c:	4c e3       	ldi	r20, 0x3C	; 60
     96e:	e4 2e       	mov	r14, r20
     970:	02 c0       	rjmp	.+4      	; 0x976 <__stack+0x77>
     972:	21 2f       	mov	r18, r17
     974:	e1 2c       	mov	r14, r1
     976:	52 01       	movw	r10, r4
     978:	44 e0       	ldi	r20, 0x04	; 4
     97a:	a4 0e       	add	r10, r20
     97c:	b1 1c       	adc	r11, r1
     97e:	f2 01       	movw	r30, r4
     980:	60 81       	ld	r22, Z
     982:	71 81       	ldd	r23, Z+1	; 0x01
     984:	82 81       	ldd	r24, Z+2	; 0x02
     986:	93 81       	ldd	r25, Z+3	; 0x03
     988:	0e 2d       	mov	r16, r14
     98a:	a3 01       	movw	r20, r6
     98c:	0e 94 8a 09 	call	0x1314	; 0x1314 <__ftoa_engine>
     990:	2c 01       	movw	r4, r24
     992:	09 81       	ldd	r16, Y+1	; 0x01
     994:	00 ff       	sbrs	r16, 0
     996:	02 c0       	rjmp	.+4      	; 0x99c <__stack+0x9d>
     998:	03 ff       	sbrs	r16, 3
     99a:	07 c0       	rjmp	.+14     	; 0x9aa <__stack+0xab>
     99c:	31 fc       	sbrc	r3, 1
     99e:	08 c0       	rjmp	.+16     	; 0x9b0 <__stack+0xb1>
     9a0:	32 fe       	sbrs	r3, 2
     9a2:	09 c0       	rjmp	.+18     	; 0x9b6 <__stack+0xb7>
     9a4:	30 e2       	ldi	r19, 0x20	; 32
     9a6:	23 2e       	mov	r2, r19
     9a8:	07 c0       	rjmp	.+14     	; 0x9b8 <__stack+0xb9>
     9aa:	2d e2       	ldi	r18, 0x2D	; 45
     9ac:	22 2e       	mov	r2, r18
     9ae:	04 c0       	rjmp	.+8      	; 0x9b8 <__stack+0xb9>
     9b0:	9b e2       	ldi	r25, 0x2B	; 43
     9b2:	29 2e       	mov	r2, r25
     9b4:	01 c0       	rjmp	.+2      	; 0x9b8 <__stack+0xb9>
     9b6:	21 2c       	mov	r2, r1
     9b8:	80 2f       	mov	r24, r16
     9ba:	8c 70       	andi	r24, 0x0C	; 12
     9bc:	19 f0       	breq	.+6      	; 0x9c4 <__stack+0xc5>
     9be:	21 10       	cpse	r2, r1
     9c0:	68 c2       	rjmp	.+1232   	; 0xe92 <__stack+0x593>
     9c2:	a8 c2       	rjmp	.+1360   	; 0xf14 <__stack+0x615>
     9c4:	37 fe       	sbrs	r3, 7
     9c6:	0f c0       	rjmp	.+30     	; 0x9e6 <__stack+0xe7>
     9c8:	e4 0c       	add	r14, r4
     9ca:	04 ff       	sbrs	r16, 4
     9cc:	04 c0       	rjmp	.+8      	; 0x9d6 <__stack+0xd7>
     9ce:	8a 81       	ldd	r24, Y+2	; 0x02
     9d0:	81 33       	cpi	r24, 0x31	; 49
     9d2:	09 f4       	brne	.+2      	; 0x9d6 <__stack+0xd7>
     9d4:	ea 94       	dec	r14
     9d6:	1e 14       	cp	r1, r14
     9d8:	74 f5       	brge	.+92     	; 0xa36 <__stack+0x137>
     9da:	f8 e0       	ldi	r31, 0x08	; 8
     9dc:	fe 15       	cp	r31, r14
     9de:	78 f5       	brcc	.+94     	; 0xa3e <__stack+0x13f>
     9e0:	88 e0       	ldi	r24, 0x08	; 8
     9e2:	e8 2e       	mov	r14, r24
     9e4:	2c c0       	rjmp	.+88     	; 0xa3e <__stack+0x13f>
     9e6:	36 fc       	sbrc	r3, 6
     9e8:	2a c0       	rjmp	.+84     	; 0xa3e <__stack+0x13f>
     9ea:	81 2f       	mov	r24, r17
     9ec:	90 e0       	ldi	r25, 0x00	; 0
     9ee:	84 15       	cp	r24, r4
     9f0:	95 05       	cpc	r25, r5
     9f2:	9c f0       	brlt	.+38     	; 0xa1a <__stack+0x11b>
     9f4:	2c ef       	ldi	r18, 0xFC	; 252
     9f6:	42 16       	cp	r4, r18
     9f8:	2f ef       	ldi	r18, 0xFF	; 255
     9fa:	52 06       	cpc	r5, r18
     9fc:	74 f0       	brlt	.+28     	; 0xa1a <__stack+0x11b>
     9fe:	43 2d       	mov	r20, r3
     a00:	40 68       	ori	r20, 0x80	; 128
     a02:	34 2e       	mov	r3, r20
     a04:	0a c0       	rjmp	.+20     	; 0xa1a <__stack+0x11b>
     a06:	e2 e0       	ldi	r30, 0x02	; 2
     a08:	f0 e0       	ldi	r31, 0x00	; 0
     a0a:	ec 0f       	add	r30, r28
     a0c:	fd 1f       	adc	r31, r29
     a0e:	e1 0f       	add	r30, r17
     a10:	f1 1d       	adc	r31, r1
     a12:	80 81       	ld	r24, Z
     a14:	80 33       	cpi	r24, 0x30	; 48
     a16:	19 f4       	brne	.+6      	; 0xa1e <__stack+0x11f>
     a18:	11 50       	subi	r17, 0x01	; 1
     a1a:	11 11       	cpse	r17, r1
     a1c:	f4 cf       	rjmp	.-24     	; 0xa06 <__stack+0x107>
     a1e:	37 fe       	sbrs	r3, 7
     a20:	0e c0       	rjmp	.+28     	; 0xa3e <__stack+0x13f>
     a22:	ee 24       	eor	r14, r14
     a24:	e3 94       	inc	r14
     a26:	e1 0e       	add	r14, r17
     a28:	81 2f       	mov	r24, r17
     a2a:	90 e0       	ldi	r25, 0x00	; 0
     a2c:	48 16       	cp	r4, r24
     a2e:	59 06       	cpc	r5, r25
     a30:	2c f4       	brge	.+10     	; 0xa3c <__stack+0x13d>
     a32:	14 19       	sub	r17, r4
     a34:	04 c0       	rjmp	.+8      	; 0xa3e <__stack+0x13f>
     a36:	ee 24       	eor	r14, r14
     a38:	e3 94       	inc	r14
     a3a:	01 c0       	rjmp	.+2      	; 0xa3e <__stack+0x13f>
     a3c:	10 e0       	ldi	r17, 0x00	; 0
     a3e:	37 fe       	sbrs	r3, 7
     a40:	06 c0       	rjmp	.+12     	; 0xa4e <__stack+0x14f>
     a42:	14 14       	cp	r1, r4
     a44:	15 04       	cpc	r1, r5
     a46:	34 f4       	brge	.+12     	; 0xa54 <__stack+0x155>
     a48:	c2 01       	movw	r24, r4
     a4a:	01 96       	adiw	r24, 0x01	; 1
     a4c:	05 c0       	rjmp	.+10     	; 0xa58 <__stack+0x159>
     a4e:	85 e0       	ldi	r24, 0x05	; 5
     a50:	90 e0       	ldi	r25, 0x00	; 0
     a52:	02 c0       	rjmp	.+4      	; 0xa58 <__stack+0x159>
     a54:	81 e0       	ldi	r24, 0x01	; 1
     a56:	90 e0       	ldi	r25, 0x00	; 0
     a58:	21 10       	cpse	r2, r1
     a5a:	01 96       	adiw	r24, 0x01	; 1
     a5c:	11 23       	and	r17, r17
     a5e:	31 f0       	breq	.+12     	; 0xa6c <__stack+0x16d>
     a60:	21 2f       	mov	r18, r17
     a62:	30 e0       	ldi	r19, 0x00	; 0
     a64:	2f 5f       	subi	r18, 0xFF	; 255
     a66:	3f 4f       	sbci	r19, 0xFF	; 255
     a68:	82 0f       	add	r24, r18
     a6a:	93 1f       	adc	r25, r19
     a6c:	2f 2d       	mov	r18, r15
     a6e:	30 e0       	ldi	r19, 0x00	; 0
     a70:	82 17       	cp	r24, r18
     a72:	93 07       	cpc	r25, r19
     a74:	14 f4       	brge	.+4      	; 0xa7a <__stack+0x17b>
     a76:	f8 1a       	sub	r15, r24
     a78:	01 c0       	rjmp	.+2      	; 0xa7c <__stack+0x17d>
     a7a:	f1 2c       	mov	r15, r1
     a7c:	83 2d       	mov	r24, r3
     a7e:	89 70       	andi	r24, 0x09	; 9
     a80:	49 f4       	brne	.+18     	; 0xa94 <__stack+0x195>
     a82:	ff 20       	and	r15, r15
     a84:	39 f0       	breq	.+14     	; 0xa94 <__stack+0x195>
     a86:	b6 01       	movw	r22, r12
     a88:	80 e2       	ldi	r24, 0x20	; 32
     a8a:	90 e0       	ldi	r25, 0x00	; 0
     a8c:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <fputc>
     a90:	fa 94       	dec	r15
     a92:	f7 cf       	rjmp	.-18     	; 0xa82 <__stack+0x183>
     a94:	22 20       	and	r2, r2
     a96:	29 f0       	breq	.+10     	; 0xaa2 <__stack+0x1a3>
     a98:	b6 01       	movw	r22, r12
     a9a:	82 2d       	mov	r24, r2
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <fputc>
     aa2:	33 fc       	sbrc	r3, 3
     aa4:	09 c0       	rjmp	.+18     	; 0xab8 <__stack+0x1b9>
     aa6:	ff 20       	and	r15, r15
     aa8:	39 f0       	breq	.+14     	; 0xab8 <__stack+0x1b9>
     aaa:	b6 01       	movw	r22, r12
     aac:	80 e3       	ldi	r24, 0x30	; 48
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <fputc>
     ab4:	fa 94       	dec	r15
     ab6:	f7 cf       	rjmp	.-18     	; 0xaa6 <__stack+0x1a7>
     ab8:	37 fe       	sbrs	r3, 7
     aba:	5a c0       	rjmp	.+180    	; 0xb70 <__stack+0x271>
     abc:	94 2d       	mov	r25, r4
     abe:	85 2d       	mov	r24, r5
     ac0:	57 fe       	sbrs	r5, 7
     ac2:	02 c0       	rjmp	.+4      	; 0xac8 <__stack+0x1c9>
     ac4:	90 e0       	ldi	r25, 0x00	; 0
     ac6:	80 e0       	ldi	r24, 0x00	; 0
     ac8:	29 2e       	mov	r2, r25
     aca:	38 2e       	mov	r3, r24
     acc:	20 e0       	ldi	r18, 0x00	; 0
     ace:	30 e0       	ldi	r19, 0x00	; 0
     ad0:	a2 01       	movw	r20, r4
     ad2:	4e 19       	sub	r20, r14
     ad4:	51 09       	sbc	r21, r1
     ad6:	5d 87       	std	Y+13, r21	; 0x0d
     ad8:	4c 87       	std	Y+12, r20	; 0x0c
     ada:	a2 01       	movw	r20, r4
     adc:	42 19       	sub	r20, r2
     ade:	53 09       	sbc	r21, r3
     ae0:	5f 87       	std	Y+15, r21	; 0x0f
     ae2:	4e 87       	std	Y+14, r20	; 0x0e
     ae4:	61 2f       	mov	r22, r17
     ae6:	70 e0       	ldi	r23, 0x00	; 0
     ae8:	44 27       	eor	r20, r20
     aea:	55 27       	eor	r21, r21
     aec:	46 1b       	sub	r20, r22
     aee:	57 0b       	sbc	r21, r23
     af0:	59 8b       	std	Y+17, r21	; 0x11
     af2:	48 8b       	std	Y+16, r20	; 0x10
     af4:	5f ef       	ldi	r21, 0xFF	; 255
     af6:	25 16       	cp	r2, r21
     af8:	35 06       	cpc	r3, r21
     afa:	49 f4       	brne	.+18     	; 0xb0e <__stack+0x20f>
     afc:	b6 01       	movw	r22, r12
     afe:	8e e2       	ldi	r24, 0x2E	; 46
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	2a 8b       	std	Y+18, r18	; 0x12
     b04:	3b 8b       	std	Y+19, r19	; 0x13
     b06:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <fputc>
     b0a:	3b 89       	ldd	r19, Y+19	; 0x13
     b0c:	2a 89       	ldd	r18, Y+18	; 0x12
     b0e:	42 14       	cp	r4, r2
     b10:	53 04       	cpc	r5, r3
     b12:	6c f0       	brlt	.+26     	; 0xb2e <__stack+0x22f>
     b14:	4c 85       	ldd	r20, Y+12	; 0x0c
     b16:	5d 85       	ldd	r21, Y+13	; 0x0d
     b18:	42 15       	cp	r20, r2
     b1a:	53 05       	cpc	r21, r3
     b1c:	44 f4       	brge	.+16     	; 0xb2e <__stack+0x22f>
     b1e:	ee 85       	ldd	r30, Y+14	; 0x0e
     b20:	ff 85       	ldd	r31, Y+15	; 0x0f
     b22:	e2 0f       	add	r30, r18
     b24:	f3 1f       	adc	r31, r19
     b26:	e6 0d       	add	r30, r6
     b28:	f7 1d       	adc	r31, r7
     b2a:	81 81       	ldd	r24, Z+1	; 0x01
     b2c:	01 c0       	rjmp	.+2      	; 0xb30 <__stack+0x231>
     b2e:	80 e3       	ldi	r24, 0x30	; 48
     b30:	51 e0       	ldi	r21, 0x01	; 1
     b32:	25 1a       	sub	r2, r21
     b34:	31 08       	sbc	r3, r1
     b36:	2f 5f       	subi	r18, 0xFF	; 255
     b38:	3f 4f       	sbci	r19, 0xFF	; 255
     b3a:	48 89       	ldd	r20, Y+16	; 0x10
     b3c:	59 89       	ldd	r21, Y+17	; 0x11
     b3e:	24 16       	cp	r2, r20
     b40:	35 06       	cpc	r3, r21
     b42:	4c f0       	brlt	.+18     	; 0xb56 <__stack+0x257>
     b44:	b6 01       	movw	r22, r12
     b46:	90 e0       	ldi	r25, 0x00	; 0
     b48:	2a 8b       	std	Y+18, r18	; 0x12
     b4a:	3b 8b       	std	Y+19, r19	; 0x13
     b4c:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <fputc>
     b50:	2a 89       	ldd	r18, Y+18	; 0x12
     b52:	3b 89       	ldd	r19, Y+19	; 0x13
     b54:	cf cf       	rjmp	.-98     	; 0xaf4 <__stack+0x1f5>
     b56:	24 14       	cp	r2, r4
     b58:	35 04       	cpc	r3, r5
     b5a:	39 f4       	brne	.+14     	; 0xb6a <__stack+0x26b>
     b5c:	9a 81       	ldd	r25, Y+2	; 0x02
     b5e:	96 33       	cpi	r25, 0x36	; 54
     b60:	18 f4       	brcc	.+6      	; 0xb68 <__stack+0x269>
     b62:	95 33       	cpi	r25, 0x35	; 53
     b64:	11 f4       	brne	.+4      	; 0xb6a <__stack+0x26b>
     b66:	04 ff       	sbrs	r16, 4
     b68:	81 e3       	ldi	r24, 0x31	; 49
     b6a:	b6 01       	movw	r22, r12
     b6c:	90 e0       	ldi	r25, 0x00	; 0
     b6e:	4b c0       	rjmp	.+150    	; 0xc06 <__stack+0x307>
     b70:	8a 81       	ldd	r24, Y+2	; 0x02
     b72:	81 33       	cpi	r24, 0x31	; 49
     b74:	09 f0       	breq	.+2      	; 0xb78 <__stack+0x279>
     b76:	0f 7e       	andi	r16, 0xEF	; 239
     b78:	b6 01       	movw	r22, r12
     b7a:	90 e0       	ldi	r25, 0x00	; 0
     b7c:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <fputc>
     b80:	11 11       	cpse	r17, r1
     b82:	05 c0       	rjmp	.+10     	; 0xb8e <__stack+0x28f>
     b84:	34 fc       	sbrc	r3, 4
     b86:	18 c0       	rjmp	.+48     	; 0xbb8 <__stack+0x2b9>
     b88:	85 e6       	ldi	r24, 0x65	; 101
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	17 c0       	rjmp	.+46     	; 0xbbc <__stack+0x2bd>
     b8e:	b6 01       	movw	r22, r12
     b90:	8e e2       	ldi	r24, 0x2E	; 46
     b92:	90 e0       	ldi	r25, 0x00	; 0
     b94:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <fputc>
     b98:	82 e0       	ldi	r24, 0x02	; 2
     b9a:	ee 24       	eor	r14, r14
     b9c:	e3 94       	inc	r14
     b9e:	e8 0e       	add	r14, r24
     ba0:	f3 01       	movw	r30, r6
     ba2:	e8 0f       	add	r30, r24
     ba4:	f1 1d       	adc	r31, r1
     ba6:	80 81       	ld	r24, Z
     ba8:	b6 01       	movw	r22, r12
     baa:	90 e0       	ldi	r25, 0x00	; 0
     bac:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <fputc>
     bb0:	11 50       	subi	r17, 0x01	; 1
     bb2:	8e 2d       	mov	r24, r14
     bb4:	91 f7       	brne	.-28     	; 0xb9a <__stack+0x29b>
     bb6:	e6 cf       	rjmp	.-52     	; 0xb84 <__stack+0x285>
     bb8:	85 e4       	ldi	r24, 0x45	; 69
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	b6 01       	movw	r22, r12
     bbe:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <fputc>
     bc2:	57 fc       	sbrc	r5, 7
     bc4:	05 c0       	rjmp	.+10     	; 0xbd0 <__stack+0x2d1>
     bc6:	41 14       	cp	r4, r1
     bc8:	51 04       	cpc	r5, r1
     bca:	39 f4       	brne	.+14     	; 0xbda <__stack+0x2db>
     bcc:	04 ff       	sbrs	r16, 4
     bce:	05 c0       	rjmp	.+10     	; 0xbda <__stack+0x2db>
     bd0:	51 94       	neg	r5
     bd2:	41 94       	neg	r4
     bd4:	51 08       	sbc	r5, r1
     bd6:	8d e2       	ldi	r24, 0x2D	; 45
     bd8:	01 c0       	rjmp	.+2      	; 0xbdc <__stack+0x2dd>
     bda:	8b e2       	ldi	r24, 0x2B	; 43
     bdc:	b6 01       	movw	r22, r12
     bde:	90 e0       	ldi	r25, 0x00	; 0
     be0:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <fputc>
     be4:	80 e3       	ldi	r24, 0x30	; 48
     be6:	9a e0       	ldi	r25, 0x0A	; 10
     be8:	49 16       	cp	r4, r25
     bea:	51 04       	cpc	r5, r1
     bec:	2c f0       	brlt	.+10     	; 0xbf8 <__stack+0x2f9>
     bee:	8f 5f       	subi	r24, 0xFF	; 255
     bf0:	5a e0       	ldi	r21, 0x0A	; 10
     bf2:	45 1a       	sub	r4, r21
     bf4:	51 08       	sbc	r5, r1
     bf6:	f7 cf       	rjmp	.-18     	; 0xbe6 <__stack+0x2e7>
     bf8:	b6 01       	movw	r22, r12
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <fputc>
     c00:	b6 01       	movw	r22, r12
     c02:	c2 01       	movw	r24, r4
     c04:	c0 96       	adiw	r24, 0x30	; 48
     c06:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <fputc>
     c0a:	57 c1       	rjmp	.+686    	; 0xeba <__stack+0x5bb>
     c0c:	83 36       	cpi	r24, 0x63	; 99
     c0e:	31 f0       	breq	.+12     	; 0xc1c <__stack+0x31d>
     c10:	83 37       	cpi	r24, 0x73	; 115
     c12:	79 f0       	breq	.+30     	; 0xc32 <__stack+0x333>
     c14:	83 35       	cpi	r24, 0x53	; 83
     c16:	09 f0       	breq	.+2      	; 0xc1a <__stack+0x31b>
     c18:	58 c0       	rjmp	.+176    	; 0xcca <__stack+0x3cb>
     c1a:	21 c0       	rjmp	.+66     	; 0xc5e <__stack+0x35f>
     c1c:	52 01       	movw	r10, r4
     c1e:	e2 e0       	ldi	r30, 0x02	; 2
     c20:	ae 0e       	add	r10, r30
     c22:	b1 1c       	adc	r11, r1
     c24:	f2 01       	movw	r30, r4
     c26:	80 81       	ld	r24, Z
     c28:	89 83       	std	Y+1, r24	; 0x01
     c2a:	01 e0       	ldi	r16, 0x01	; 1
     c2c:	10 e0       	ldi	r17, 0x00	; 0
     c2e:	23 01       	movw	r4, r6
     c30:	14 c0       	rjmp	.+40     	; 0xc5a <__stack+0x35b>
     c32:	52 01       	movw	r10, r4
     c34:	f2 e0       	ldi	r31, 0x02	; 2
     c36:	af 0e       	add	r10, r31
     c38:	b1 1c       	adc	r11, r1
     c3a:	f2 01       	movw	r30, r4
     c3c:	40 80       	ld	r4, Z
     c3e:	51 80       	ldd	r5, Z+1	; 0x01
     c40:	26 ff       	sbrs	r18, 6
     c42:	03 c0       	rjmp	.+6      	; 0xc4a <__stack+0x34b>
     c44:	61 2f       	mov	r22, r17
     c46:	70 e0       	ldi	r23, 0x00	; 0
     c48:	02 c0       	rjmp	.+4      	; 0xc4e <__stack+0x34f>
     c4a:	6f ef       	ldi	r22, 0xFF	; 255
     c4c:	7f ef       	ldi	r23, 0xFF	; 255
     c4e:	c2 01       	movw	r24, r4
     c50:	2a 8b       	std	Y+18, r18	; 0x12
     c52:	0e 94 6d 0a 	call	0x14da	; 0x14da <strnlen>
     c56:	8c 01       	movw	r16, r24
     c58:	2a 89       	ldd	r18, Y+18	; 0x12
     c5a:	2f 77       	andi	r18, 0x7F	; 127
     c5c:	15 c0       	rjmp	.+42     	; 0xc88 <__stack+0x389>
     c5e:	52 01       	movw	r10, r4
     c60:	f2 e0       	ldi	r31, 0x02	; 2
     c62:	af 0e       	add	r10, r31
     c64:	b1 1c       	adc	r11, r1
     c66:	f2 01       	movw	r30, r4
     c68:	40 80       	ld	r4, Z
     c6a:	51 80       	ldd	r5, Z+1	; 0x01
     c6c:	26 ff       	sbrs	r18, 6
     c6e:	03 c0       	rjmp	.+6      	; 0xc76 <__stack+0x377>
     c70:	61 2f       	mov	r22, r17
     c72:	70 e0       	ldi	r23, 0x00	; 0
     c74:	02 c0       	rjmp	.+4      	; 0xc7a <__stack+0x37b>
     c76:	6f ef       	ldi	r22, 0xFF	; 255
     c78:	7f ef       	ldi	r23, 0xFF	; 255
     c7a:	c2 01       	movw	r24, r4
     c7c:	2a 8b       	std	Y+18, r18	; 0x12
     c7e:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <strnlen_P>
     c82:	8c 01       	movw	r16, r24
     c84:	2a 89       	ldd	r18, Y+18	; 0x12
     c86:	20 68       	ori	r18, 0x80	; 128
     c88:	32 2e       	mov	r3, r18
     c8a:	23 fd       	sbrc	r18, 3
     c8c:	1a c0       	rjmp	.+52     	; 0xcc2 <__stack+0x3c3>
     c8e:	8f 2d       	mov	r24, r15
     c90:	90 e0       	ldi	r25, 0x00	; 0
     c92:	08 17       	cp	r16, r24
     c94:	19 07       	cpc	r17, r25
     c96:	a8 f4       	brcc	.+42     	; 0xcc2 <__stack+0x3c3>
     c98:	b6 01       	movw	r22, r12
     c9a:	80 e2       	ldi	r24, 0x20	; 32
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <fputc>
     ca2:	fa 94       	dec	r15
     ca4:	f4 cf       	rjmp	.-24     	; 0xc8e <__stack+0x38f>
     ca6:	f2 01       	movw	r30, r4
     ca8:	37 fc       	sbrc	r3, 7
     caa:	85 91       	lpm	r24, Z+
     cac:	37 fe       	sbrs	r3, 7
     cae:	81 91       	ld	r24, Z+
     cb0:	2f 01       	movw	r4, r30
     cb2:	b6 01       	movw	r22, r12
     cb4:	90 e0       	ldi	r25, 0x00	; 0
     cb6:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <fputc>
     cba:	f1 10       	cpse	r15, r1
     cbc:	fa 94       	dec	r15
     cbe:	01 50       	subi	r16, 0x01	; 1
     cc0:	11 09       	sbc	r17, r1
     cc2:	01 15       	cp	r16, r1
     cc4:	11 05       	cpc	r17, r1
     cc6:	79 f7       	brne	.-34     	; 0xca6 <__stack+0x3a7>
     cc8:	f8 c0       	rjmp	.+496    	; 0xeba <__stack+0x5bb>
     cca:	84 36       	cpi	r24, 0x64	; 100
     ccc:	11 f0       	breq	.+4      	; 0xcd2 <__stack+0x3d3>
     cce:	89 36       	cpi	r24, 0x69	; 105
     cd0:	59 f5       	brne	.+86     	; 0xd28 <__stack+0x429>
     cd2:	52 01       	movw	r10, r4
     cd4:	27 ff       	sbrs	r18, 7
     cd6:	09 c0       	rjmp	.+18     	; 0xcea <__stack+0x3eb>
     cd8:	f4 e0       	ldi	r31, 0x04	; 4
     cda:	af 0e       	add	r10, r31
     cdc:	b1 1c       	adc	r11, r1
     cde:	f2 01       	movw	r30, r4
     ce0:	60 81       	ld	r22, Z
     ce2:	71 81       	ldd	r23, Z+1	; 0x01
     ce4:	82 81       	ldd	r24, Z+2	; 0x02
     ce6:	93 81       	ldd	r25, Z+3	; 0x03
     ce8:	0a c0       	rjmp	.+20     	; 0xcfe <__stack+0x3ff>
     cea:	f2 e0       	ldi	r31, 0x02	; 2
     cec:	af 0e       	add	r10, r31
     cee:	b1 1c       	adc	r11, r1
     cf0:	f2 01       	movw	r30, r4
     cf2:	60 81       	ld	r22, Z
     cf4:	71 81       	ldd	r23, Z+1	; 0x01
     cf6:	88 27       	eor	r24, r24
     cf8:	77 fd       	sbrc	r23, 7
     cfa:	80 95       	com	r24
     cfc:	98 2f       	mov	r25, r24
     cfe:	2f 76       	andi	r18, 0x6F	; 111
     d00:	32 2e       	mov	r3, r18
     d02:	97 ff       	sbrs	r25, 7
     d04:	09 c0       	rjmp	.+18     	; 0xd18 <__stack+0x419>
     d06:	90 95       	com	r25
     d08:	80 95       	com	r24
     d0a:	70 95       	com	r23
     d0c:	61 95       	neg	r22
     d0e:	7f 4f       	sbci	r23, 0xFF	; 255
     d10:	8f 4f       	sbci	r24, 0xFF	; 255
     d12:	9f 4f       	sbci	r25, 0xFF	; 255
     d14:	20 68       	ori	r18, 0x80	; 128
     d16:	32 2e       	mov	r3, r18
     d18:	2a e0       	ldi	r18, 0x0A	; 10
     d1a:	30 e0       	ldi	r19, 0x00	; 0
     d1c:	a3 01       	movw	r20, r6
     d1e:	0e 94 c6 0a 	call	0x158c	; 0x158c <__ultoa_invert>
     d22:	e8 2e       	mov	r14, r24
     d24:	e6 18       	sub	r14, r6
     d26:	3f c0       	rjmp	.+126    	; 0xda6 <__stack+0x4a7>
     d28:	02 2f       	mov	r16, r18
     d2a:	85 37       	cpi	r24, 0x75	; 117
     d2c:	21 f4       	brne	.+8      	; 0xd36 <__stack+0x437>
     d2e:	0f 7e       	andi	r16, 0xEF	; 239
     d30:	2a e0       	ldi	r18, 0x0A	; 10
     d32:	30 e0       	ldi	r19, 0x00	; 0
     d34:	1d c0       	rjmp	.+58     	; 0xd70 <__stack+0x471>
     d36:	09 7f       	andi	r16, 0xF9	; 249
     d38:	8f 36       	cpi	r24, 0x6F	; 111
     d3a:	91 f0       	breq	.+36     	; 0xd60 <__stack+0x461>
     d3c:	18 f4       	brcc	.+6      	; 0xd44 <__stack+0x445>
     d3e:	88 35       	cpi	r24, 0x58	; 88
     d40:	59 f0       	breq	.+22     	; 0xd58 <__stack+0x459>
     d42:	c5 c0       	rjmp	.+394    	; 0xece <__stack+0x5cf>
     d44:	80 37       	cpi	r24, 0x70	; 112
     d46:	19 f0       	breq	.+6      	; 0xd4e <__stack+0x44f>
     d48:	88 37       	cpi	r24, 0x78	; 120
     d4a:	11 f0       	breq	.+4      	; 0xd50 <__stack+0x451>
     d4c:	c0 c0       	rjmp	.+384    	; 0xece <__stack+0x5cf>
     d4e:	00 61       	ori	r16, 0x10	; 16
     d50:	04 ff       	sbrs	r16, 4
     d52:	09 c0       	rjmp	.+18     	; 0xd66 <__stack+0x467>
     d54:	04 60       	ori	r16, 0x04	; 4
     d56:	07 c0       	rjmp	.+14     	; 0xd66 <__stack+0x467>
     d58:	24 ff       	sbrs	r18, 4
     d5a:	08 c0       	rjmp	.+16     	; 0xd6c <__stack+0x46d>
     d5c:	06 60       	ori	r16, 0x06	; 6
     d5e:	06 c0       	rjmp	.+12     	; 0xd6c <__stack+0x46d>
     d60:	28 e0       	ldi	r18, 0x08	; 8
     d62:	30 e0       	ldi	r19, 0x00	; 0
     d64:	05 c0       	rjmp	.+10     	; 0xd70 <__stack+0x471>
     d66:	20 e1       	ldi	r18, 0x10	; 16
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	02 c0       	rjmp	.+4      	; 0xd70 <__stack+0x471>
     d6c:	20 e1       	ldi	r18, 0x10	; 16
     d6e:	32 e0       	ldi	r19, 0x02	; 2
     d70:	52 01       	movw	r10, r4
     d72:	07 ff       	sbrs	r16, 7
     d74:	09 c0       	rjmp	.+18     	; 0xd88 <__stack+0x489>
     d76:	f4 e0       	ldi	r31, 0x04	; 4
     d78:	af 0e       	add	r10, r31
     d7a:	b1 1c       	adc	r11, r1
     d7c:	f2 01       	movw	r30, r4
     d7e:	60 81       	ld	r22, Z
     d80:	71 81       	ldd	r23, Z+1	; 0x01
     d82:	82 81       	ldd	r24, Z+2	; 0x02
     d84:	93 81       	ldd	r25, Z+3	; 0x03
     d86:	08 c0       	rjmp	.+16     	; 0xd98 <__stack+0x499>
     d88:	f2 e0       	ldi	r31, 0x02	; 2
     d8a:	af 0e       	add	r10, r31
     d8c:	b1 1c       	adc	r11, r1
     d8e:	f2 01       	movw	r30, r4
     d90:	60 81       	ld	r22, Z
     d92:	71 81       	ldd	r23, Z+1	; 0x01
     d94:	80 e0       	ldi	r24, 0x00	; 0
     d96:	90 e0       	ldi	r25, 0x00	; 0
     d98:	a3 01       	movw	r20, r6
     d9a:	0e 94 c6 0a 	call	0x158c	; 0x158c <__ultoa_invert>
     d9e:	e8 2e       	mov	r14, r24
     da0:	e6 18       	sub	r14, r6
     da2:	0f 77       	andi	r16, 0x7F	; 127
     da4:	30 2e       	mov	r3, r16
     da6:	36 fe       	sbrs	r3, 6
     da8:	0b c0       	rjmp	.+22     	; 0xdc0 <__stack+0x4c1>
     daa:	33 2d       	mov	r19, r3
     dac:	3e 7f       	andi	r19, 0xFE	; 254
     dae:	e1 16       	cp	r14, r17
     db0:	50 f4       	brcc	.+20     	; 0xdc6 <__stack+0x4c7>
     db2:	34 fe       	sbrs	r3, 4
     db4:	0a c0       	rjmp	.+20     	; 0xdca <__stack+0x4cb>
     db6:	32 fc       	sbrc	r3, 2
     db8:	08 c0       	rjmp	.+16     	; 0xdca <__stack+0x4cb>
     dba:	33 2d       	mov	r19, r3
     dbc:	3e 7e       	andi	r19, 0xEE	; 238
     dbe:	05 c0       	rjmp	.+10     	; 0xdca <__stack+0x4cb>
     dc0:	0e 2d       	mov	r16, r14
     dc2:	33 2d       	mov	r19, r3
     dc4:	03 c0       	rjmp	.+6      	; 0xdcc <__stack+0x4cd>
     dc6:	0e 2d       	mov	r16, r14
     dc8:	01 c0       	rjmp	.+2      	; 0xdcc <__stack+0x4cd>
     dca:	01 2f       	mov	r16, r17
     dcc:	34 ff       	sbrs	r19, 4
     dce:	0c c0       	rjmp	.+24     	; 0xde8 <__stack+0x4e9>
     dd0:	fe 01       	movw	r30, r28
     dd2:	ee 0d       	add	r30, r14
     dd4:	f1 1d       	adc	r31, r1
     dd6:	80 81       	ld	r24, Z
     dd8:	80 33       	cpi	r24, 0x30	; 48
     dda:	11 f4       	brne	.+4      	; 0xde0 <__stack+0x4e1>
     ddc:	39 7e       	andi	r19, 0xE9	; 233
     dde:	08 c0       	rjmp	.+16     	; 0xdf0 <__stack+0x4f1>
     de0:	32 ff       	sbrs	r19, 2
     de2:	05 c0       	rjmp	.+10     	; 0xdee <__stack+0x4ef>
     de4:	0e 5f       	subi	r16, 0xFE	; 254
     de6:	04 c0       	rjmp	.+8      	; 0xdf0 <__stack+0x4f1>
     de8:	83 2f       	mov	r24, r19
     dea:	86 78       	andi	r24, 0x86	; 134
     dec:	09 f0       	breq	.+2      	; 0xdf0 <__stack+0x4f1>
     dee:	0f 5f       	subi	r16, 0xFF	; 255
     df0:	33 fd       	sbrc	r19, 3
     df2:	13 c0       	rjmp	.+38     	; 0xe1a <__stack+0x51b>
     df4:	30 ff       	sbrs	r19, 0
     df6:	06 c0       	rjmp	.+12     	; 0xe04 <__stack+0x505>
     df8:	1e 2d       	mov	r17, r14
     dfa:	0f 15       	cp	r16, r15
     dfc:	18 f4       	brcc	.+6      	; 0xe04 <__stack+0x505>
     dfe:	1f 0d       	add	r17, r15
     e00:	10 1b       	sub	r17, r16
     e02:	0f 2d       	mov	r16, r15
     e04:	0f 15       	cp	r16, r15
     e06:	68 f4       	brcc	.+26     	; 0xe22 <__stack+0x523>
     e08:	b6 01       	movw	r22, r12
     e0a:	80 e2       	ldi	r24, 0x20	; 32
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	3b 8b       	std	Y+19, r19	; 0x13
     e10:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <fputc>
     e14:	0f 5f       	subi	r16, 0xFF	; 255
     e16:	3b 89       	ldd	r19, Y+19	; 0x13
     e18:	f5 cf       	rjmp	.-22     	; 0xe04 <__stack+0x505>
     e1a:	0f 15       	cp	r16, r15
     e1c:	10 f4       	brcc	.+4      	; 0xe22 <__stack+0x523>
     e1e:	f0 1a       	sub	r15, r16
     e20:	01 c0       	rjmp	.+2      	; 0xe24 <__stack+0x525>
     e22:	f1 2c       	mov	r15, r1
     e24:	34 ff       	sbrs	r19, 4
     e26:	12 c0       	rjmp	.+36     	; 0xe4c <__stack+0x54d>
     e28:	b6 01       	movw	r22, r12
     e2a:	80 e3       	ldi	r24, 0x30	; 48
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	3b 8b       	std	Y+19, r19	; 0x13
     e30:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <fputc>
     e34:	3b 89       	ldd	r19, Y+19	; 0x13
     e36:	32 ff       	sbrs	r19, 2
     e38:	17 c0       	rjmp	.+46     	; 0xe68 <__stack+0x569>
     e3a:	31 fd       	sbrc	r19, 1
     e3c:	03 c0       	rjmp	.+6      	; 0xe44 <__stack+0x545>
     e3e:	88 e7       	ldi	r24, 0x78	; 120
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	02 c0       	rjmp	.+4      	; 0xe48 <__stack+0x549>
     e44:	88 e5       	ldi	r24, 0x58	; 88
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	b6 01       	movw	r22, r12
     e4a:	0c c0       	rjmp	.+24     	; 0xe64 <__stack+0x565>
     e4c:	83 2f       	mov	r24, r19
     e4e:	86 78       	andi	r24, 0x86	; 134
     e50:	59 f0       	breq	.+22     	; 0xe68 <__stack+0x569>
     e52:	31 ff       	sbrs	r19, 1
     e54:	02 c0       	rjmp	.+4      	; 0xe5a <__stack+0x55b>
     e56:	8b e2       	ldi	r24, 0x2B	; 43
     e58:	01 c0       	rjmp	.+2      	; 0xe5c <__stack+0x55d>
     e5a:	80 e2       	ldi	r24, 0x20	; 32
     e5c:	37 fd       	sbrc	r19, 7
     e5e:	8d e2       	ldi	r24, 0x2D	; 45
     e60:	b6 01       	movw	r22, r12
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <fputc>
     e68:	e1 16       	cp	r14, r17
     e6a:	38 f4       	brcc	.+14     	; 0xe7a <__stack+0x57b>
     e6c:	b6 01       	movw	r22, r12
     e6e:	80 e3       	ldi	r24, 0x30	; 48
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <fputc>
     e76:	11 50       	subi	r17, 0x01	; 1
     e78:	f7 cf       	rjmp	.-18     	; 0xe68 <__stack+0x569>
     e7a:	ea 94       	dec	r14
     e7c:	f3 01       	movw	r30, r6
     e7e:	ee 0d       	add	r30, r14
     e80:	f1 1d       	adc	r31, r1
     e82:	80 81       	ld	r24, Z
     e84:	b6 01       	movw	r22, r12
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <fputc>
     e8c:	e1 10       	cpse	r14, r1
     e8e:	f5 cf       	rjmp	.-22     	; 0xe7a <__stack+0x57b>
     e90:	14 c0       	rjmp	.+40     	; 0xeba <__stack+0x5bb>
     e92:	f4 e0       	ldi	r31, 0x04	; 4
     e94:	ff 15       	cp	r31, r15
     e96:	58 f5       	brcc	.+86     	; 0xeee <__stack+0x5ef>
     e98:	84 e0       	ldi	r24, 0x04	; 4
     e9a:	f8 1a       	sub	r15, r24
     e9c:	33 fe       	sbrs	r3, 3
     e9e:	1e c0       	rjmp	.+60     	; 0xedc <__stack+0x5dd>
     ea0:	21 10       	cpse	r2, r1
     ea2:	26 c0       	rjmp	.+76     	; 0xef0 <__stack+0x5f1>
     ea4:	03 ff       	sbrs	r16, 3
     ea6:	2a c0       	rjmp	.+84     	; 0xefc <__stack+0x5fd>
     ea8:	08 e6       	ldi	r16, 0x68	; 104
     eaa:	10 e0       	ldi	r17, 0x00	; 0
     eac:	f3 2d       	mov	r31, r3
     eae:	f0 71       	andi	r31, 0x10	; 16
     eb0:	3f 2e       	mov	r3, r31
     eb2:	f8 01       	movw	r30, r16
     eb4:	84 91       	lpm	r24, Z
     eb6:	81 11       	cpse	r24, r1
     eb8:	24 c0       	rjmp	.+72     	; 0xf02 <__stack+0x603>
     eba:	ff 20       	and	r15, r15
     ebc:	09 f4       	brne	.+2      	; 0xec0 <__stack+0x5c1>
     ebe:	e5 cc       	rjmp	.-1590   	; 0x88a <vfprintf+0x58>
     ec0:	b6 01       	movw	r22, r12
     ec2:	80 e2       	ldi	r24, 0x20	; 32
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <fputc>
     eca:	fa 94       	dec	r15
     ecc:	f6 cf       	rjmp	.-20     	; 0xeba <__stack+0x5bb>
     ece:	f6 01       	movw	r30, r12
     ed0:	86 81       	ldd	r24, Z+6	; 0x06
     ed2:	97 81       	ldd	r25, Z+7	; 0x07
     ed4:	26 c0       	rjmp	.+76     	; 0xf22 <__stack+0x623>
     ed6:	8f ef       	ldi	r24, 0xFF	; 255
     ed8:	9f ef       	ldi	r25, 0xFF	; 255
     eda:	23 c0       	rjmp	.+70     	; 0xf22 <__stack+0x623>
     edc:	b6 01       	movw	r22, r12
     ede:	80 e2       	ldi	r24, 0x20	; 32
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <fputc>
     ee6:	fa 94       	dec	r15
     ee8:	f1 10       	cpse	r15, r1
     eea:	f8 cf       	rjmp	.-16     	; 0xedc <__stack+0x5dd>
     eec:	d9 cf       	rjmp	.-78     	; 0xea0 <__stack+0x5a1>
     eee:	f1 2c       	mov	r15, r1
     ef0:	b6 01       	movw	r22, r12
     ef2:	82 2d       	mov	r24, r2
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <fputc>
     efa:	d4 cf       	rjmp	.-88     	; 0xea4 <__stack+0x5a5>
     efc:	0c e6       	ldi	r16, 0x6C	; 108
     efe:	10 e0       	ldi	r17, 0x00	; 0
     f00:	d5 cf       	rjmp	.-86     	; 0xeac <__stack+0x5ad>
     f02:	31 10       	cpse	r3, r1
     f04:	80 52       	subi	r24, 0x20	; 32
     f06:	b6 01       	movw	r22, r12
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <fputc>
     f0e:	0f 5f       	subi	r16, 0xFF	; 255
     f10:	1f 4f       	sbci	r17, 0xFF	; 255
     f12:	cf cf       	rjmp	.-98     	; 0xeb2 <__stack+0x5b3>
     f14:	23 e0       	ldi	r18, 0x03	; 3
     f16:	2f 15       	cp	r18, r15
     f18:	10 f4       	brcc	.+4      	; 0xf1e <__stack+0x61f>
     f1a:	83 e0       	ldi	r24, 0x03	; 3
     f1c:	be cf       	rjmp	.-132    	; 0xe9a <__stack+0x59b>
     f1e:	f1 2c       	mov	r15, r1
     f20:	c1 cf       	rjmp	.-126    	; 0xea4 <__stack+0x5a5>
     f22:	63 96       	adiw	r28, 0x13	; 19
     f24:	e2 e1       	ldi	r30, 0x12	; 18
     f26:	0c 94 6f 09 	jmp	0x12de	; 0x12de <__epilogue_restores__>

00000f2a <__subsf3>:
     f2a:	50 58       	subi	r21, 0x80	; 128

00000f2c <__addsf3>:
     f2c:	bb 27       	eor	r27, r27
     f2e:	aa 27       	eor	r26, r26
     f30:	0e d0       	rcall	.+28     	; 0xf4e <__addsf3x>
     f32:	1c c1       	rjmp	.+568    	; 0x116c <__fp_round>
     f34:	0d d1       	rcall	.+538    	; 0x1150 <__fp_pscA>
     f36:	30 f0       	brcs	.+12     	; 0xf44 <__addsf3+0x18>
     f38:	12 d1       	rcall	.+548    	; 0x115e <__fp_pscB>
     f3a:	20 f0       	brcs	.+8      	; 0xf44 <__addsf3+0x18>
     f3c:	31 f4       	brne	.+12     	; 0xf4a <__addsf3+0x1e>
     f3e:	9f 3f       	cpi	r25, 0xFF	; 255
     f40:	11 f4       	brne	.+4      	; 0xf46 <__addsf3+0x1a>
     f42:	1e f4       	brtc	.+6      	; 0xf4a <__addsf3+0x1e>
     f44:	02 c1       	rjmp	.+516    	; 0x114a <__fp_nan>
     f46:	0e f4       	brtc	.+2      	; 0xf4a <__addsf3+0x1e>
     f48:	e0 95       	com	r30
     f4a:	e7 fb       	bst	r30, 7
     f4c:	f8 c0       	rjmp	.+496    	; 0x113e <__fp_inf>

00000f4e <__addsf3x>:
     f4e:	e9 2f       	mov	r30, r25
     f50:	1e d1       	rcall	.+572    	; 0x118e <__fp_split3>
     f52:	80 f3       	brcs	.-32     	; 0xf34 <__addsf3+0x8>
     f54:	ba 17       	cp	r27, r26
     f56:	62 07       	cpc	r22, r18
     f58:	73 07       	cpc	r23, r19
     f5a:	84 07       	cpc	r24, r20
     f5c:	95 07       	cpc	r25, r21
     f5e:	18 f0       	brcs	.+6      	; 0xf66 <__addsf3x+0x18>
     f60:	71 f4       	brne	.+28     	; 0xf7e <__addsf3x+0x30>
     f62:	9e f5       	brtc	.+102    	; 0xfca <__addsf3x+0x7c>
     f64:	36 c1       	rjmp	.+620    	; 0x11d2 <__fp_zero>
     f66:	0e f4       	brtc	.+2      	; 0xf6a <__addsf3x+0x1c>
     f68:	e0 95       	com	r30
     f6a:	0b 2e       	mov	r0, r27
     f6c:	ba 2f       	mov	r27, r26
     f6e:	a0 2d       	mov	r26, r0
     f70:	0b 01       	movw	r0, r22
     f72:	b9 01       	movw	r22, r18
     f74:	90 01       	movw	r18, r0
     f76:	0c 01       	movw	r0, r24
     f78:	ca 01       	movw	r24, r20
     f7a:	a0 01       	movw	r20, r0
     f7c:	11 24       	eor	r1, r1
     f7e:	ff 27       	eor	r31, r31
     f80:	59 1b       	sub	r21, r25
     f82:	99 f0       	breq	.+38     	; 0xfaa <__addsf3x+0x5c>
     f84:	59 3f       	cpi	r21, 0xF9	; 249
     f86:	50 f4       	brcc	.+20     	; 0xf9c <__addsf3x+0x4e>
     f88:	50 3e       	cpi	r21, 0xE0	; 224
     f8a:	68 f1       	brcs	.+90     	; 0xfe6 <__addsf3x+0x98>
     f8c:	1a 16       	cp	r1, r26
     f8e:	f0 40       	sbci	r31, 0x00	; 0
     f90:	a2 2f       	mov	r26, r18
     f92:	23 2f       	mov	r18, r19
     f94:	34 2f       	mov	r19, r20
     f96:	44 27       	eor	r20, r20
     f98:	58 5f       	subi	r21, 0xF8	; 248
     f9a:	f3 cf       	rjmp	.-26     	; 0xf82 <__addsf3x+0x34>
     f9c:	46 95       	lsr	r20
     f9e:	37 95       	ror	r19
     fa0:	27 95       	ror	r18
     fa2:	a7 95       	ror	r26
     fa4:	f0 40       	sbci	r31, 0x00	; 0
     fa6:	53 95       	inc	r21
     fa8:	c9 f7       	brne	.-14     	; 0xf9c <__addsf3x+0x4e>
     faa:	7e f4       	brtc	.+30     	; 0xfca <__addsf3x+0x7c>
     fac:	1f 16       	cp	r1, r31
     fae:	ba 0b       	sbc	r27, r26
     fb0:	62 0b       	sbc	r22, r18
     fb2:	73 0b       	sbc	r23, r19
     fb4:	84 0b       	sbc	r24, r20
     fb6:	ba f0       	brmi	.+46     	; 0xfe6 <__addsf3x+0x98>
     fb8:	91 50       	subi	r25, 0x01	; 1
     fba:	a1 f0       	breq	.+40     	; 0xfe4 <__addsf3x+0x96>
     fbc:	ff 0f       	add	r31, r31
     fbe:	bb 1f       	adc	r27, r27
     fc0:	66 1f       	adc	r22, r22
     fc2:	77 1f       	adc	r23, r23
     fc4:	88 1f       	adc	r24, r24
     fc6:	c2 f7       	brpl	.-16     	; 0xfb8 <__addsf3x+0x6a>
     fc8:	0e c0       	rjmp	.+28     	; 0xfe6 <__addsf3x+0x98>
     fca:	ba 0f       	add	r27, r26
     fcc:	62 1f       	adc	r22, r18
     fce:	73 1f       	adc	r23, r19
     fd0:	84 1f       	adc	r24, r20
     fd2:	48 f4       	brcc	.+18     	; 0xfe6 <__addsf3x+0x98>
     fd4:	87 95       	ror	r24
     fd6:	77 95       	ror	r23
     fd8:	67 95       	ror	r22
     fda:	b7 95       	ror	r27
     fdc:	f7 95       	ror	r31
     fde:	9e 3f       	cpi	r25, 0xFE	; 254
     fe0:	08 f0       	brcs	.+2      	; 0xfe4 <__addsf3x+0x96>
     fe2:	b3 cf       	rjmp	.-154    	; 0xf4a <__addsf3+0x1e>
     fe4:	93 95       	inc	r25
     fe6:	88 0f       	add	r24, r24
     fe8:	08 f0       	brcs	.+2      	; 0xfec <__addsf3x+0x9e>
     fea:	99 27       	eor	r25, r25
     fec:	ee 0f       	add	r30, r30
     fee:	97 95       	ror	r25
     ff0:	87 95       	ror	r24
     ff2:	08 95       	ret

00000ff4 <__divsf3>:
     ff4:	0c d0       	rcall	.+24     	; 0x100e <__divsf3x>
     ff6:	ba c0       	rjmp	.+372    	; 0x116c <__fp_round>
     ff8:	b2 d0       	rcall	.+356    	; 0x115e <__fp_pscB>
     ffa:	40 f0       	brcs	.+16     	; 0x100c <__divsf3+0x18>
     ffc:	a9 d0       	rcall	.+338    	; 0x1150 <__fp_pscA>
     ffe:	30 f0       	brcs	.+12     	; 0x100c <__divsf3+0x18>
    1000:	21 f4       	brne	.+8      	; 0x100a <__divsf3+0x16>
    1002:	5f 3f       	cpi	r21, 0xFF	; 255
    1004:	19 f0       	breq	.+6      	; 0x100c <__divsf3+0x18>
    1006:	9b c0       	rjmp	.+310    	; 0x113e <__fp_inf>
    1008:	51 11       	cpse	r21, r1
    100a:	e4 c0       	rjmp	.+456    	; 0x11d4 <__fp_szero>
    100c:	9e c0       	rjmp	.+316    	; 0x114a <__fp_nan>

0000100e <__divsf3x>:
    100e:	bf d0       	rcall	.+382    	; 0x118e <__fp_split3>
    1010:	98 f3       	brcs	.-26     	; 0xff8 <__divsf3+0x4>

00001012 <__divsf3_pse>:
    1012:	99 23       	and	r25, r25
    1014:	c9 f3       	breq	.-14     	; 0x1008 <__divsf3+0x14>
    1016:	55 23       	and	r21, r21
    1018:	b1 f3       	breq	.-20     	; 0x1006 <__divsf3+0x12>
    101a:	95 1b       	sub	r25, r21
    101c:	55 0b       	sbc	r21, r21
    101e:	bb 27       	eor	r27, r27
    1020:	aa 27       	eor	r26, r26
    1022:	62 17       	cp	r22, r18
    1024:	73 07       	cpc	r23, r19
    1026:	84 07       	cpc	r24, r20
    1028:	38 f0       	brcs	.+14     	; 0x1038 <__divsf3_pse+0x26>
    102a:	9f 5f       	subi	r25, 0xFF	; 255
    102c:	5f 4f       	sbci	r21, 0xFF	; 255
    102e:	22 0f       	add	r18, r18
    1030:	33 1f       	adc	r19, r19
    1032:	44 1f       	adc	r20, r20
    1034:	aa 1f       	adc	r26, r26
    1036:	a9 f3       	breq	.-22     	; 0x1022 <__divsf3_pse+0x10>
    1038:	33 d0       	rcall	.+102    	; 0x10a0 <__divsf3_pse+0x8e>
    103a:	0e 2e       	mov	r0, r30
    103c:	3a f0       	brmi	.+14     	; 0x104c <__divsf3_pse+0x3a>
    103e:	e0 e8       	ldi	r30, 0x80	; 128
    1040:	30 d0       	rcall	.+96     	; 0x10a2 <__divsf3_pse+0x90>
    1042:	91 50       	subi	r25, 0x01	; 1
    1044:	50 40       	sbci	r21, 0x00	; 0
    1046:	e6 95       	lsr	r30
    1048:	00 1c       	adc	r0, r0
    104a:	ca f7       	brpl	.-14     	; 0x103e <__divsf3_pse+0x2c>
    104c:	29 d0       	rcall	.+82     	; 0x10a0 <__divsf3_pse+0x8e>
    104e:	fe 2f       	mov	r31, r30
    1050:	27 d0       	rcall	.+78     	; 0x10a0 <__divsf3_pse+0x8e>
    1052:	66 0f       	add	r22, r22
    1054:	77 1f       	adc	r23, r23
    1056:	88 1f       	adc	r24, r24
    1058:	bb 1f       	adc	r27, r27
    105a:	26 17       	cp	r18, r22
    105c:	37 07       	cpc	r19, r23
    105e:	48 07       	cpc	r20, r24
    1060:	ab 07       	cpc	r26, r27
    1062:	b0 e8       	ldi	r27, 0x80	; 128
    1064:	09 f0       	breq	.+2      	; 0x1068 <__divsf3_pse+0x56>
    1066:	bb 0b       	sbc	r27, r27
    1068:	80 2d       	mov	r24, r0
    106a:	bf 01       	movw	r22, r30
    106c:	ff 27       	eor	r31, r31
    106e:	93 58       	subi	r25, 0x83	; 131
    1070:	5f 4f       	sbci	r21, 0xFF	; 255
    1072:	2a f0       	brmi	.+10     	; 0x107e <__divsf3_pse+0x6c>
    1074:	9e 3f       	cpi	r25, 0xFE	; 254
    1076:	51 05       	cpc	r21, r1
    1078:	68 f0       	brcs	.+26     	; 0x1094 <__divsf3_pse+0x82>
    107a:	61 c0       	rjmp	.+194    	; 0x113e <__fp_inf>
    107c:	ab c0       	rjmp	.+342    	; 0x11d4 <__fp_szero>
    107e:	5f 3f       	cpi	r21, 0xFF	; 255
    1080:	ec f3       	brlt	.-6      	; 0x107c <__divsf3_pse+0x6a>
    1082:	98 3e       	cpi	r25, 0xE8	; 232
    1084:	dc f3       	brlt	.-10     	; 0x107c <__divsf3_pse+0x6a>
    1086:	86 95       	lsr	r24
    1088:	77 95       	ror	r23
    108a:	67 95       	ror	r22
    108c:	b7 95       	ror	r27
    108e:	f7 95       	ror	r31
    1090:	9f 5f       	subi	r25, 0xFF	; 255
    1092:	c9 f7       	brne	.-14     	; 0x1086 <__divsf3_pse+0x74>
    1094:	88 0f       	add	r24, r24
    1096:	91 1d       	adc	r25, r1
    1098:	96 95       	lsr	r25
    109a:	87 95       	ror	r24
    109c:	97 f9       	bld	r25, 7
    109e:	08 95       	ret
    10a0:	e1 e0       	ldi	r30, 0x01	; 1
    10a2:	66 0f       	add	r22, r22
    10a4:	77 1f       	adc	r23, r23
    10a6:	88 1f       	adc	r24, r24
    10a8:	bb 1f       	adc	r27, r27
    10aa:	62 17       	cp	r22, r18
    10ac:	73 07       	cpc	r23, r19
    10ae:	84 07       	cpc	r24, r20
    10b0:	ba 07       	cpc	r27, r26
    10b2:	20 f0       	brcs	.+8      	; 0x10bc <__divsf3_pse+0xaa>
    10b4:	62 1b       	sub	r22, r18
    10b6:	73 0b       	sbc	r23, r19
    10b8:	84 0b       	sbc	r24, r20
    10ba:	ba 0b       	sbc	r27, r26
    10bc:	ee 1f       	adc	r30, r30
    10be:	88 f7       	brcc	.-30     	; 0x10a2 <__divsf3_pse+0x90>
    10c0:	e0 95       	com	r30
    10c2:	08 95       	ret

000010c4 <__floatunsisf>:
    10c4:	e8 94       	clt
    10c6:	09 c0       	rjmp	.+18     	; 0x10da <__floatsisf+0x12>

000010c8 <__floatsisf>:
    10c8:	97 fb       	bst	r25, 7
    10ca:	3e f4       	brtc	.+14     	; 0x10da <__floatsisf+0x12>
    10cc:	90 95       	com	r25
    10ce:	80 95       	com	r24
    10d0:	70 95       	com	r23
    10d2:	61 95       	neg	r22
    10d4:	7f 4f       	sbci	r23, 0xFF	; 255
    10d6:	8f 4f       	sbci	r24, 0xFF	; 255
    10d8:	9f 4f       	sbci	r25, 0xFF	; 255
    10da:	99 23       	and	r25, r25
    10dc:	a9 f0       	breq	.+42     	; 0x1108 <__floatsisf+0x40>
    10de:	f9 2f       	mov	r31, r25
    10e0:	96 e9       	ldi	r25, 0x96	; 150
    10e2:	bb 27       	eor	r27, r27
    10e4:	93 95       	inc	r25
    10e6:	f6 95       	lsr	r31
    10e8:	87 95       	ror	r24
    10ea:	77 95       	ror	r23
    10ec:	67 95       	ror	r22
    10ee:	b7 95       	ror	r27
    10f0:	f1 11       	cpse	r31, r1
    10f2:	f8 cf       	rjmp	.-16     	; 0x10e4 <__floatsisf+0x1c>
    10f4:	fa f4       	brpl	.+62     	; 0x1134 <__floatsisf+0x6c>
    10f6:	bb 0f       	add	r27, r27
    10f8:	11 f4       	brne	.+4      	; 0x10fe <__floatsisf+0x36>
    10fa:	60 ff       	sbrs	r22, 0
    10fc:	1b c0       	rjmp	.+54     	; 0x1134 <__floatsisf+0x6c>
    10fe:	6f 5f       	subi	r22, 0xFF	; 255
    1100:	7f 4f       	sbci	r23, 0xFF	; 255
    1102:	8f 4f       	sbci	r24, 0xFF	; 255
    1104:	9f 4f       	sbci	r25, 0xFF	; 255
    1106:	16 c0       	rjmp	.+44     	; 0x1134 <__floatsisf+0x6c>
    1108:	88 23       	and	r24, r24
    110a:	11 f0       	breq	.+4      	; 0x1110 <__floatsisf+0x48>
    110c:	96 e9       	ldi	r25, 0x96	; 150
    110e:	11 c0       	rjmp	.+34     	; 0x1132 <__floatsisf+0x6a>
    1110:	77 23       	and	r23, r23
    1112:	21 f0       	breq	.+8      	; 0x111c <__floatsisf+0x54>
    1114:	9e e8       	ldi	r25, 0x8E	; 142
    1116:	87 2f       	mov	r24, r23
    1118:	76 2f       	mov	r23, r22
    111a:	05 c0       	rjmp	.+10     	; 0x1126 <__floatsisf+0x5e>
    111c:	66 23       	and	r22, r22
    111e:	71 f0       	breq	.+28     	; 0x113c <__floatsisf+0x74>
    1120:	96 e8       	ldi	r25, 0x86	; 134
    1122:	86 2f       	mov	r24, r22
    1124:	70 e0       	ldi	r23, 0x00	; 0
    1126:	60 e0       	ldi	r22, 0x00	; 0
    1128:	2a f0       	brmi	.+10     	; 0x1134 <__floatsisf+0x6c>
    112a:	9a 95       	dec	r25
    112c:	66 0f       	add	r22, r22
    112e:	77 1f       	adc	r23, r23
    1130:	88 1f       	adc	r24, r24
    1132:	da f7       	brpl	.-10     	; 0x112a <__floatsisf+0x62>
    1134:	88 0f       	add	r24, r24
    1136:	96 95       	lsr	r25
    1138:	87 95       	ror	r24
    113a:	97 f9       	bld	r25, 7
    113c:	08 95       	ret

0000113e <__fp_inf>:
    113e:	97 f9       	bld	r25, 7
    1140:	9f 67       	ori	r25, 0x7F	; 127
    1142:	80 e8       	ldi	r24, 0x80	; 128
    1144:	70 e0       	ldi	r23, 0x00	; 0
    1146:	60 e0       	ldi	r22, 0x00	; 0
    1148:	08 95       	ret

0000114a <__fp_nan>:
    114a:	9f ef       	ldi	r25, 0xFF	; 255
    114c:	80 ec       	ldi	r24, 0xC0	; 192
    114e:	08 95       	ret

00001150 <__fp_pscA>:
    1150:	00 24       	eor	r0, r0
    1152:	0a 94       	dec	r0
    1154:	16 16       	cp	r1, r22
    1156:	17 06       	cpc	r1, r23
    1158:	18 06       	cpc	r1, r24
    115a:	09 06       	cpc	r0, r25
    115c:	08 95       	ret

0000115e <__fp_pscB>:
    115e:	00 24       	eor	r0, r0
    1160:	0a 94       	dec	r0
    1162:	12 16       	cp	r1, r18
    1164:	13 06       	cpc	r1, r19
    1166:	14 06       	cpc	r1, r20
    1168:	05 06       	cpc	r0, r21
    116a:	08 95       	ret

0000116c <__fp_round>:
    116c:	09 2e       	mov	r0, r25
    116e:	03 94       	inc	r0
    1170:	00 0c       	add	r0, r0
    1172:	11 f4       	brne	.+4      	; 0x1178 <__fp_round+0xc>
    1174:	88 23       	and	r24, r24
    1176:	52 f0       	brmi	.+20     	; 0x118c <__fp_round+0x20>
    1178:	bb 0f       	add	r27, r27
    117a:	40 f4       	brcc	.+16     	; 0x118c <__fp_round+0x20>
    117c:	bf 2b       	or	r27, r31
    117e:	11 f4       	brne	.+4      	; 0x1184 <__fp_round+0x18>
    1180:	60 ff       	sbrs	r22, 0
    1182:	04 c0       	rjmp	.+8      	; 0x118c <__fp_round+0x20>
    1184:	6f 5f       	subi	r22, 0xFF	; 255
    1186:	7f 4f       	sbci	r23, 0xFF	; 255
    1188:	8f 4f       	sbci	r24, 0xFF	; 255
    118a:	9f 4f       	sbci	r25, 0xFF	; 255
    118c:	08 95       	ret

0000118e <__fp_split3>:
    118e:	57 fd       	sbrc	r21, 7
    1190:	90 58       	subi	r25, 0x80	; 128
    1192:	44 0f       	add	r20, r20
    1194:	55 1f       	adc	r21, r21
    1196:	59 f0       	breq	.+22     	; 0x11ae <__fp_splitA+0x10>
    1198:	5f 3f       	cpi	r21, 0xFF	; 255
    119a:	71 f0       	breq	.+28     	; 0x11b8 <__fp_splitA+0x1a>
    119c:	47 95       	ror	r20

0000119e <__fp_splitA>:
    119e:	88 0f       	add	r24, r24
    11a0:	97 fb       	bst	r25, 7
    11a2:	99 1f       	adc	r25, r25
    11a4:	61 f0       	breq	.+24     	; 0x11be <__fp_splitA+0x20>
    11a6:	9f 3f       	cpi	r25, 0xFF	; 255
    11a8:	79 f0       	breq	.+30     	; 0x11c8 <__fp_splitA+0x2a>
    11aa:	87 95       	ror	r24
    11ac:	08 95       	ret
    11ae:	12 16       	cp	r1, r18
    11b0:	13 06       	cpc	r1, r19
    11b2:	14 06       	cpc	r1, r20
    11b4:	55 1f       	adc	r21, r21
    11b6:	f2 cf       	rjmp	.-28     	; 0x119c <__fp_split3+0xe>
    11b8:	46 95       	lsr	r20
    11ba:	f1 df       	rcall	.-30     	; 0x119e <__fp_splitA>
    11bc:	08 c0       	rjmp	.+16     	; 0x11ce <__fp_splitA+0x30>
    11be:	16 16       	cp	r1, r22
    11c0:	17 06       	cpc	r1, r23
    11c2:	18 06       	cpc	r1, r24
    11c4:	99 1f       	adc	r25, r25
    11c6:	f1 cf       	rjmp	.-30     	; 0x11aa <__fp_splitA+0xc>
    11c8:	86 95       	lsr	r24
    11ca:	71 05       	cpc	r23, r1
    11cc:	61 05       	cpc	r22, r1
    11ce:	08 94       	sec
    11d0:	08 95       	ret

000011d2 <__fp_zero>:
    11d2:	e8 94       	clt

000011d4 <__fp_szero>:
    11d4:	bb 27       	eor	r27, r27
    11d6:	66 27       	eor	r22, r22
    11d8:	77 27       	eor	r23, r23
    11da:	cb 01       	movw	r24, r22
    11dc:	97 f9       	bld	r25, 7
    11de:	08 95       	ret

000011e0 <__mulsf3>:
    11e0:	0b d0       	rcall	.+22     	; 0x11f8 <__mulsf3x>
    11e2:	c4 cf       	rjmp	.-120    	; 0x116c <__fp_round>
    11e4:	b5 df       	rcall	.-150    	; 0x1150 <__fp_pscA>
    11e6:	28 f0       	brcs	.+10     	; 0x11f2 <__mulsf3+0x12>
    11e8:	ba df       	rcall	.-140    	; 0x115e <__fp_pscB>
    11ea:	18 f0       	brcs	.+6      	; 0x11f2 <__mulsf3+0x12>
    11ec:	95 23       	and	r25, r21
    11ee:	09 f0       	breq	.+2      	; 0x11f2 <__mulsf3+0x12>
    11f0:	a6 cf       	rjmp	.-180    	; 0x113e <__fp_inf>
    11f2:	ab cf       	rjmp	.-170    	; 0x114a <__fp_nan>
    11f4:	11 24       	eor	r1, r1
    11f6:	ee cf       	rjmp	.-36     	; 0x11d4 <__fp_szero>

000011f8 <__mulsf3x>:
    11f8:	ca df       	rcall	.-108    	; 0x118e <__fp_split3>
    11fa:	a0 f3       	brcs	.-24     	; 0x11e4 <__mulsf3+0x4>

000011fc <__mulsf3_pse>:
    11fc:	95 9f       	mul	r25, r21
    11fe:	d1 f3       	breq	.-12     	; 0x11f4 <__mulsf3+0x14>
    1200:	95 0f       	add	r25, r21
    1202:	50 e0       	ldi	r21, 0x00	; 0
    1204:	55 1f       	adc	r21, r21
    1206:	62 9f       	mul	r22, r18
    1208:	f0 01       	movw	r30, r0
    120a:	72 9f       	mul	r23, r18
    120c:	bb 27       	eor	r27, r27
    120e:	f0 0d       	add	r31, r0
    1210:	b1 1d       	adc	r27, r1
    1212:	63 9f       	mul	r22, r19
    1214:	aa 27       	eor	r26, r26
    1216:	f0 0d       	add	r31, r0
    1218:	b1 1d       	adc	r27, r1
    121a:	aa 1f       	adc	r26, r26
    121c:	64 9f       	mul	r22, r20
    121e:	66 27       	eor	r22, r22
    1220:	b0 0d       	add	r27, r0
    1222:	a1 1d       	adc	r26, r1
    1224:	66 1f       	adc	r22, r22
    1226:	82 9f       	mul	r24, r18
    1228:	22 27       	eor	r18, r18
    122a:	b0 0d       	add	r27, r0
    122c:	a1 1d       	adc	r26, r1
    122e:	62 1f       	adc	r22, r18
    1230:	73 9f       	mul	r23, r19
    1232:	b0 0d       	add	r27, r0
    1234:	a1 1d       	adc	r26, r1
    1236:	62 1f       	adc	r22, r18
    1238:	83 9f       	mul	r24, r19
    123a:	a0 0d       	add	r26, r0
    123c:	61 1d       	adc	r22, r1
    123e:	22 1f       	adc	r18, r18
    1240:	74 9f       	mul	r23, r20
    1242:	33 27       	eor	r19, r19
    1244:	a0 0d       	add	r26, r0
    1246:	61 1d       	adc	r22, r1
    1248:	23 1f       	adc	r18, r19
    124a:	84 9f       	mul	r24, r20
    124c:	60 0d       	add	r22, r0
    124e:	21 1d       	adc	r18, r1
    1250:	82 2f       	mov	r24, r18
    1252:	76 2f       	mov	r23, r22
    1254:	6a 2f       	mov	r22, r26
    1256:	11 24       	eor	r1, r1
    1258:	9f 57       	subi	r25, 0x7F	; 127
    125a:	50 40       	sbci	r21, 0x00	; 0
    125c:	8a f0       	brmi	.+34     	; 0x1280 <__mulsf3_pse+0x84>
    125e:	e1 f0       	breq	.+56     	; 0x1298 <__mulsf3_pse+0x9c>
    1260:	88 23       	and	r24, r24
    1262:	4a f0       	brmi	.+18     	; 0x1276 <__mulsf3_pse+0x7a>
    1264:	ee 0f       	add	r30, r30
    1266:	ff 1f       	adc	r31, r31
    1268:	bb 1f       	adc	r27, r27
    126a:	66 1f       	adc	r22, r22
    126c:	77 1f       	adc	r23, r23
    126e:	88 1f       	adc	r24, r24
    1270:	91 50       	subi	r25, 0x01	; 1
    1272:	50 40       	sbci	r21, 0x00	; 0
    1274:	a9 f7       	brne	.-22     	; 0x1260 <__mulsf3_pse+0x64>
    1276:	9e 3f       	cpi	r25, 0xFE	; 254
    1278:	51 05       	cpc	r21, r1
    127a:	70 f0       	brcs	.+28     	; 0x1298 <__mulsf3_pse+0x9c>
    127c:	60 cf       	rjmp	.-320    	; 0x113e <__fp_inf>
    127e:	aa cf       	rjmp	.-172    	; 0x11d4 <__fp_szero>
    1280:	5f 3f       	cpi	r21, 0xFF	; 255
    1282:	ec f3       	brlt	.-6      	; 0x127e <__mulsf3_pse+0x82>
    1284:	98 3e       	cpi	r25, 0xE8	; 232
    1286:	dc f3       	brlt	.-10     	; 0x127e <__mulsf3_pse+0x82>
    1288:	86 95       	lsr	r24
    128a:	77 95       	ror	r23
    128c:	67 95       	ror	r22
    128e:	b7 95       	ror	r27
    1290:	f7 95       	ror	r31
    1292:	e7 95       	ror	r30
    1294:	9f 5f       	subi	r25, 0xFF	; 255
    1296:	c1 f7       	brne	.-16     	; 0x1288 <__mulsf3_pse+0x8c>
    1298:	fe 2b       	or	r31, r30
    129a:	88 0f       	add	r24, r24
    129c:	91 1d       	adc	r25, r1
    129e:	96 95       	lsr	r25
    12a0:	87 95       	ror	r24
    12a2:	97 f9       	bld	r25, 7
    12a4:	08 95       	ret

000012a6 <__prologue_saves__>:
    12a6:	2f 92       	push	r2
    12a8:	3f 92       	push	r3
    12aa:	4f 92       	push	r4
    12ac:	5f 92       	push	r5
    12ae:	6f 92       	push	r6
    12b0:	7f 92       	push	r7
    12b2:	8f 92       	push	r8
    12b4:	9f 92       	push	r9
    12b6:	af 92       	push	r10
    12b8:	bf 92       	push	r11
    12ba:	cf 92       	push	r12
    12bc:	df 92       	push	r13
    12be:	ef 92       	push	r14
    12c0:	ff 92       	push	r15
    12c2:	0f 93       	push	r16
    12c4:	1f 93       	push	r17
    12c6:	cf 93       	push	r28
    12c8:	df 93       	push	r29
    12ca:	cd b7       	in	r28, 0x3d	; 61
    12cc:	de b7       	in	r29, 0x3e	; 62
    12ce:	ca 1b       	sub	r28, r26
    12d0:	db 0b       	sbc	r29, r27
    12d2:	0f b6       	in	r0, 0x3f	; 63
    12d4:	f8 94       	cli
    12d6:	de bf       	out	0x3e, r29	; 62
    12d8:	0f be       	out	0x3f, r0	; 63
    12da:	cd bf       	out	0x3d, r28	; 61
    12dc:	09 94       	ijmp

000012de <__epilogue_restores__>:
    12de:	2a 88       	ldd	r2, Y+18	; 0x12
    12e0:	39 88       	ldd	r3, Y+17	; 0x11
    12e2:	48 88       	ldd	r4, Y+16	; 0x10
    12e4:	5f 84       	ldd	r5, Y+15	; 0x0f
    12e6:	6e 84       	ldd	r6, Y+14	; 0x0e
    12e8:	7d 84       	ldd	r7, Y+13	; 0x0d
    12ea:	8c 84       	ldd	r8, Y+12	; 0x0c
    12ec:	9b 84       	ldd	r9, Y+11	; 0x0b
    12ee:	aa 84       	ldd	r10, Y+10	; 0x0a
    12f0:	b9 84       	ldd	r11, Y+9	; 0x09
    12f2:	c8 84       	ldd	r12, Y+8	; 0x08
    12f4:	df 80       	ldd	r13, Y+7	; 0x07
    12f6:	ee 80       	ldd	r14, Y+6	; 0x06
    12f8:	fd 80       	ldd	r15, Y+5	; 0x05
    12fa:	0c 81       	ldd	r16, Y+4	; 0x04
    12fc:	1b 81       	ldd	r17, Y+3	; 0x03
    12fe:	aa 81       	ldd	r26, Y+2	; 0x02
    1300:	b9 81       	ldd	r27, Y+1	; 0x01
    1302:	ce 0f       	add	r28, r30
    1304:	d1 1d       	adc	r29, r1
    1306:	0f b6       	in	r0, 0x3f	; 63
    1308:	f8 94       	cli
    130a:	de bf       	out	0x3e, r29	; 62
    130c:	0f be       	out	0x3f, r0	; 63
    130e:	cd bf       	out	0x3d, r28	; 61
    1310:	ed 01       	movw	r28, r26
    1312:	08 95       	ret

00001314 <__ftoa_engine>:
    1314:	28 30       	cpi	r18, 0x08	; 8
    1316:	08 f0       	brcs	.+2      	; 0x131a <__ftoa_engine+0x6>
    1318:	27 e0       	ldi	r18, 0x07	; 7
    131a:	33 27       	eor	r19, r19
    131c:	da 01       	movw	r26, r20
    131e:	99 0f       	add	r25, r25
    1320:	31 1d       	adc	r19, r1
    1322:	87 fd       	sbrc	r24, 7
    1324:	91 60       	ori	r25, 0x01	; 1
    1326:	00 96       	adiw	r24, 0x00	; 0
    1328:	61 05       	cpc	r22, r1
    132a:	71 05       	cpc	r23, r1
    132c:	39 f4       	brne	.+14     	; 0x133c <__ftoa_engine+0x28>
    132e:	32 60       	ori	r19, 0x02	; 2
    1330:	2e 5f       	subi	r18, 0xFE	; 254
    1332:	3d 93       	st	X+, r19
    1334:	30 e3       	ldi	r19, 0x30	; 48
    1336:	2a 95       	dec	r18
    1338:	e1 f7       	brne	.-8      	; 0x1332 <__ftoa_engine+0x1e>
    133a:	08 95       	ret
    133c:	9f 3f       	cpi	r25, 0xFF	; 255
    133e:	30 f0       	brcs	.+12     	; 0x134c <__ftoa_engine+0x38>
    1340:	80 38       	cpi	r24, 0x80	; 128
    1342:	71 05       	cpc	r23, r1
    1344:	61 05       	cpc	r22, r1
    1346:	09 f0       	breq	.+2      	; 0x134a <__ftoa_engine+0x36>
    1348:	3c 5f       	subi	r19, 0xFC	; 252
    134a:	3c 5f       	subi	r19, 0xFC	; 252
    134c:	3d 93       	st	X+, r19
    134e:	91 30       	cpi	r25, 0x01	; 1
    1350:	08 f0       	brcs	.+2      	; 0x1354 <__ftoa_engine+0x40>
    1352:	80 68       	ori	r24, 0x80	; 128
    1354:	91 1d       	adc	r25, r1
    1356:	df 93       	push	r29
    1358:	cf 93       	push	r28
    135a:	1f 93       	push	r17
    135c:	0f 93       	push	r16
    135e:	ff 92       	push	r15
    1360:	ef 92       	push	r14
    1362:	19 2f       	mov	r17, r25
    1364:	98 7f       	andi	r25, 0xF8	; 248
    1366:	96 95       	lsr	r25
    1368:	e9 2f       	mov	r30, r25
    136a:	96 95       	lsr	r25
    136c:	96 95       	lsr	r25
    136e:	e9 0f       	add	r30, r25
    1370:	ff 27       	eor	r31, r31
    1372:	e6 53       	subi	r30, 0x36	; 54
    1374:	ff 4f       	sbci	r31, 0xFF	; 255
    1376:	99 27       	eor	r25, r25
    1378:	33 27       	eor	r19, r19
    137a:	ee 24       	eor	r14, r14
    137c:	ff 24       	eor	r15, r15
    137e:	a7 01       	movw	r20, r14
    1380:	e7 01       	movw	r28, r14
    1382:	05 90       	lpm	r0, Z+
    1384:	08 94       	sec
    1386:	07 94       	ror	r0
    1388:	28 f4       	brcc	.+10     	; 0x1394 <__ftoa_engine+0x80>
    138a:	36 0f       	add	r19, r22
    138c:	e7 1e       	adc	r14, r23
    138e:	f8 1e       	adc	r15, r24
    1390:	49 1f       	adc	r20, r25
    1392:	51 1d       	adc	r21, r1
    1394:	66 0f       	add	r22, r22
    1396:	77 1f       	adc	r23, r23
    1398:	88 1f       	adc	r24, r24
    139a:	99 1f       	adc	r25, r25
    139c:	06 94       	lsr	r0
    139e:	a1 f7       	brne	.-24     	; 0x1388 <__ftoa_engine+0x74>
    13a0:	05 90       	lpm	r0, Z+
    13a2:	07 94       	ror	r0
    13a4:	28 f4       	brcc	.+10     	; 0x13b0 <__ftoa_engine+0x9c>
    13a6:	e7 0e       	add	r14, r23
    13a8:	f8 1e       	adc	r15, r24
    13aa:	49 1f       	adc	r20, r25
    13ac:	56 1f       	adc	r21, r22
    13ae:	c1 1d       	adc	r28, r1
    13b0:	77 0f       	add	r23, r23
    13b2:	88 1f       	adc	r24, r24
    13b4:	99 1f       	adc	r25, r25
    13b6:	66 1f       	adc	r22, r22
    13b8:	06 94       	lsr	r0
    13ba:	a1 f7       	brne	.-24     	; 0x13a4 <__ftoa_engine+0x90>
    13bc:	05 90       	lpm	r0, Z+
    13be:	07 94       	ror	r0
    13c0:	28 f4       	brcc	.+10     	; 0x13cc <__ftoa_engine+0xb8>
    13c2:	f8 0e       	add	r15, r24
    13c4:	49 1f       	adc	r20, r25
    13c6:	56 1f       	adc	r21, r22
    13c8:	c7 1f       	adc	r28, r23
    13ca:	d1 1d       	adc	r29, r1
    13cc:	88 0f       	add	r24, r24
    13ce:	99 1f       	adc	r25, r25
    13d0:	66 1f       	adc	r22, r22
    13d2:	77 1f       	adc	r23, r23
    13d4:	06 94       	lsr	r0
    13d6:	a1 f7       	brne	.-24     	; 0x13c0 <__ftoa_engine+0xac>
    13d8:	05 90       	lpm	r0, Z+
    13da:	07 94       	ror	r0
    13dc:	20 f4       	brcc	.+8      	; 0x13e6 <__ftoa_engine+0xd2>
    13de:	49 0f       	add	r20, r25
    13e0:	56 1f       	adc	r21, r22
    13e2:	c7 1f       	adc	r28, r23
    13e4:	d8 1f       	adc	r29, r24
    13e6:	99 0f       	add	r25, r25
    13e8:	66 1f       	adc	r22, r22
    13ea:	77 1f       	adc	r23, r23
    13ec:	88 1f       	adc	r24, r24
    13ee:	06 94       	lsr	r0
    13f0:	a9 f7       	brne	.-22     	; 0x13dc <__ftoa_engine+0xc8>
    13f2:	84 91       	lpm	r24, Z
    13f4:	10 95       	com	r17
    13f6:	17 70       	andi	r17, 0x07	; 7
    13f8:	41 f0       	breq	.+16     	; 0x140a <__ftoa_engine+0xf6>
    13fa:	d6 95       	lsr	r29
    13fc:	c7 95       	ror	r28
    13fe:	57 95       	ror	r21
    1400:	47 95       	ror	r20
    1402:	f7 94       	ror	r15
    1404:	e7 94       	ror	r14
    1406:	1a 95       	dec	r17
    1408:	c1 f7       	brne	.-16     	; 0x13fa <__ftoa_engine+0xe6>
    140a:	e0 e7       	ldi	r30, 0x70	; 112
    140c:	f0 e0       	ldi	r31, 0x00	; 0
    140e:	68 94       	set
    1410:	15 90       	lpm	r1, Z+
    1412:	15 91       	lpm	r17, Z+
    1414:	35 91       	lpm	r19, Z+
    1416:	65 91       	lpm	r22, Z+
    1418:	95 91       	lpm	r25, Z+
    141a:	05 90       	lpm	r0, Z+
    141c:	7f e2       	ldi	r23, 0x2F	; 47
    141e:	73 95       	inc	r23
    1420:	e1 18       	sub	r14, r1
    1422:	f1 0a       	sbc	r15, r17
    1424:	43 0b       	sbc	r20, r19
    1426:	56 0b       	sbc	r21, r22
    1428:	c9 0b       	sbc	r28, r25
    142a:	d0 09       	sbc	r29, r0
    142c:	c0 f7       	brcc	.-16     	; 0x141e <__ftoa_engine+0x10a>
    142e:	e1 0c       	add	r14, r1
    1430:	f1 1e       	adc	r15, r17
    1432:	43 1f       	adc	r20, r19
    1434:	56 1f       	adc	r21, r22
    1436:	c9 1f       	adc	r28, r25
    1438:	d0 1d       	adc	r29, r0
    143a:	7e f4       	brtc	.+30     	; 0x145a <__ftoa_engine+0x146>
    143c:	70 33       	cpi	r23, 0x30	; 48
    143e:	11 f4       	brne	.+4      	; 0x1444 <__ftoa_engine+0x130>
    1440:	8a 95       	dec	r24
    1442:	e6 cf       	rjmp	.-52     	; 0x1410 <__ftoa_engine+0xfc>
    1444:	e8 94       	clt
    1446:	01 50       	subi	r16, 0x01	; 1
    1448:	30 f0       	brcs	.+12     	; 0x1456 <__ftoa_engine+0x142>
    144a:	08 0f       	add	r16, r24
    144c:	0a f4       	brpl	.+2      	; 0x1450 <__ftoa_engine+0x13c>
    144e:	00 27       	eor	r16, r16
    1450:	02 17       	cp	r16, r18
    1452:	08 f4       	brcc	.+2      	; 0x1456 <__ftoa_engine+0x142>
    1454:	20 2f       	mov	r18, r16
    1456:	23 95       	inc	r18
    1458:	02 2f       	mov	r16, r18
    145a:	7a 33       	cpi	r23, 0x3A	; 58
    145c:	28 f0       	brcs	.+10     	; 0x1468 <__ftoa_engine+0x154>
    145e:	79 e3       	ldi	r23, 0x39	; 57
    1460:	7d 93       	st	X+, r23
    1462:	2a 95       	dec	r18
    1464:	e9 f7       	brne	.-6      	; 0x1460 <__ftoa_engine+0x14c>
    1466:	10 c0       	rjmp	.+32     	; 0x1488 <__ftoa_engine+0x174>
    1468:	7d 93       	st	X+, r23
    146a:	2a 95       	dec	r18
    146c:	89 f6       	brne	.-94     	; 0x1410 <__ftoa_engine+0xfc>
    146e:	06 94       	lsr	r0
    1470:	97 95       	ror	r25
    1472:	67 95       	ror	r22
    1474:	37 95       	ror	r19
    1476:	17 95       	ror	r17
    1478:	17 94       	ror	r1
    147a:	e1 18       	sub	r14, r1
    147c:	f1 0a       	sbc	r15, r17
    147e:	43 0b       	sbc	r20, r19
    1480:	56 0b       	sbc	r21, r22
    1482:	c9 0b       	sbc	r28, r25
    1484:	d0 09       	sbc	r29, r0
    1486:	98 f0       	brcs	.+38     	; 0x14ae <__ftoa_engine+0x19a>
    1488:	23 95       	inc	r18
    148a:	7e 91       	ld	r23, -X
    148c:	73 95       	inc	r23
    148e:	7a 33       	cpi	r23, 0x3A	; 58
    1490:	08 f0       	brcs	.+2      	; 0x1494 <__ftoa_engine+0x180>
    1492:	70 e3       	ldi	r23, 0x30	; 48
    1494:	7c 93       	st	X, r23
    1496:	20 13       	cpse	r18, r16
    1498:	b8 f7       	brcc	.-18     	; 0x1488 <__ftoa_engine+0x174>
    149a:	7e 91       	ld	r23, -X
    149c:	70 61       	ori	r23, 0x10	; 16
    149e:	7d 93       	st	X+, r23
    14a0:	30 f0       	brcs	.+12     	; 0x14ae <__ftoa_engine+0x19a>
    14a2:	83 95       	inc	r24
    14a4:	71 e3       	ldi	r23, 0x31	; 49
    14a6:	7d 93       	st	X+, r23
    14a8:	70 e3       	ldi	r23, 0x30	; 48
    14aa:	2a 95       	dec	r18
    14ac:	e1 f7       	brne	.-8      	; 0x14a6 <__ftoa_engine+0x192>
    14ae:	11 24       	eor	r1, r1
    14b0:	ef 90       	pop	r14
    14b2:	ff 90       	pop	r15
    14b4:	0f 91       	pop	r16
    14b6:	1f 91       	pop	r17
    14b8:	cf 91       	pop	r28
    14ba:	df 91       	pop	r29
    14bc:	99 27       	eor	r25, r25
    14be:	87 fd       	sbrc	r24, 7
    14c0:	90 95       	com	r25
    14c2:	08 95       	ret

000014c4 <strnlen_P>:
    14c4:	fc 01       	movw	r30, r24
    14c6:	05 90       	lpm	r0, Z+
    14c8:	61 50       	subi	r22, 0x01	; 1
    14ca:	70 40       	sbci	r23, 0x00	; 0
    14cc:	01 10       	cpse	r0, r1
    14ce:	d8 f7       	brcc	.-10     	; 0x14c6 <strnlen_P+0x2>
    14d0:	80 95       	com	r24
    14d2:	90 95       	com	r25
    14d4:	8e 0f       	add	r24, r30
    14d6:	9f 1f       	adc	r25, r31
    14d8:	08 95       	ret

000014da <strnlen>:
    14da:	fc 01       	movw	r30, r24
    14dc:	61 50       	subi	r22, 0x01	; 1
    14de:	70 40       	sbci	r23, 0x00	; 0
    14e0:	01 90       	ld	r0, Z+
    14e2:	01 10       	cpse	r0, r1
    14e4:	d8 f7       	brcc	.-10     	; 0x14dc <strnlen+0x2>
    14e6:	80 95       	com	r24
    14e8:	90 95       	com	r25
    14ea:	8e 0f       	add	r24, r30
    14ec:	9f 1f       	adc	r25, r31
    14ee:	08 95       	ret

000014f0 <fputc>:
    14f0:	0f 93       	push	r16
    14f2:	1f 93       	push	r17
    14f4:	cf 93       	push	r28
    14f6:	df 93       	push	r29
    14f8:	fb 01       	movw	r30, r22
    14fa:	23 81       	ldd	r18, Z+3	; 0x03
    14fc:	21 fd       	sbrc	r18, 1
    14fe:	03 c0       	rjmp	.+6      	; 0x1506 <fputc+0x16>
    1500:	8f ef       	ldi	r24, 0xFF	; 255
    1502:	9f ef       	ldi	r25, 0xFF	; 255
    1504:	28 c0       	rjmp	.+80     	; 0x1556 <fputc+0x66>
    1506:	22 ff       	sbrs	r18, 2
    1508:	16 c0       	rjmp	.+44     	; 0x1536 <fputc+0x46>
    150a:	46 81       	ldd	r20, Z+6	; 0x06
    150c:	57 81       	ldd	r21, Z+7	; 0x07
    150e:	24 81       	ldd	r18, Z+4	; 0x04
    1510:	35 81       	ldd	r19, Z+5	; 0x05
    1512:	42 17       	cp	r20, r18
    1514:	53 07       	cpc	r21, r19
    1516:	44 f4       	brge	.+16     	; 0x1528 <fputc+0x38>
    1518:	a0 81       	ld	r26, Z
    151a:	b1 81       	ldd	r27, Z+1	; 0x01
    151c:	9d 01       	movw	r18, r26
    151e:	2f 5f       	subi	r18, 0xFF	; 255
    1520:	3f 4f       	sbci	r19, 0xFF	; 255
    1522:	31 83       	std	Z+1, r19	; 0x01
    1524:	20 83       	st	Z, r18
    1526:	8c 93       	st	X, r24
    1528:	26 81       	ldd	r18, Z+6	; 0x06
    152a:	37 81       	ldd	r19, Z+7	; 0x07
    152c:	2f 5f       	subi	r18, 0xFF	; 255
    152e:	3f 4f       	sbci	r19, 0xFF	; 255
    1530:	37 83       	std	Z+7, r19	; 0x07
    1532:	26 83       	std	Z+6, r18	; 0x06
    1534:	10 c0       	rjmp	.+32     	; 0x1556 <fputc+0x66>
    1536:	eb 01       	movw	r28, r22
    1538:	09 2f       	mov	r16, r25
    153a:	18 2f       	mov	r17, r24
    153c:	00 84       	ldd	r0, Z+8	; 0x08
    153e:	f1 85       	ldd	r31, Z+9	; 0x09
    1540:	e0 2d       	mov	r30, r0
    1542:	09 95       	icall
    1544:	89 2b       	or	r24, r25
    1546:	e1 f6       	brne	.-72     	; 0x1500 <fputc+0x10>
    1548:	8e 81       	ldd	r24, Y+6	; 0x06
    154a:	9f 81       	ldd	r25, Y+7	; 0x07
    154c:	01 96       	adiw	r24, 0x01	; 1
    154e:	9f 83       	std	Y+7, r25	; 0x07
    1550:	8e 83       	std	Y+6, r24	; 0x06
    1552:	81 2f       	mov	r24, r17
    1554:	90 2f       	mov	r25, r16
    1556:	df 91       	pop	r29
    1558:	cf 91       	pop	r28
    155a:	1f 91       	pop	r17
    155c:	0f 91       	pop	r16
    155e:	08 95       	ret

00001560 <printf>:
    1560:	a0 e0       	ldi	r26, 0x00	; 0
    1562:	b0 e0       	ldi	r27, 0x00	; 0
    1564:	e6 eb       	ldi	r30, 0xB6	; 182
    1566:	fa e0       	ldi	r31, 0x0A	; 10
    1568:	0c 94 63 09 	jmp	0x12c6	; 0x12c6 <__prologue_saves__+0x20>
    156c:	ae 01       	movw	r20, r28
    156e:	4b 5f       	subi	r20, 0xFB	; 251
    1570:	5f 4f       	sbci	r21, 0xFF	; 255
    1572:	fa 01       	movw	r30, r20
    1574:	61 91       	ld	r22, Z+
    1576:	71 91       	ld	r23, Z+
    1578:	af 01       	movw	r20, r30
    157a:	80 91 18 01 	lds	r24, 0x0118
    157e:	90 91 19 01 	lds	r25, 0x0119
    1582:	0e 94 19 04 	call	0x832	; 0x832 <vfprintf>
    1586:	e2 e0       	ldi	r30, 0x02	; 2
    1588:	0c 94 7f 09 	jmp	0x12fe	; 0x12fe <__epilogue_restores__+0x20>

0000158c <__ultoa_invert>:
    158c:	fa 01       	movw	r30, r20
    158e:	aa 27       	eor	r26, r26
    1590:	28 30       	cpi	r18, 0x08	; 8
    1592:	51 f1       	breq	.+84     	; 0x15e8 <__ultoa_invert+0x5c>
    1594:	20 31       	cpi	r18, 0x10	; 16
    1596:	81 f1       	breq	.+96     	; 0x15f8 <__ultoa_invert+0x6c>
    1598:	e8 94       	clt
    159a:	6f 93       	push	r22
    159c:	6e 7f       	andi	r22, 0xFE	; 254
    159e:	6e 5f       	subi	r22, 0xFE	; 254
    15a0:	7f 4f       	sbci	r23, 0xFF	; 255
    15a2:	8f 4f       	sbci	r24, 0xFF	; 255
    15a4:	9f 4f       	sbci	r25, 0xFF	; 255
    15a6:	af 4f       	sbci	r26, 0xFF	; 255
    15a8:	b1 e0       	ldi	r27, 0x01	; 1
    15aa:	3e d0       	rcall	.+124    	; 0x1628 <__ultoa_invert+0x9c>
    15ac:	b4 e0       	ldi	r27, 0x04	; 4
    15ae:	3c d0       	rcall	.+120    	; 0x1628 <__ultoa_invert+0x9c>
    15b0:	67 0f       	add	r22, r23
    15b2:	78 1f       	adc	r23, r24
    15b4:	89 1f       	adc	r24, r25
    15b6:	9a 1f       	adc	r25, r26
    15b8:	a1 1d       	adc	r26, r1
    15ba:	68 0f       	add	r22, r24
    15bc:	79 1f       	adc	r23, r25
    15be:	8a 1f       	adc	r24, r26
    15c0:	91 1d       	adc	r25, r1
    15c2:	a1 1d       	adc	r26, r1
    15c4:	6a 0f       	add	r22, r26
    15c6:	71 1d       	adc	r23, r1
    15c8:	81 1d       	adc	r24, r1
    15ca:	91 1d       	adc	r25, r1
    15cc:	a1 1d       	adc	r26, r1
    15ce:	20 d0       	rcall	.+64     	; 0x1610 <__ultoa_invert+0x84>
    15d0:	09 f4       	brne	.+2      	; 0x15d4 <__ultoa_invert+0x48>
    15d2:	68 94       	set
    15d4:	3f 91       	pop	r19
    15d6:	2a e0       	ldi	r18, 0x0A	; 10
    15d8:	26 9f       	mul	r18, r22
    15da:	11 24       	eor	r1, r1
    15dc:	30 19       	sub	r19, r0
    15de:	30 5d       	subi	r19, 0xD0	; 208
    15e0:	31 93       	st	Z+, r19
    15e2:	de f6       	brtc	.-74     	; 0x159a <__ultoa_invert+0xe>
    15e4:	cf 01       	movw	r24, r30
    15e6:	08 95       	ret
    15e8:	46 2f       	mov	r20, r22
    15ea:	47 70       	andi	r20, 0x07	; 7
    15ec:	40 5d       	subi	r20, 0xD0	; 208
    15ee:	41 93       	st	Z+, r20
    15f0:	b3 e0       	ldi	r27, 0x03	; 3
    15f2:	0f d0       	rcall	.+30     	; 0x1612 <__ultoa_invert+0x86>
    15f4:	c9 f7       	brne	.-14     	; 0x15e8 <__ultoa_invert+0x5c>
    15f6:	f6 cf       	rjmp	.-20     	; 0x15e4 <__ultoa_invert+0x58>
    15f8:	46 2f       	mov	r20, r22
    15fa:	4f 70       	andi	r20, 0x0F	; 15
    15fc:	40 5d       	subi	r20, 0xD0	; 208
    15fe:	4a 33       	cpi	r20, 0x3A	; 58
    1600:	18 f0       	brcs	.+6      	; 0x1608 <__ultoa_invert+0x7c>
    1602:	49 5d       	subi	r20, 0xD9	; 217
    1604:	31 fd       	sbrc	r19, 1
    1606:	40 52       	subi	r20, 0x20	; 32
    1608:	41 93       	st	Z+, r20
    160a:	02 d0       	rcall	.+4      	; 0x1610 <__ultoa_invert+0x84>
    160c:	a9 f7       	brne	.-22     	; 0x15f8 <__ultoa_invert+0x6c>
    160e:	ea cf       	rjmp	.-44     	; 0x15e4 <__ultoa_invert+0x58>
    1610:	b4 e0       	ldi	r27, 0x04	; 4
    1612:	a6 95       	lsr	r26
    1614:	97 95       	ror	r25
    1616:	87 95       	ror	r24
    1618:	77 95       	ror	r23
    161a:	67 95       	ror	r22
    161c:	ba 95       	dec	r27
    161e:	c9 f7       	brne	.-14     	; 0x1612 <__ultoa_invert+0x86>
    1620:	00 97       	sbiw	r24, 0x00	; 0
    1622:	61 05       	cpc	r22, r1
    1624:	71 05       	cpc	r23, r1
    1626:	08 95       	ret
    1628:	9b 01       	movw	r18, r22
    162a:	ac 01       	movw	r20, r24
    162c:	0a 2e       	mov	r0, r26
    162e:	06 94       	lsr	r0
    1630:	57 95       	ror	r21
    1632:	47 95       	ror	r20
    1634:	37 95       	ror	r19
    1636:	27 95       	ror	r18
    1638:	ba 95       	dec	r27
    163a:	c9 f7       	brne	.-14     	; 0x162e <__ultoa_invert+0xa2>
    163c:	62 0f       	add	r22, r18
    163e:	73 1f       	adc	r23, r19
    1640:	84 1f       	adc	r24, r20
    1642:	95 1f       	adc	r25, r21
    1644:	a0 1d       	adc	r26, r0
    1646:	08 95       	ret

00001648 <_exit>:
    1648:	f8 94       	cli

0000164a <__stop_program>:
    164a:	ff cf       	rjmp	.-2      	; 0x164a <__stop_program>
