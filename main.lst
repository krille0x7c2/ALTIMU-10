   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
 125               		.section	.rodata.str1.1,"aMS",@progbits,1
 126               	.LC0:
 127 0000 5B58 3A20 		.string	"[X: %d Y: %d Z: %d]"
 127      2564 2059 
 127      3A20 2564 
 127      205A 3A20 
 127      2564 5D00 
 128               		.section	.text.startup,"ax",@progbits
 130               	.global	main
 132               	main:
   1:main.c        **** #include "usart.h"
   2:main.c        **** #include <stdio.h>
   3:main.c        **** #include <stdlib.h>
   4:main.c        **** #include <math.h>
   5:main.c        **** #include <avr/io.h>
   6:main.c        **** #include <avr/pgmspace.h>
   7:main.c        **** #include "twi_master.h"
   8:main.c        **** #include "LPS25H_BAR.h"
   9:main.c        **** #include "L3GD20H_GYRO.h"
  10:main.c        **** 
  11:main.c        **** #include "altiMU_10.h"
  12:main.c        **** #include <util/delay.h>
  13:main.c        **** 
  14:main.c        **** /*
  15:main.c        ****  *Main
  16:main.c        ****  * 
  17:main.c        ****  *  
  18:main.c        ****  */
  19:main.c        **** 
  20:main.c        **** 
  21:main.c        **** 
  22:main.c        **** 
  23:main.c        **** int main(void) {
 134               	.LM0:
 135               	.LFBB1:
 136 0000 CF93      		push r28
 137 0002 DF93      		push r29
 138 0004 CDB7      		in r28,__SP_L__
 139 0006 DEB7      		in r29,__SP_H__
 140 0008 2E97      		sbiw r28,14
 141 000a 0FB6      		in __tmp_reg__,__SREG__
 142 000c F894      		cli
 143 000e DEBF      		out __SP_H__,r29
 144 0010 0FBE      		out __SREG__,__tmp_reg__
 145 0012 CDBF      		out __SP_L__,r28
 146               	/* prologue: function */
 147               	/* frame size = 14 */
 148               	/* stack size = 16 */
 149               	.L__stack_usage = 16
  24:main.c        ****     USART0Init();
 151               	.LM1:
 152 0014 0E94 0000 		call USART0Init
  25:main.c        ****     TWIInit();
 154               	.LM2:
 155 0018 0E94 0000 		call TWIInit
  26:main.c        ****     
  27:main.c        ****     //Set stream pointer
  28:main.c        ****     FILE usart0_str = FDEV_SETUP_STREAM(USART0SendByte, USART0ReceiveByte, _FDEV_SETUP_RW);
 157               	.LM3:
 158 001c FE01      		movw r30,r28
 159 001e 3196      		adiw r30,1
 160 0020 8EE0      		ldi r24,lo8(14)
 161 0022 DF01      		movw r26,r30
 162               		0:
 163 0024 1D92      		st X+,__zero_reg__
 164 0026 8A95      		dec r24
 165 0028 01F4      		brne 0b
 166 002a 83E0      		ldi r24,lo8(3)
 167 002c 8C83      		std Y+4,r24
 168 002e 80E0      		ldi r24,lo8(gs(USART0SendByte))
 169 0030 90E0      		ldi r25,hi8(gs(USART0SendByte))
 170 0032 9A87      		std Y+10,r25
 171 0034 8987      		std Y+9,r24
 172 0036 80E0      		ldi r24,lo8(gs(USART0ReceiveByte))
 173 0038 90E0      		ldi r25,hi8(gs(USART0ReceiveByte))
 174 003a 9C87      		std Y+12,r25
 175 003c 8B87      		std Y+11,r24
  29:main.c        ****     //assign our stream to standart I/O streams
  30:main.c        ****     stdin = stdout = &usart0_str;
 177               	.LM4:
 178 003e F093 0000 		sts __iob+2+1,r31
 179 0042 E093 0000 		sts __iob+2,r30
 180 0046 F093 0000 		sts __iob+1,r31
 181 004a E093 0000 		sts __iob,r30
  31:main.c        ****      /*acc*/
  32:main.c        ****     init_gyro();
 183               	.LM5:
 184 004e 0E94 0000 		call init_gyro
 185               	.LBB5:
  33:main.c        ****     
  34:main.c        ****     /*pressure*/
  35:main.c        **** //    init_bar();
  36:main.c        **** 
  37:main.c        ****     while (1) {
  38:main.c        ****         _delay_ms(1000);
  39:main.c        ****         
  40:main.c        ****         /*acc*/
  41:main.c        ****         struct valstruct val;
  42:main.c        ****         val = read_gyro_values();
  43:main.c        ****         printf("[X: %d Y: %d Z: %d]",val.x,val.y,val.z);
 187               	.LM6:
 188 0052 00E0      		ldi r16,lo8(.LC0)
 189 0054 10E0      		ldi r17,hi8(.LC0)
 190               	.L2:
 191               	.LBB6:
 192               	.LBB7:
 194               	.Ltext1:
   1:/usr/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/avr/include/util/delay.h **** 
   6:/usr/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/avr/include/util/delay.h **** 
   9:/usr/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/avr/include/util/delay.h **** 
  12:/usr/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/avr/include/util/delay.h ****      distribution.
  16:/usr/avr/include/util/delay.h **** 
  17:/usr/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/avr/include/util/delay.h **** 
  21:/usr/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/avr/include/util/delay.h **** 
  33:/usr/avr/include/util/delay.h **** /* $Id: delay.h.in 2385 2013-05-03 13:14:20Z joerg_wunsch $ */
  34:/usr/avr/include/util/delay.h **** 
  35:/usr/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/avr/include/util/delay.h **** 
  38:/usr/avr/include/util/delay.h **** #ifndef __HAS_DELAY_CYCLES
  39:/usr/avr/include/util/delay.h **** #define __HAS_DELAY_CYCLES 1
  40:/usr/avr/include/util/delay.h **** #endif
  41:/usr/avr/include/util/delay.h **** 
  42:/usr/avr/include/util/delay.h **** #include <inttypes.h>
  43:/usr/avr/include/util/delay.h **** #include <util/delay_basic.h>
  44:/usr/avr/include/util/delay.h **** #include <math.h>
  45:/usr/avr/include/util/delay.h **** 
  46:/usr/avr/include/util/delay.h **** /** \file */
  47:/usr/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  48:/usr/avr/include/util/delay.h ****     \code
  49:/usr/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  50:/usr/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  51:/usr/avr/include/util/delay.h ****     #include <util/delay.h>
  52:/usr/avr/include/util/delay.h ****     \endcode
  53:/usr/avr/include/util/delay.h **** 
  54:/usr/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  55:/usr/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  56:/usr/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  57:/usr/avr/include/util/delay.h ****     used.
  58:/usr/avr/include/util/delay.h **** 
  59:/usr/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  60:/usr/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  61:/usr/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  62:/usr/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  63:/usr/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  64:/usr/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  65:/usr/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  66:/usr/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  67:/usr/avr/include/util/delay.h **** 
  68:/usr/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  69:/usr/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  70:/usr/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  71:/usr/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  72:/usr/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  73:/usr/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  74:/usr/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  75:/usr/avr/include/util/delay.h ****     routines linked into the application.
  76:/usr/avr/include/util/delay.h **** 
  77:/usr/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  78:/usr/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  79:/usr/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  80:/usr/avr/include/util/delay.h **** 
  81:/usr/avr/include/util/delay.h **** */
  82:/usr/avr/include/util/delay.h **** 
  83:/usr/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  84:/usr/avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  85:/usr/avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  86:/usr/avr/include/util/delay.h **** #endif
  87:/usr/avr/include/util/delay.h **** 
  88:/usr/avr/include/util/delay.h **** #ifndef F_CPU
  89:/usr/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  90:/usr/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  91:/usr/avr/include/util/delay.h **** # define F_CPU 1000000UL
  92:/usr/avr/include/util/delay.h **** #endif
  93:/usr/avr/include/util/delay.h **** 
  94:/usr/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
  95:/usr/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  96:/usr/avr/include/util/delay.h **** #endif
  97:/usr/avr/include/util/delay.h **** 
  98:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
  99:/usr/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 100:/usr/avr/include/util/delay.h ****   __STDC_HOSTED__
 101:/usr/avr/include/util/delay.h **** #  include <math.h>
 102:/usr/avr/include/util/delay.h **** #endif
 103:/usr/avr/include/util/delay.h **** 
 104:/usr/avr/include/util/delay.h **** /**
 105:/usr/avr/include/util/delay.h ****    \ingroup util_delay
 106:/usr/avr/include/util/delay.h **** 
 107:/usr/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 108:/usr/avr/include/util/delay.h **** 
 109:/usr/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 110:/usr/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 111:/usr/avr/include/util/delay.h **** 
 112:/usr/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 113:/usr/avr/include/util/delay.h **** 
 114:/usr/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 115:/usr/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 116:/usr/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 117:/usr/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 118:/usr/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 119:/usr/avr/include/util/delay.h **** 
 120:/usr/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 121:/usr/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 122:/usr/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 123:/usr/avr/include/util/delay.h ****    no delay i.e., 0ms.
 124:/usr/avr/include/util/delay.h **** 
 125:/usr/avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 126:/usr/avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 127:/usr/avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 128:/usr/avr/include/util/delay.h **** 
 129:/usr/avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 130:/usr/avr/include/util/delay.h ****    to round down and round to closest integer.
 131:/usr/avr/include/util/delay.h **** 
 132:/usr/avr/include/util/delay.h ****    Note: The new implementation of _delay_ms(double __ms) with 
 133:/usr/avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible. 
 134:/usr/avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 135:/usr/avr/include/util/delay.h ****    Also, the backward compatible
 136:/usr/avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 137:/usr/avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 138:/usr/avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 139:/usr/avr/include/util/delay.h **** 
 140:/usr/avr/include/util/delay.h ****  */
 141:/usr/avr/include/util/delay.h **** void
 142:/usr/avr/include/util/delay.h **** _delay_ms(double __ms)
 143:/usr/avr/include/util/delay.h **** {
 144:/usr/avr/include/util/delay.h **** 	double __tmp ; 
 145:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 146:/usr/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 147:/usr/avr/include/util/delay.h ****   __STDC_HOSTED__
 148:/usr/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 149:/usr/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 150:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 151:/usr/avr/include/util/delay.h **** 
 152:/usr/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 153:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 154:/usr/avr/include/util/delay.h **** 
 155:/usr/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 156:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 157:/usr/avr/include/util/delay.h **** 
 158:/usr/avr/include/util/delay.h **** 	#else
 159:/usr/avr/include/util/delay.h **** 		//round up by default
 160:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 161:/usr/avr/include/util/delay.h **** 	#endif
 162:/usr/avr/include/util/delay.h **** 
 163:/usr/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 196               	.LM7:
 197 0056 BFEF      		ldi r27,lo8(3199999)
 198 0058 23ED      		ldi r18,hi8(3199999)
 199 005a 80E3      		ldi r24,hlo8(3199999)
 200 005c B150      		1: subi r27,1
 201 005e 2040      		sbci r18,0
 202 0060 8040      		sbci r24,0
 203 0062 01F4      		brne 1b
 204 0064 00C0      		rjmp .
 205 0066 0000      		nop
 206               	.LBE7:
 207               	.LBE6:
 209               	.Ltext2:
  42:main.c        ****         printf("[X: %d Y: %d Z: %d]",val.x,val.y,val.z);
 211               	.LM8:
 212 0068 0E94 0000 		call read_gyro_values
 214               	.LM9:
 215 006c 1F92      		push __zero_reg__
 216 006e 8F93      		push r24
 217 0070 1F92      		push __zero_reg__
 218 0072 7F93      		push r23
 219 0074 1F92      		push __zero_reg__
 220 0076 6F93      		push r22
 221 0078 1F93      		push r17
 222 007a 0F93      		push r16
 223 007c 0E94 0000 		call printf
 224               	.LBE5:
  44:main.c        ****         
  45:main.c        ****        /*pressure*/
  46:main.c        **** //        printf("%f ", read_temp_celsius());
  47:main.c        **** //        printf("%f hpa", read_pressure_hpa());
  48:main.c        **** //        i2c_stop();
  49:main.c        **** 
  50:main.c        ****     }
 226               	.LM10:
 227 0080 0FB6      		in __tmp_reg__,__SREG__
 228 0082 F894      		cli
 229 0084 DEBF      		out __SP_H__,r29
 230 0086 0FBE      		out __SREG__,__tmp_reg__
 231 0088 CDBF      		out __SP_L__,r28
 232 008a 00C0      		rjmp .L2
 237               	.Lscope1:
 238               		.text
 240               	.Letext0:
 241               		.ident	"GCC: (GNU) 4.9.2 20141224 (prerelease)"
 242               	.global __do_copy_data
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/cclv2YTb.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cclv2YTb.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cclv2YTb.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cclv2YTb.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cclv2YTb.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/cclv2YTb.s:132    .text.startup:0000000000000000 main

UNDEFINED SYMBOLS
USART0Init
TWIInit
USART0SendByte
USART0ReceiveByte
__iob
init_gyro
read_gyro_values
printf
__do_copy_data
